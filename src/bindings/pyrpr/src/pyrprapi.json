{
  "constants": {
    "RPR_API_VERSION": {
      "name": "RPR_API_VERSION",
      "value": "0x010028600"
    },
    "RPR_SUCCESS": {
      "name": "RPR_SUCCESS",
      "value": "0"
    },
    "RPR_ERROR_COMPUTE_API_NOT_SUPPORTED": {
      "name": "RPR_ERROR_COMPUTE_API_NOT_SUPPORTED",
      "value": "-1"
    },
    "RPR_ERROR_OUT_OF_SYSTEM_MEMORY": {
      "name": "RPR_ERROR_OUT_OF_SYSTEM_MEMORY",
      "value": "-2"
    },
    "RPR_ERROR_OUT_OF_VIDEO_MEMORY": {
      "name": "RPR_ERROR_OUT_OF_VIDEO_MEMORY",
      "value": "-3"
    },
    "RPR_ERROR_INVALID_LIGHTPATH_EXPR": {
      "name": "RPR_ERROR_INVALID_LIGHTPATH_EXPR",
      "value": "-5"
    },
    "RPR_ERROR_INVALID_IMAGE": {
      "name": "RPR_ERROR_INVALID_IMAGE",
      "value": "-6"
    },
    "RPR_ERROR_INVALID_AA_METHOD": {
      "name": "RPR_ERROR_INVALID_AA_METHOD",
      "value": "-7"
    },
    "RPR_ERROR_UNSUPPORTED_IMAGE_FORMAT": {
      "name": "RPR_ERROR_UNSUPPORTED_IMAGE_FORMAT",
      "value": "-8"
    },
    "RPR_ERROR_INVALID_GL_TEXTURE": {
      "name": "RPR_ERROR_INVALID_GL_TEXTURE",
      "value": "-9"
    },
    "RPR_ERROR_INVALID_CL_IMAGE": {
      "name": "RPR_ERROR_INVALID_CL_IMAGE",
      "value": "-10"
    },
    "RPR_ERROR_INVALID_OBJECT": {
      "name": "RPR_ERROR_INVALID_OBJECT",
      "value": "-11"
    },
    "RPR_ERROR_INVALID_PARAMETER": {
      "name": "RPR_ERROR_INVALID_PARAMETER",
      "value": "-12"
    },
    "RPR_ERROR_INVALID_TAG": {
      "name": "RPR_ERROR_INVALID_TAG",
      "value": "-13"
    },
    "RPR_ERROR_INVALID_LIGHT": {
      "name": "RPR_ERROR_INVALID_LIGHT",
      "value": "-14"
    },
    "RPR_ERROR_INVALID_CONTEXT": {
      "name": "RPR_ERROR_INVALID_CONTEXT",
      "value": "-15"
    },
    "RPR_ERROR_UNIMPLEMENTED": {
      "name": "RPR_ERROR_UNIMPLEMENTED",
      "value": "-16"
    },
    "RPR_ERROR_INVALID_API_VERSION": {
      "name": "RPR_ERROR_INVALID_API_VERSION",
      "value": "-17"
    },
    "RPR_ERROR_INTERNAL_ERROR": {
      "name": "RPR_ERROR_INTERNAL_ERROR",
      "value": "-18"
    },
    "RPR_ERROR_IO_ERROR": {
      "name": "RPR_ERROR_IO_ERROR",
      "value": "-19"
    },
    "RPR_ERROR_UNSUPPORTED_SHADER_PARAMETER_TYPE": {
      "name": "RPR_ERROR_UNSUPPORTED_SHADER_PARAMETER_TYPE",
      "value": "-20"
    },
    "RPR_ERROR_MATERIAL_STACK_OVERFLOW": {
      "name": "RPR_ERROR_MATERIAL_STACK_OVERFLOW",
      "value": "-21"
    },
    "RPR_ERROR_INVALID_PARAMETER_TYPE": {
      "name": "RPR_ERROR_INVALID_PARAMETER_TYPE",
      "value": "-22"
    },
    "RPR_ERROR_UNSUPPORTED": {
      "name": "RPR_ERROR_UNSUPPORTED",
      "value": "-23"
    },
    "RPR_ERROR_OPENCL_OUT_OF_HOST_MEMORY": {
      "name": "RPR_ERROR_OPENCL_OUT_OF_HOST_MEMORY",
      "value": "-24"
    },
    "RPR_PARAMETER_TYPE_FLOAT": {
      "name": "RPR_PARAMETER_TYPE_FLOAT",
      "value": "0x1"
    },
    "RPR_PARAMETER_TYPE_FLOAT2": {
      "name": "RPR_PARAMETER_TYPE_FLOAT2",
      "value": "0x2"
    },
    "RPR_PARAMETER_TYPE_FLOAT3": {
      "name": "RPR_PARAMETER_TYPE_FLOAT3",
      "value": "0x3"
    },
    "RPR_PARAMETER_TYPE_FLOAT4": {
      "name": "RPR_PARAMETER_TYPE_FLOAT4",
      "value": "0x4"
    },
    "RPR_PARAMETER_TYPE_IMAGE": {
      "name": "RPR_PARAMETER_TYPE_IMAGE",
      "value": "0x5"
    },
    "RPR_PARAMETER_TYPE_STRING": {
      "name": "RPR_PARAMETER_TYPE_STRING",
      "value": "0x6"
    },
    "RPR_PARAMETER_TYPE_SHADER": {
      "name": "RPR_PARAMETER_TYPE_SHADER",
      "value": "0x7"
    },
    "RPR_PARAMETER_TYPE_UINT": {
      "name": "RPR_PARAMETER_TYPE_UINT",
      "value": "0x8"
    },
    "RPR_CONTEXT_OPENCL": {
      "name": "RPR_CONTEXT_OPENCL",
      "value": "(1 << 0)"
    },
    "RPR_CONTEXT_DIRECTCOMPUTE": {
      "name": "RPR_CONTEXT_DIRECTCOMPUTE",
      "value": "(1 << 1)"
    },
    "RPR_CONTEXT_REFERENCE": {
      "name": "RPR_CONTEXT_REFERENCE",
      "value": "(1 << 2)"
    },
    "RPR_CONTEXT_OPENGL": {
      "name": "RPR_CONTEXT_OPENGL",
      "value": "(1 << 3)"
    },
    "RPR_CONTEXT_METAL": {
      "name": "RPR_CONTEXT_METAL",
      "value": "(1 << 4)"
    },
    "RPR_CREATION_FLAGS_ENABLE_GPU0": {
      "name": "RPR_CREATION_FLAGS_ENABLE_GPU0",
      "value": "(1 << 0)"
    },
    "RPR_CREATION_FLAGS_ENABLE_GPU1": {
      "name": "RPR_CREATION_FLAGS_ENABLE_GPU1",
      "value": "(1 << 1)"
    },
    "RPR_CREATION_FLAGS_ENABLE_GPU2": {
      "name": "RPR_CREATION_FLAGS_ENABLE_GPU2",
      "value": "(1 << 2)"
    },
    "RPR_CREATION_FLAGS_ENABLE_GPU3": {
      "name": "RPR_CREATION_FLAGS_ENABLE_GPU3",
      "value": "(1 << 3)"
    },
    "RPR_CREATION_FLAGS_ENABLE_CPU": {
      "name": "RPR_CREATION_FLAGS_ENABLE_CPU",
      "value": "(1 << 4)"
    },
    "RPR_CREATION_FLAGS_ENABLE_GL_INTEROP": {
      "name": "RPR_CREATION_FLAGS_ENABLE_GL_INTEROP",
      "value": "(1 << 5)"
    },
    "RPR_CREATION_FLAGS_ENABLE_GPU4": {
      "name": "RPR_CREATION_FLAGS_ENABLE_GPU4",
      "value": "(1 << 6)"
    },
    "RPR_CREATION_FLAGS_ENABLE_GPU5": {
      "name": "RPR_CREATION_FLAGS_ENABLE_GPU5",
      "value": "(1 << 7)"
    },
    "RPR_CREATION_FLAGS_ENABLE_GPU6": {
      "name": "RPR_CREATION_FLAGS_ENABLE_GPU6",
      "value": "(1 << 8)"
    },
    "RPR_CREATION_FLAGS_ENABLE_GPU7": {
      "name": "RPR_CREATION_FLAGS_ENABLE_GPU7",
      "value": "(1 << 9)"
    },
    "RPR_CREATION_FLAGS_ENABLE_METAL": {
      "name": "RPR_CREATION_FLAGS_ENABLE_METAL",
      "value": "(1 << 10)"
    },
    "RPR_FILTER_BOX": {
      "name": "RPR_FILTER_BOX",
      "value": "0x1"
    },
    "RPR_FILTER_TRIANGLE": {
      "name": "RPR_FILTER_TRIANGLE",
      "value": "0x2"
    },
    "RPR_FILTER_GAUSSIAN": {
      "name": "RPR_FILTER_GAUSSIAN",
      "value": "0x3"
    },
    "RPR_FILTER_MITCHELL": {
      "name": "RPR_FILTER_MITCHELL",
      "value": "0x4"
    },
    "RPR_FILTER_LANCZOS": {
      "name": "RPR_FILTER_LANCZOS",
      "value": "0x5"
    },
    "RPR_FILTER_BLACKMANHARRIS": {
      "name": "RPR_FILTER_BLACKMANHARRIS",
      "value": "0x6"
    },
    "RPR_SHAPE_TYPE_MESH": {
      "name": "RPR_SHAPE_TYPE_MESH",
      "value": "0x1"
    },
    "RPR_SHAPE_TYPE_INSTANCE": {
      "name": "RPR_SHAPE_TYPE_INSTANCE",
      "value": "0x2"
    },
    "RPR_LIGHT_TYPE_POINT": {
      "name": "RPR_LIGHT_TYPE_POINT",
      "value": "0x1"
    },
    "RPR_LIGHT_TYPE_DIRECTIONAL": {
      "name": "RPR_LIGHT_TYPE_DIRECTIONAL",
      "value": "0x2"
    },
    "RPR_LIGHT_TYPE_SPOT": {
      "name": "RPR_LIGHT_TYPE_SPOT",
      "value": "0x3"
    },
    "RPR_LIGHT_TYPE_ENVIRONMENT": {
      "name": "RPR_LIGHT_TYPE_ENVIRONMENT",
      "value": "0x4"
    },
    "RPR_LIGHT_TYPE_SKY": {
      "name": "RPR_LIGHT_TYPE_SKY",
      "value": "0x5"
    },
    "RPR_LIGHT_TYPE_IES": {
      "name": "RPR_LIGHT_TYPE_IES",
      "value": "0x6"
    },
    "RPR_OBJECT_NAME": {
      "name": "RPR_OBJECT_NAME",
      "value": "0x777777"
    },
    "RPR_CONTEXT_CREATEPROP_CPU_THREAD_LIMIT": {
      "name": "RPR_CONTEXT_CREATEPROP_CPU_THREAD_LIMIT",
      "value": "0x600"
    },
    "RPR_CONTEXT_CREATION_FLAGS": {
      "name": "RPR_CONTEXT_CREATION_FLAGS",
      "value": "0x102"
    },
    "RPR_CONTEXT_CACHE_PATH": {
      "name": "RPR_CONTEXT_CACHE_PATH",
      "value": "0x103"
    },
    "RPR_CONTEXT_RENDER_STATUS": {
      "name": "RPR_CONTEXT_RENDER_STATUS",
      "value": "0x104"
    },
    "RPR_CONTEXT_RENDER_STATISTICS": {
      "name": "RPR_CONTEXT_RENDER_STATISTICS",
      "value": "0x105"
    },
    "RPR_CONTEXT_DEVICE_COUNT": {
      "name": "RPR_CONTEXT_DEVICE_COUNT",
      "value": "0x106"
    },
    "RPR_CONTEXT_PARAMETER_COUNT": {
      "name": "RPR_CONTEXT_PARAMETER_COUNT",
      "value": "0x107"
    },
    "RPR_CONTEXT_ACTIVE_PLUGIN": {
      "name": "RPR_CONTEXT_ACTIVE_PLUGIN",
      "value": "0x108"
    },
    "RPR_CONTEXT_SCENE": {
      "name": "RPR_CONTEXT_SCENE",
      "value": "0x109"
    },
    "RPR_CONTEXT_AA_CELL_SIZE": {
      "name": "RPR_CONTEXT_AA_CELL_SIZE",
      "value": "0x10A"
    },
    "RPR_CONTEXT_AA_SAMPLES": {
      "name": "RPR_CONTEXT_AA_SAMPLES",
      "value": "0x10B"
    },
    "RPR_CONTEXT_IMAGE_FILTER_TYPE": {
      "name": "RPR_CONTEXT_IMAGE_FILTER_TYPE",
      "value": "0x10C"
    },
    "RPR_CONTEXT_IMAGE_FILTER_BOX_RADIUS": {
      "name": "RPR_CONTEXT_IMAGE_FILTER_BOX_RADIUS",
      "value": "0x10D"
    },
    "RPR_CONTEXT_IMAGE_FILTER_GAUSSIAN_RADIUS": {
      "name": "RPR_CONTEXT_IMAGE_FILTER_GAUSSIAN_RADIUS",
      "value": "0x10E"
    },
    "RPR_CONTEXT_IMAGE_FILTER_TRIANGLE_RADIUS": {
      "name": "RPR_CONTEXT_IMAGE_FILTER_TRIANGLE_RADIUS",
      "value": "0x10F"
    },
    "RPR_CONTEXT_IMAGE_FILTER_MITCHELL_RADIUS": {
      "name": "RPR_CONTEXT_IMAGE_FILTER_MITCHELL_RADIUS",
      "value": "0x110"
    },
    "RPR_CONTEXT_IMAGE_FILTER_LANCZOS_RADIUS": {
      "name": "RPR_CONTEXT_IMAGE_FILTER_LANCZOS_RADIUS",
      "value": "0x111"
    },
    "RPR_CONTEXT_IMAGE_FILTER_BLACKMANHARRIS_RADIUS": {
      "name": "RPR_CONTEXT_IMAGE_FILTER_BLACKMANHARRIS_RADIUS",
      "value": "0x112"
    },
    "RPR_CONTEXT_TONE_MAPPING_TYPE": {
      "name": "RPR_CONTEXT_TONE_MAPPING_TYPE",
      "value": "0x113"
    },
    "RPR_CONTEXT_TONE_MAPPING_LINEAR_SCALE": {
      "name": "RPR_CONTEXT_TONE_MAPPING_LINEAR_SCALE",
      "value": "0x114"
    },
    "RPR_CONTEXT_TONE_MAPPING_PHOTO_LINEAR_SENSITIVITY": {
      "name": "RPR_CONTEXT_TONE_MAPPING_PHOTO_LINEAR_SENSITIVITY",
      "value": "0x115"
    },
    "RPR_CONTEXT_TONE_MAPPING_PHOTO_LINEAR_EXPOSURE": {
      "name": "RPR_CONTEXT_TONE_MAPPING_PHOTO_LINEAR_EXPOSURE",
      "value": "0x116"
    },
    "RPR_CONTEXT_TONE_MAPPING_PHOTO_LINEAR_FSTOP": {
      "name": "RPR_CONTEXT_TONE_MAPPING_PHOTO_LINEAR_FSTOP",
      "value": "0x117"
    },
    "RPR_CONTEXT_TONE_MAPPING_REINHARD02_PRE_SCALE": {
      "name": "RPR_CONTEXT_TONE_MAPPING_REINHARD02_PRE_SCALE",
      "value": "0x118"
    },
    "RPR_CONTEXT_TONE_MAPPING_REINHARD02_POST_SCALE": {
      "name": "RPR_CONTEXT_TONE_MAPPING_REINHARD02_POST_SCALE",
      "value": "0x119"
    },
    "RPR_CONTEXT_TONE_MAPPING_REINHARD02_BURN": {
      "name": "RPR_CONTEXT_TONE_MAPPING_REINHARD02_BURN",
      "value": "0x11A"
    },
    "RPR_CONTEXT_MAX_RECURSION": {
      "name": "RPR_CONTEXT_MAX_RECURSION",
      "value": "0x11B"
    },
    "RPR_CONTEXT_RAY_CAST_EPISLON": {
      "name": "RPR_CONTEXT_RAY_CAST_EPISLON",
      "value": "0x11C"
    },
    "RPR_CONTEXT_RADIANCE_CLAMP": {
      "name": "RPR_CONTEXT_RADIANCE_CLAMP",
      "value": "0x11D"
    },
    "RPR_CONTEXT_X_FLIP": {
      "name": "RPR_CONTEXT_X_FLIP",
      "value": "0x11E"
    },
    "RPR_CONTEXT_Y_FLIP": {
      "name": "RPR_CONTEXT_Y_FLIP",
      "value": "0x11F"
    },
    "RPR_CONTEXT_TEXTURE_GAMMA": {
      "name": "RPR_CONTEXT_TEXTURE_GAMMA",
      "value": "0x120"
    },
    "RPR_CONTEXT_PDF_THRESHOLD": {
      "name": "RPR_CONTEXT_PDF_THRESHOLD",
      "value": "0x121"
    },
    "RPR_CONTEXT_RENDER_MODE": {
      "name": "RPR_CONTEXT_RENDER_MODE",
      "value": "0x122"
    },
    "RPR_CONTEXT_ROUGHNESS_CAP": {
      "name": "RPR_CONTEXT_ROUGHNESS_CAP",
      "value": "0x123"
    },
    "RPR_CONTEXT_DISPLAY_GAMMA": {
      "name": "RPR_CONTEXT_DISPLAY_GAMMA",
      "value": "0x124"
    },
    "RPR_CONTEXT_MATERIAL_STACK_SIZE": {
      "name": "RPR_CONTEXT_MATERIAL_STACK_SIZE",
      "value": "0x125"
    },
    "RPR_CONTEXT_CLIPPING_PLANE": {
      "name": "RPR_CONTEXT_CLIPPING_PLANE",
      "value": "0x126"
    },
    "RPR_CONTEXT_GPU0_NAME": {
      "name": "RPR_CONTEXT_GPU0_NAME",
      "value": "0x127"
    },
    "RPR_CONTEXT_GPU1_NAME": {
      "name": "RPR_CONTEXT_GPU1_NAME",
      "value": "0x128"
    },
    "RPR_CONTEXT_GPU2_NAME": {
      "name": "RPR_CONTEXT_GPU2_NAME",
      "value": "0x129"
    },
    "RPR_CONTEXT_GPU3_NAME": {
      "name": "RPR_CONTEXT_GPU3_NAME",
      "value": "0x12A"
    },
    "RPR_CONTEXT_CPU_NAME": {
      "name": "RPR_CONTEXT_CPU_NAME",
      "value": "0x12B"
    },
    "RPR_CONTEXT_GPU4_NAME": {
      "name": "RPR_CONTEXT_GPU4_NAME",
      "value": "0x12C"
    },
    "RPR_CONTEXT_GPU5_NAME": {
      "name": "RPR_CONTEXT_GPU5_NAME",
      "value": "0x12D"
    },
    "RPR_CONTEXT_GPU6_NAME": {
      "name": "RPR_CONTEXT_GPU6_NAME",
      "value": "0x12E"
    },
    "RPR_CONTEXT_GPU7_NAME": {
      "name": "RPR_CONTEXT_GPU7_NAME",
      "value": "0x12F"
    },
    "RPR_CONTEXT_TONE_MAPPING_EXPONENTIAL_INTENSITY": {
      "name": "RPR_CONTEXT_TONE_MAPPING_EXPONENTIAL_INTENSITY",
      "value": "0x130"
    },
    "RPR_CONTEXT_FRAMECOUNT": {
      "name": "RPR_CONTEXT_FRAMECOUNT",
      "value": "0x131"
    },
    "RPR_CONTEXT_TEXTURE_COMPRESSION": {
      "name": "RPR_CONTEXT_TEXTURE_COMPRESSION",
      "value": "0x132"
    },
    "RPR_CONTEXT_AO_RAY_LENGTH": {
      "name": "RPR_CONTEXT_AO_RAY_LENGTH",
      "value": "0x133"
    },
    "RPR_CONTEXT_OOC_TEXTURE_CACHE": {
      "name": "RPR_CONTEXT_OOC_TEXTURE_CACHE",
      "value": "0x134"
    },
    "RPR_CONTEXT_PREVIEW": {
      "name": "RPR_CONTEXT_PREVIEW",
      "value": "0x135"
    },
    "RPR_CONTEXT_CPU_THREAD_LIMIT": {
      "name": "RPR_CONTEXT_CPU_THREAD_LIMIT",
      "value": "0x136"
    },
    "RPR_CONTEXT_LAST_ERROR_MESSAGE": {
      "name": "RPR_CONTEXT_LAST_ERROR_MESSAGE",
      "value": "0x137"
    },
    "RPR_CONTEXT_MAX_DEPTH_DIFFUSE": {
      "name": "RPR_CONTEXT_MAX_DEPTH_DIFFUSE",
      "value": "0x138"
    },
    "RPR_CONTEXT_MAX_DEPTH_GLOSSY": {
      "name": "RPR_CONTEXT_MAX_DEPTH_GLOSSY",
      "value": "0x139"
    },
    "RPR_CONTEXT_OOC_CACHE_PATH": {
      "name": "RPR_CONTEXT_OOC_CACHE_PATH",
      "value": "0x13A"
    },
    "RPR_CONTEXT_MAX_DEPTH_REFRACTION": {
      "name": "RPR_CONTEXT_MAX_DEPTH_REFRACTION",
      "value": "0x13B"
    },
    "RPR_CONTEXT_MAX_DEPTH_GLOSSY_REFRACTION": {
      "name": "RPR_CONTEXT_MAX_DEPTH_GLOSSY_REFRACTION",
      "value": "0x13C"
    },
    "RPR_CONTEXT_MAX": {
      "name": "RPR_CONTEXT_MAX",
      "value": "0x13D"
    },
    "RPR_CAMERA_TRANSFORM": {
      "name": "RPR_CAMERA_TRANSFORM",
      "value": "0x201"
    },
    "RPR_CAMERA_FSTOP": {
      "name": "RPR_CAMERA_FSTOP",
      "value": "0x202"
    },
    "RPR_CAMERA_APERTURE_BLADES": {
      "name": "RPR_CAMERA_APERTURE_BLADES",
      "value": "0x203"
    },
    "RPR_CAMERA_RESPONSE": {
      "name": "RPR_CAMERA_RESPONSE",
      "value": "0x204"
    },
    "RPR_CAMERA_EXPOSURE": {
      "name": "RPR_CAMERA_EXPOSURE",
      "value": "0x205"
    },
    "RPR_CAMERA_FOCAL_LENGTH": {
      "name": "RPR_CAMERA_FOCAL_LENGTH",
      "value": "0x206"
    },
    "RPR_CAMERA_SENSOR_SIZE": {
      "name": "RPR_CAMERA_SENSOR_SIZE",
      "value": "0x207"
    },
    "RPR_CAMERA_MODE": {
      "name": "RPR_CAMERA_MODE",
      "value": "0x208"
    },
    "RPR_CAMERA_ORTHO_WIDTH": {
      "name": "RPR_CAMERA_ORTHO_WIDTH",
      "value": "0x209"
    },
    "RPR_CAMERA_ORTHO_HEIGHT": {
      "name": "RPR_CAMERA_ORTHO_HEIGHT",
      "value": "0x20A"
    },
    "RPR_CAMERA_FOCUS_DISTANCE": {
      "name": "RPR_CAMERA_FOCUS_DISTANCE",
      "value": "0x20B"
    },
    "RPR_CAMERA_POSITION": {
      "name": "RPR_CAMERA_POSITION",
      "value": "0x20C"
    },
    "RPR_CAMERA_LOOKAT": {
      "name": "RPR_CAMERA_LOOKAT",
      "value": "0x20D"
    },
    "RPR_CAMERA_UP": {
      "name": "RPR_CAMERA_UP",
      "value": "0x20E"
    },
    "RPR_CAMERA_FOCAL_TILT": {
      "name": "RPR_CAMERA_FOCAL_TILT",
      "value": "0x20F"
    },
    "RPR_CAMERA_LENS_SHIFT": {
      "name": "RPR_CAMERA_LENS_SHIFT",
      "value": "0x210"
    },
    "RPR_CAMERA_IPD": {
      "name": "RPR_CAMERA_IPD",
      "value": "0x211"
    },
    "RPR_CAMERA_TILT_CORRECTION": {
      "name": "RPR_CAMERA_TILT_CORRECTION",
      "value": "0x212"
    },
    "RPR_CAMERA_NEAR_PLANE": {
      "name": "RPR_CAMERA_NEAR_PLANE",
      "value": "0x213"
    },
    "RPR_CAMERA_FAR_PLANE": {
      "name": "RPR_CAMERA_FAR_PLANE",
      "value": "0x214"
    },
    "RPR_IMAGE_FORMAT": {
      "name": "RPR_IMAGE_FORMAT",
      "value": "0x301"
    },
    "RPR_IMAGE_DESC": {
      "name": "RPR_IMAGE_DESC",
      "value": "0x302"
    },
    "RPR_IMAGE_DATA": {
      "name": "RPR_IMAGE_DATA",
      "value": "0x303"
    },
    "RPR_IMAGE_DATA_SIZEBYTE": {
      "name": "RPR_IMAGE_DATA_SIZEBYTE",
      "value": "0x304"
    },
    "RPR_IMAGE_WRAP": {
      "name": "RPR_IMAGE_WRAP",
      "value": "0x305"
    },
    "RPR_IMAGE_FILTER": {
      "name": "RPR_IMAGE_FILTER",
      "value": "0x306"
    },
    "RPR_BUFFER_DESC": {
      "name": "RPR_BUFFER_DESC",
      "value": "0x350"
    },
    "RPR_BUFFER_DATA": {
      "name": "RPR_BUFFER_DATA",
      "value": "0x351"
    },
    "RPR_SHAPE_TYPE": {
      "name": "RPR_SHAPE_TYPE",
      "value": "0x401"
    },
    "RPR_SHAPE_VIDMEM_USAGE": {
      "name": "RPR_SHAPE_VIDMEM_USAGE",
      "value": "0x402"
    },
    "RPR_SHAPE_TRANSFORM": {
      "name": "RPR_SHAPE_TRANSFORM",
      "value": "0x403"
    },
    "RPR_SHAPE_MATERIAL": {
      "name": "RPR_SHAPE_MATERIAL",
      "value": "0x404"
    },
    "RPR_SHAPE_LINEAR_MOTION": {
      "name": "RPR_SHAPE_LINEAR_MOTION",
      "value": "0x405"
    },
    "RPR_SHAPE_ANGULAR_MOTION": {
      "name": "RPR_SHAPE_ANGULAR_MOTION",
      "value": "0x406"
    },
    "RPR_SHAPE_VISIBILITY_FLAG": {
      "name": "RPR_SHAPE_VISIBILITY_FLAG",
      "value": "0x407"
    },
    "RPR_SHAPE_SHADOW_FLAG": {
      "name": "RPR_SHAPE_SHADOW_FLAG",
      "value": "0x408"
    },
    "RPR_SHAPE_SUBDIVISION_FACTOR": {
      "name": "RPR_SHAPE_SUBDIVISION_FACTOR",
      "value": "0x409"
    },
    "RPR_SHAPE_DISPLACEMENT_SCALE": {
      "name": "RPR_SHAPE_DISPLACEMENT_SCALE",
      "value": "0x40A"
    },
    "RPR_SHAPE_VISIBILITY_PRIMARY_ONLY_FLAG": {
      "name": "RPR_SHAPE_VISIBILITY_PRIMARY_ONLY_FLAG",
      "value": "0x40C"
    },
    "RPR_SHAPE_VISIBILITY_IN_SPECULAR_FLAG": {
      "name": "RPR_SHAPE_VISIBILITY_IN_SPECULAR_FLAG",
      "value": "0x40D"
    },
    "RPR_SHAPE_SHADOW_CATCHER_FLAG": {
      "name": "RPR_SHAPE_SHADOW_CATCHER_FLAG",
      "value": "0x40E"
    },
    "RPR_SHAPE_VOLUME_MATERIAL": {
      "name": "RPR_SHAPE_VOLUME_MATERIAL",
      "value": "0x40F"
    },
    "RPR_SHAPE_OBJECT_GROUP_ID": {
      "name": "RPR_SHAPE_OBJECT_GROUP_ID",
      "value": "0x410"
    },
    "RPR_SHAPE_SUBDIVISION_CREASEWEIGHT": {
      "name": "RPR_SHAPE_SUBDIVISION_CREASEWEIGHT",
      "value": "0x411"
    },
    "RPR_SHAPE_SUBDIVISION_BOUNDARYINTEROP": {
      "name": "RPR_SHAPE_SUBDIVISION_BOUNDARYINTEROP",
      "value": "0x412"
    },
    "RPR_SHAPE_DISPLACEMENT_MATERIAL": {
      "name": "RPR_SHAPE_DISPLACEMENT_MATERIAL",
      "value": "0x413"
    },
    "RPR_SHAPE_MATERIALS_PER_FACE": {
      "name": "RPR_SHAPE_MATERIALS_PER_FACE",
      "value": "0x415"
    },
    "RPR_SHAPE_SCALE_MOTION": {
      "name": "RPR_SHAPE_SCALE_MOTION",
      "value": "0x416"
    },
    "RPR_SHAPE_HETERO_VOLUME": {
      "name": "RPR_SHAPE_HETERO_VOLUME",
      "value": "0x417"
    },
    "RPR_MESH_POLYGON_COUNT": {
      "name": "RPR_MESH_POLYGON_COUNT",
      "value": "0x501"
    },
    "RPR_MESH_VERTEX_COUNT": {
      "name": "RPR_MESH_VERTEX_COUNT",
      "value": "0x502"
    },
    "RPR_MESH_NORMAL_COUNT": {
      "name": "RPR_MESH_NORMAL_COUNT",
      "value": "0x503"
    },
    "RPR_MESH_UV_COUNT": {
      "name": "RPR_MESH_UV_COUNT",
      "value": "0x504"
    },
    "RPR_MESH_VERTEX_ARRAY": {
      "name": "RPR_MESH_VERTEX_ARRAY",
      "value": "0x505"
    },
    "RPR_MESH_NORMAL_ARRAY": {
      "name": "RPR_MESH_NORMAL_ARRAY",
      "value": "0x506"
    },
    "RPR_MESH_UV_ARRAY": {
      "name": "RPR_MESH_UV_ARRAY",
      "value": "0x507"
    },
    "RPR_MESH_VERTEX_INDEX_ARRAY": {
      "name": "RPR_MESH_VERTEX_INDEX_ARRAY",
      "value": "0x508"
    },
    "RPR_MESH_NORMAL_INDEX_ARRAY": {
      "name": "RPR_MESH_NORMAL_INDEX_ARRAY",
      "value": "0x509"
    },
    "RPR_MESH_UV_INDEX_ARRAY": {
      "name": "RPR_MESH_UV_INDEX_ARRAY",
      "value": "0x50A"
    },
    "RPR_MESH_VERTEX_STRIDE": {
      "name": "RPR_MESH_VERTEX_STRIDE",
      "value": "0x50C"
    },
    "RPR_MESH_NORMAL_STRIDE": {
      "name": "RPR_MESH_NORMAL_STRIDE",
      "value": "0x50D"
    },
    "RPR_MESH_UV_STRIDE": {
      "name": "RPR_MESH_UV_STRIDE",
      "value": "0x50E"
    },
    "RPR_MESH_VERTEX_INDEX_STRIDE": {
      "name": "RPR_MESH_VERTEX_INDEX_STRIDE",
      "value": "0x50F"
    },
    "RPR_MESH_NORMAL_INDEX_STRIDE": {
      "name": "RPR_MESH_NORMAL_INDEX_STRIDE",
      "value": "0x510"
    },
    "RPR_MESH_UV_INDEX_STRIDE": {
      "name": "RPR_MESH_UV_INDEX_STRIDE",
      "value": "0x511"
    },
    "RPR_MESH_NUM_FACE_VERTICES_ARRAY": {
      "name": "RPR_MESH_NUM_FACE_VERTICES_ARRAY",
      "value": "0x512"
    },
    "RPR_MESH_UV2_COUNT": {
      "name": "RPR_MESH_UV2_COUNT",
      "value": "0x513"
    },
    "RPR_MESH_UV2_ARRAY": {
      "name": "RPR_MESH_UV2_ARRAY",
      "value": "0x514"
    },
    "RPR_MESH_UV2_INDEX_ARRAY": {
      "name": "RPR_MESH_UV2_INDEX_ARRAY",
      "value": "0x515"
    },
    "RPR_MESH_UV2_STRIDE": {
      "name": "RPR_MESH_UV2_STRIDE",
      "value": "0x516"
    },
    "RPR_MESH_UV2_INDEX_STRIDE": {
      "name": "RPR_MESH_UV2_INDEX_STRIDE",
      "value": "0x517"
    },
    "RPR_MESH_UV_DIM": {
      "name": "RPR_MESH_UV_DIM",
      "value": "0x518"
    },
    "RPR_SCENE_SHAPE_COUNT": {
      "name": "RPR_SCENE_SHAPE_COUNT",
      "value": "0x701"
    },
    "RPR_SCENE_LIGHT_COUNT": {
      "name": "RPR_SCENE_LIGHT_COUNT",
      "value": "0x702"
    },
    "RPR_SCENE_SHAPE_LIST": {
      "name": "RPR_SCENE_SHAPE_LIST",
      "value": "0x704"
    },
    "RPR_SCENE_LIGHT_LIST": {
      "name": "RPR_SCENE_LIGHT_LIST",
      "value": "0x705"
    },
    "RPR_SCENE_CAMERA": {
      "name": "RPR_SCENE_CAMERA",
      "value": "0x706"
    },
    "RPR_SCENE_BACKGROUND_IMAGE": {
      "name": "RPR_SCENE_BACKGROUND_IMAGE",
      "value": "0x708"
    },
    "RPR_SCENE_ENVIRONMENT_OVERRIDE_REFLECTION": {
      "name": "RPR_SCENE_ENVIRONMENT_OVERRIDE_REFLECTION",
      "value": "0x709"
    },
    "RPR_SCENE_ENVIRONMENT_OVERRIDE_REFRACTION": {
      "name": "RPR_SCENE_ENVIRONMENT_OVERRIDE_REFRACTION",
      "value": "0x70A"
    },
    "RPR_SCENE_ENVIRONMENT_OVERRIDE_TRANSPARENCY": {
      "name": "RPR_SCENE_ENVIRONMENT_OVERRIDE_TRANSPARENCY",
      "value": "0x70B"
    },
    "RPR_SCENE_ENVIRONMENT_OVERRIDE_BACKGROUND": {
      "name": "RPR_SCENE_ENVIRONMENT_OVERRIDE_BACKGROUND",
      "value": "0x70C"
    },
    "RPR_SCENE_AABB": {
      "name": "RPR_SCENE_AABB",
      "value": "0x70D"
    },
    "RPR_SCENE_HETEROVOLUME_LIST": {
      "name": "RPR_SCENE_HETEROVOLUME_LIST",
      "value": "0x70E"
    },
    "RPR_SCENE_HETEROVOLUME_COUNT": {
      "name": "RPR_SCENE_HETEROVOLUME_COUNT",
      "value": "0x70F"
    },
    "RPR_LIGHT_TYPE": {
      "name": "RPR_LIGHT_TYPE",
      "value": "0x801"
    },
    "RPR_LIGHT_TRANSFORM": {
      "name": "RPR_LIGHT_TRANSFORM",
      "value": "0x803"
    },
    "RPR_POINT_LIGHT_RADIANT_POWER": {
      "name": "RPR_POINT_LIGHT_RADIANT_POWER",
      "value": "0x804"
    },
    "RPR_DIRECTIONAL_LIGHT_RADIANT_POWER": {
      "name": "RPR_DIRECTIONAL_LIGHT_RADIANT_POWER",
      "value": "0x808"
    },
    "RPR_DIRECTIONAL_LIGHT_SHADOW_SOFTNESS": {
      "name": "RPR_DIRECTIONAL_LIGHT_SHADOW_SOFTNESS",
      "value": "0x809"
    },
    "RPR_SPOT_LIGHT_RADIANT_POWER": {
      "name": "RPR_SPOT_LIGHT_RADIANT_POWER",
      "value": "0x80B"
    },
    "RPR_SPOT_LIGHT_CONE_SHAPE": {
      "name": "RPR_SPOT_LIGHT_CONE_SHAPE",
      "value": "0x80C"
    },
    "RPR_ENVIRONMENT_LIGHT_IMAGE": {
      "name": "RPR_ENVIRONMENT_LIGHT_IMAGE",
      "value": "0x80F"
    },
    "RPR_ENVIRONMENT_LIGHT_INTENSITY_SCALE": {
      "name": "RPR_ENVIRONMENT_LIGHT_INTENSITY_SCALE",
      "value": "0x810"
    },
    "RPR_ENVIRONMENT_LIGHT_PORTAL_LIST": {
      "name": "RPR_ENVIRONMENT_LIGHT_PORTAL_LIST",
      "value": "0x818"
    },
    "RPR_ENVIRONMENT_LIGHT_PORTAL_COUNT": {
      "name": "RPR_ENVIRONMENT_LIGHT_PORTAL_COUNT",
      "value": "0x819"
    },
    "RPR_SKY_LIGHT_TURBIDITY": {
      "name": "RPR_SKY_LIGHT_TURBIDITY",
      "value": "0x812"
    },
    "RPR_SKY_LIGHT_ALBEDO": {
      "name": "RPR_SKY_LIGHT_ALBEDO",
      "value": "0x813"
    },
    "RPR_SKY_LIGHT_SCALE": {
      "name": "RPR_SKY_LIGHT_SCALE",
      "value": "0x814"
    },
    "RPR_SKY_LIGHT_PORTAL_LIST": {
      "name": "RPR_SKY_LIGHT_PORTAL_LIST",
      "value": "0x820"
    },
    "RPR_SKY_LIGHT_PORTAL_COUNT": {
      "name": "RPR_SKY_LIGHT_PORTAL_COUNT",
      "value": "0x821"
    },
    "RPR_IES_LIGHT_RADIANT_POWER": {
      "name": "RPR_IES_LIGHT_RADIANT_POWER",
      "value": "0x816"
    },
    "RPR_IES_LIGHT_IMAGE_DESC": {
      "name": "RPR_IES_LIGHT_IMAGE_DESC",
      "value": "0x817"
    },
    "RPR_PARAMETER_NAME": {
      "name": "RPR_PARAMETER_NAME",
      "value": "0x1201"
    },
    "RPR_PARAMETER_NAME_STRING": {
      "name": "RPR_PARAMETER_NAME_STRING",
      "value": "0x1202"
    },
    "RPR_PARAMETER_TYPE": {
      "name": "RPR_PARAMETER_TYPE",
      "value": "0x1203"
    },
    "RPR_PARAMETER_DESCRIPTION": {
      "name": "RPR_PARAMETER_DESCRIPTION",
      "value": "0x1204"
    },
    "RPR_PARAMETER_VALUE": {
      "name": "RPR_PARAMETER_VALUE",
      "value": "0x1205"
    },
    "RPR_FRAMEBUFFER_FORMAT": {
      "name": "RPR_FRAMEBUFFER_FORMAT",
      "value": "0x1301"
    },
    "RPR_FRAMEBUFFER_DESC": {
      "name": "RPR_FRAMEBUFFER_DESC",
      "value": "0x1302"
    },
    "RPR_FRAMEBUFFER_DATA": {
      "name": "RPR_FRAMEBUFFER_DATA",
      "value": "0x1303"
    },
    "RPR_FRAMEBUFFER_GL_TARGET": {
      "name": "RPR_FRAMEBUFFER_GL_TARGET",
      "value": "0x1304"
    },
    "RPR_FRAMEBUFFER_GL_MIPLEVEL": {
      "name": "RPR_FRAMEBUFFER_GL_MIPLEVEL",
      "value": "0x1305"
    },
    "RPR_FRAMEBUFFER_GL_TEXTURE": {
      "name": "RPR_FRAMEBUFFER_GL_TEXTURE",
      "value": "0x1306"
    },
    "RPR_MESH_POLYGON_VERTEX_COUNT": {
      "name": "RPR_MESH_POLYGON_VERTEX_COUNT",
      "value": "0x1401"
    },
    "RPR_MESH_POLYGON_VERTEX_POSITION": {
      "name": "RPR_MESH_POLYGON_VERTEX_POSITION",
      "value": "0x1501"
    },
    "RPR_MESH_POLYGON_VERTEX_NORMAL": {
      "name": "RPR_MESH_POLYGON_VERTEX_NORMAL",
      "value": "0x1502"
    },
    "RPR_MESH_POLYGON_VERTEX_TEXCOORD": {
      "name": "RPR_MESH_POLYGON_VERTEX_TEXCOORD",
      "value": "0x1503"
    },
    "RPR_INSTANCE_PARENT_SHAPE": {
      "name": "RPR_INSTANCE_PARENT_SHAPE",
      "value": "0x1601"
    },
    "RPR_COMPONENT_TYPE_UINT8": {
      "name": "RPR_COMPONENT_TYPE_UINT8",
      "value": "0x1"
    },
    "RPR_COMPONENT_TYPE_FLOAT16": {
      "name": "RPR_COMPONENT_TYPE_FLOAT16",
      "value": "0x2"
    },
    "RPR_COMPONENT_TYPE_FLOAT32": {
      "name": "RPR_COMPONENT_TYPE_FLOAT32",
      "value": "0x3"
    },
    "RPR_BUFFER_ELEMENT_TYPE_INT32": {
      "name": "RPR_BUFFER_ELEMENT_TYPE_INT32",
      "value": "0x1"
    },
    "RPR_BUFFER_ELEMENT_TYPE_FLOAT32": {
      "name": "RPR_BUFFER_ELEMENT_TYPE_FLOAT32",
      "value": "0x2"
    },
    "RPR_RENDER_MODE_GLOBAL_ILLUMINATION": {
      "name": "RPR_RENDER_MODE_GLOBAL_ILLUMINATION",
      "value": "0x1"
    },
    "RPR_RENDER_MODE_DIRECT_ILLUMINATION": {
      "name": "RPR_RENDER_MODE_DIRECT_ILLUMINATION",
      "value": "0x2"
    },
    "RPR_RENDER_MODE_DIRECT_ILLUMINATION_NO_SHADOW": {
      "name": "RPR_RENDER_MODE_DIRECT_ILLUMINATION_NO_SHADOW",
      "value": "0x3"
    },
    "RPR_RENDER_MODE_WIREFRAME": {
      "name": "RPR_RENDER_MODE_WIREFRAME",
      "value": "0x4"
    },
    "RPR_RENDER_MODE_MATERIAL_INDEX": {
      "name": "RPR_RENDER_MODE_MATERIAL_INDEX",
      "value": "0x5"
    },
    "RPR_RENDER_MODE_POSITION": {
      "name": "RPR_RENDER_MODE_POSITION",
      "value": "0x6"
    },
    "RPR_RENDER_MODE_NORMAL": {
      "name": "RPR_RENDER_MODE_NORMAL",
      "value": "0x7"
    },
    "RPR_RENDER_MODE_TEXCOORD": {
      "name": "RPR_RENDER_MODE_TEXCOORD",
      "value": "0x8"
    },
    "RPR_RENDER_MODE_AMBIENT_OCCLUSION": {
      "name": "RPR_RENDER_MODE_AMBIENT_OCCLUSION",
      "value": "0x9"
    },
    "RPR_RENDER_MODE_DIFFUSE": {
      "name": "RPR_RENDER_MODE_DIFFUSE",
      "value": "0x0a"
    },
    "RPR_CAMERA_MODE_PERSPECTIVE": {
      "name": "RPR_CAMERA_MODE_PERSPECTIVE",
      "value": "0x1"
    },
    "RPR_CAMERA_MODE_ORTHOGRAPHIC": {
      "name": "RPR_CAMERA_MODE_ORTHOGRAPHIC",
      "value": "0x2"
    },
    "RPR_CAMERA_MODE_LATITUDE_LONGITUDE_360": {
      "name": "RPR_CAMERA_MODE_LATITUDE_LONGITUDE_360",
      "value": "0x3"
    },
    "RPR_CAMERA_MODE_LATITUDE_LONGITUDE_STEREO": {
      "name": "RPR_CAMERA_MODE_LATITUDE_LONGITUDE_STEREO",
      "value": "0x4"
    },
    "RPR_CAMERA_MODE_CUBEMAP": {
      "name": "RPR_CAMERA_MODE_CUBEMAP",
      "value": "0x5"
    },
    "RPR_CAMERA_MODE_CUBEMAP_STEREO": {
      "name": "RPR_CAMERA_MODE_CUBEMAP_STEREO",
      "value": "0x6"
    },
    "RPR_CAMERA_MODE_FISHEYE": {
      "name": "RPR_CAMERA_MODE_FISHEYE",
      "value": "0x7"
    },
    "RPR_TONEMAPPING_OPERATOR_NONE": {
      "name": "RPR_TONEMAPPING_OPERATOR_NONE",
      "value": "0x0"
    },
    "RPR_TONEMAPPING_OPERATOR_LINEAR": {
      "name": "RPR_TONEMAPPING_OPERATOR_LINEAR",
      "value": "0x1"
    },
    "RPR_TONEMAPPING_OPERATOR_PHOTOLINEAR": {
      "name": "RPR_TONEMAPPING_OPERATOR_PHOTOLINEAR",
      "value": "0x2"
    },
    "RPR_TONEMAPPING_OPERATOR_AUTOLINEAR": {
      "name": "RPR_TONEMAPPING_OPERATOR_AUTOLINEAR",
      "value": "0x3"
    },
    "RPR_TONEMAPPING_OPERATOR_MAXWHITE": {
      "name": "RPR_TONEMAPPING_OPERATOR_MAXWHITE",
      "value": "0x4"
    },
    "RPR_TONEMAPPING_OPERATOR_REINHARD02": {
      "name": "RPR_TONEMAPPING_OPERATOR_REINHARD02",
      "value": "0x5"
    },
    "RPR_TONEMAPPING_OPERATOR_EXPONENTIAL": {
      "name": "RPR_TONEMAPPING_OPERATOR_EXPONENTIAL",
      "value": "0x6"
    },
    "RPR_VOLUME_TYPE_NONE": {
      "name": "RPR_VOLUME_TYPE_NONE",
      "value": "0xFFFF"
    },
    "RPR_VOLUME_TYPE_HOMOGENEOUS": {
      "name": "RPR_VOLUME_TYPE_HOMOGENEOUS",
      "value": "0x0"
    },
    "RPR_VOLUME_TYPE_HETEROGENEOUS": {
      "name": "RPR_VOLUME_TYPE_HETEROGENEOUS",
      "value": "0x1"
    },
    "RPR_MATERIAL_NODE_TYPE": {
      "name": "RPR_MATERIAL_NODE_TYPE",
      "value": "0x1101"
    },
    "RPR_MATERIAL_NODE_SYSTEM": {
      "name": "RPR_MATERIAL_NODE_SYSTEM",
      "value": "0x1102"
    },
    "RPR_MATERIAL_NODE_INPUT_COUNT": {
      "name": "RPR_MATERIAL_NODE_INPUT_COUNT",
      "value": "0x1103"
    },
    "RPR_MATERIAL_NODE_INPUT_NAME": {
      "name": "RPR_MATERIAL_NODE_INPUT_NAME",
      "value": "0x1103"
    },
    "RPR_MATERIAL_NODE_INPUT_NAME_STRING": {
      "name": "RPR_MATERIAL_NODE_INPUT_NAME_STRING",
      "value": "0x1104"
    },
    "RPR_MATERIAL_NODE_INPUT_DESCRIPTION": {
      "name": "RPR_MATERIAL_NODE_INPUT_DESCRIPTION",
      "value": "0x1105"
    },
    "RPR_MATERIAL_NODE_INPUT_VALUE": {
      "name": "RPR_MATERIAL_NODE_INPUT_VALUE",
      "value": "0x1106"
    },
    "RPR_MATERIAL_NODE_INPUT_TYPE": {
      "name": "RPR_MATERIAL_NODE_INPUT_TYPE",
      "value": "0x1107"
    },
    "RPR_MATERIAL_NODE_DIFFUSE": {
      "name": "RPR_MATERIAL_NODE_DIFFUSE",
      "value": "0x1"
    },
    "RPR_MATERIAL_NODE_MICROFACET": {
      "name": "RPR_MATERIAL_NODE_MICROFACET",
      "value": "0x2"
    },
    "RPR_MATERIAL_NODE_REFLECTION": {
      "name": "RPR_MATERIAL_NODE_REFLECTION",
      "value": "0x3"
    },
    "RPR_MATERIAL_NODE_REFRACTION": {
      "name": "RPR_MATERIAL_NODE_REFRACTION",
      "value": "0x4"
    },
    "RPR_MATERIAL_NODE_MICROFACET_REFRACTION": {
      "name": "RPR_MATERIAL_NODE_MICROFACET_REFRACTION",
      "value": "0x5"
    },
    "RPR_MATERIAL_NODE_TRANSPARENT": {
      "name": "RPR_MATERIAL_NODE_TRANSPARENT",
      "value": "0x6"
    },
    "RPR_MATERIAL_NODE_EMISSIVE": {
      "name": "RPR_MATERIAL_NODE_EMISSIVE",
      "value": "0x7"
    },
    "RPR_MATERIAL_NODE_WARD": {
      "name": "RPR_MATERIAL_NODE_WARD",
      "value": "0x8"
    },
    "RPR_MATERIAL_NODE_ADD": {
      "name": "RPR_MATERIAL_NODE_ADD",
      "value": "0x9"
    },
    "RPR_MATERIAL_NODE_BLEND": {
      "name": "RPR_MATERIAL_NODE_BLEND",
      "value": "0xA"
    },
    "RPR_MATERIAL_NODE_ARITHMETIC": {
      "name": "RPR_MATERIAL_NODE_ARITHMETIC",
      "value": "0xB"
    },
    "RPR_MATERIAL_NODE_FRESNEL": {
      "name": "RPR_MATERIAL_NODE_FRESNEL",
      "value": "0xC"
    },
    "RPR_MATERIAL_NODE_NORMAL_MAP": {
      "name": "RPR_MATERIAL_NODE_NORMAL_MAP",
      "value": "0xD"
    },
    "RPR_MATERIAL_NODE_IMAGE_TEXTURE": {
      "name": "RPR_MATERIAL_NODE_IMAGE_TEXTURE",
      "value": "0xE"
    },
    "RPR_MATERIAL_NODE_NOISE2D_TEXTURE": {
      "name": "RPR_MATERIAL_NODE_NOISE2D_TEXTURE",
      "value": "0xF"
    },
    "RPR_MATERIAL_NODE_DOT_TEXTURE": {
      "name": "RPR_MATERIAL_NODE_DOT_TEXTURE",
      "value": "0x10"
    },
    "RPR_MATERIAL_NODE_GRADIENT_TEXTURE": {
      "name": "RPR_MATERIAL_NODE_GRADIENT_TEXTURE",
      "value": "0x11"
    },
    "RPR_MATERIAL_NODE_CHECKER_TEXTURE": {
      "name": "RPR_MATERIAL_NODE_CHECKER_TEXTURE",
      "value": "0x12"
    },
    "RPR_MATERIAL_NODE_CONSTANT_TEXTURE": {
      "name": "RPR_MATERIAL_NODE_CONSTANT_TEXTURE",
      "value": "0x13"
    },
    "RPR_MATERIAL_NODE_INPUT_LOOKUP": {
      "name": "RPR_MATERIAL_NODE_INPUT_LOOKUP",
      "value": "0x14"
    },
    "RPR_MATERIAL_NODE_STANDARD": {
      "name": "RPR_MATERIAL_NODE_STANDARD",
      "value": "0x15"
    },
    "RPR_MATERIAL_NODE_BLEND_VALUE": {
      "name": "RPR_MATERIAL_NODE_BLEND_VALUE",
      "value": "0x16"
    },
    "RPR_MATERIAL_NODE_PASSTHROUGH": {
      "name": "RPR_MATERIAL_NODE_PASSTHROUGH",
      "value": "0x17"
    },
    "RPR_MATERIAL_NODE_ORENNAYAR": {
      "name": "RPR_MATERIAL_NODE_ORENNAYAR",
      "value": "0x18"
    },
    "RPR_MATERIAL_NODE_FRESNEL_SCHLICK": {
      "name": "RPR_MATERIAL_NODE_FRESNEL_SCHLICK",
      "value": "0x19"
    },
    "RPR_MATERIAL_NODE_DIFFUSE_REFRACTION": {
      "name": "RPR_MATERIAL_NODE_DIFFUSE_REFRACTION",
      "value": "0x1B"
    },
    "RPR_MATERIAL_NODE_BUMP_MAP": {
      "name": "RPR_MATERIAL_NODE_BUMP_MAP",
      "value": "0x1C"
    },
    "RPR_MATERIAL_NODE_VOLUME": {
      "name": "RPR_MATERIAL_NODE_VOLUME",
      "value": "0x1D"
    },
    "RPR_MATERIAL_NODE_MICROFACET_ANISOTROPIC_REFLECTION": {
      "name": "RPR_MATERIAL_NODE_MICROFACET_ANISOTROPIC_REFLECTION",
      "value": "0x1E"
    },
    "RPR_MATERIAL_NODE_MICROFACET_ANISOTROPIC_REFRACTION": {
      "name": "RPR_MATERIAL_NODE_MICROFACET_ANISOTROPIC_REFRACTION",
      "value": "0x1F"
    },
    "RPR_MATERIAL_NODE_TWOSIDED": {
      "name": "RPR_MATERIAL_NODE_TWOSIDED",
      "value": "0x20"
    },
    "RPR_MATERIAL_NODE_UV_PROJECT": {
      "name": "RPR_MATERIAL_NODE_UV_PROJECT",
      "value": "0x21"
    },
    "RPR_MATERIAL_NODE_MICROFACET_BECKMANN": {
      "name": "RPR_MATERIAL_NODE_MICROFACET_BECKMANN",
      "value": "0x22"
    },
    "RPR_MATERIAL_NODE_PHONG": {
      "name": "RPR_MATERIAL_NODE_PHONG",
      "value": "0x23"
    },
    "RPR_MATERIAL_NODE_BUFFER_SAMPLER": {
      "name": "RPR_MATERIAL_NODE_BUFFER_SAMPLER",
      "value": "0x24"
    },
    "RPR_MATERIAL_INPUT_COLOR": {
      "name": "RPR_MATERIAL_INPUT_COLOR",
      "value": "0x0"
    },
    "RPR_MATERIAL_INPUT_COLOR0": {
      "name": "RPR_MATERIAL_INPUT_COLOR0",
      "value": "0x1"
    },
    "RPR_MATERIAL_INPUT_COLOR1": {
      "name": "RPR_MATERIAL_INPUT_COLOR1",
      "value": "0x2"
    },
    "RPR_MATERIAL_INPUT_NORMAL": {
      "name": "RPR_MATERIAL_INPUT_NORMAL",
      "value": "0x3"
    },
    "RPR_MATERIAL_INPUT_UV": {
      "name": "RPR_MATERIAL_INPUT_UV",
      "value": "0x4"
    },
    "RPR_MATERIAL_INPUT_DATA": {
      "name": "RPR_MATERIAL_INPUT_DATA",
      "value": "0x5"
    },
    "RPR_MATERIAL_INPUT_ROUGHNESS": {
      "name": "RPR_MATERIAL_INPUT_ROUGHNESS",
      "value": "0x6"
    },
    "RPR_MATERIAL_INPUT_IOR": {
      "name": "RPR_MATERIAL_INPUT_IOR",
      "value": "0x7"
    },
    "RPR_MATERIAL_INPUT_ROUGHNESS_X": {
      "name": "RPR_MATERIAL_INPUT_ROUGHNESS_X",
      "value": "0x8"
    },
    "RPR_MATERIAL_INPUT_ROUGHNESS_Y": {
      "name": "RPR_MATERIAL_INPUT_ROUGHNESS_Y",
      "value": "0x9"
    },
    "RPR_MATERIAL_INPUT_ROTATION": {
      "name": "RPR_MATERIAL_INPUT_ROTATION",
      "value": "0xA"
    },
    "RPR_MATERIAL_INPUT_WEIGHT": {
      "name": "RPR_MATERIAL_INPUT_WEIGHT",
      "value": "0xB"
    },
    "RPR_MATERIAL_INPUT_OP": {
      "name": "RPR_MATERIAL_INPUT_OP",
      "value": "0xC"
    },
    "RPR_MATERIAL_INPUT_INVEC": {
      "name": "RPR_MATERIAL_INPUT_INVEC",
      "value": "0xD"
    },
    "RPR_MATERIAL_INPUT_UV_SCALE": {
      "name": "RPR_MATERIAL_INPUT_UV_SCALE",
      "value": "0xE"
    },
    "RPR_MATERIAL_INPUT_VALUE": {
      "name": "RPR_MATERIAL_INPUT_VALUE",
      "value": "0xF"
    },
    "RPR_MATERIAL_INPUT_REFLECTANCE": {
      "name": "RPR_MATERIAL_INPUT_REFLECTANCE",
      "value": "0x10"
    },
    "RPR_MATERIAL_INPUT_SCALE": {
      "name": "RPR_MATERIAL_INPUT_SCALE",
      "value": "0x11"
    },
    "RPR_MATERIAL_INPUT_SCATTERING": {
      "name": "RPR_MATERIAL_INPUT_SCATTERING",
      "value": "0x12"
    },
    "RPR_MATERIAL_INPUT_ABSORBTION": {
      "name": "RPR_MATERIAL_INPUT_ABSORBTION",
      "value": "0x13"
    },
    "RPR_MATERIAL_INPUT_EMISSION": {
      "name": "RPR_MATERIAL_INPUT_EMISSION",
      "value": "0x14"
    },
    "RPR_MATERIAL_INPUT_G": {
      "name": "RPR_MATERIAL_INPUT_G",
      "value": "0x15"
    },
    "RPR_MATERIAL_INPUT_MULTISCATTER": {
      "name": "RPR_MATERIAL_INPUT_MULTISCATTER",
      "value": "0x16"
    },
    "RPR_MATERIAL_INPUT_COLOR2": {
      "name": "RPR_MATERIAL_INPUT_COLOR2",
      "value": "0x17"
    },
    "RPR_MATERIAL_INPUT_COLOR3": {
      "name": "RPR_MATERIAL_INPUT_COLOR3",
      "value": "0x18"
    },
    "RPR_MATERIAL_INPUT_ANISOTROPIC": {
      "name": "RPR_MATERIAL_INPUT_ANISOTROPIC",
      "value": "0x19"
    },
    "RPR_MATERIAL_INPUT_FRONTFACE": {
      "name": "RPR_MATERIAL_INPUT_FRONTFACE",
      "value": "0x1a"
    },
    "RPR_MATERIAL_INPUT_BACKFACE": {
      "name": "RPR_MATERIAL_INPUT_BACKFACE",
      "value": "0x1b"
    },
    "RPR_MATERIAL_INPUT_ORIGIN": {
      "name": "RPR_MATERIAL_INPUT_ORIGIN",
      "value": "0x1c"
    },
    "RPR_MATERIAL_INPUT_ZAXIS": {
      "name": "RPR_MATERIAL_INPUT_ZAXIS",
      "value": "0x1d"
    },
    "RPR_MATERIAL_INPUT_XAXIS": {
      "name": "RPR_MATERIAL_INPUT_XAXIS",
      "value": "0x1e"
    },
    "RPR_MATERIAL_INPUT_THRESHOLD": {
      "name": "RPR_MATERIAL_INPUT_THRESHOLD",
      "value": "0x1f"
    },
    "RPR_MATERIAL_INPUT_MAX": {
      "name": "RPR_MATERIAL_INPUT_MAX",
      "value": "0x20"
    },
    "RPR_MATERIAL_STANDARD_INPUT_DIFFUSE_COLOR": {
      "name": "RPR_MATERIAL_STANDARD_INPUT_DIFFUSE_COLOR",
      "value": "0x112"
    },
    "RPR_MATERIAL_STANDARD_INPUT_DIFFUSE_NORMAL": {
      "name": "RPR_MATERIAL_STANDARD_INPUT_DIFFUSE_NORMAL",
      "value": "0x113"
    },
    "RPR_MATERIAL_STANDARD_INPUT_GLOSSY_COLOR": {
      "name": "RPR_MATERIAL_STANDARD_INPUT_GLOSSY_COLOR",
      "value": "0x114"
    },
    "RPR_MATERIAL_STANDARD_INPUT_GLOSSY_NORMAL": {
      "name": "RPR_MATERIAL_STANDARD_INPUT_GLOSSY_NORMAL",
      "value": "0x115"
    },
    "RPR_MATERIAL_STANDARD_INPUT_GLOSSY_ROUGHNESS_X": {
      "name": "RPR_MATERIAL_STANDARD_INPUT_GLOSSY_ROUGHNESS_X",
      "value": "0x116"
    },
    "RPR_MATERIAL_STANDARD_INPUT_CLEARCOAT_COLOR": {
      "name": "RPR_MATERIAL_STANDARD_INPUT_CLEARCOAT_COLOR",
      "value": "0x117"
    },
    "RPR_MATERIAL_STANDARD_INPUT_CLEARCOAT_NORMAL": {
      "name": "RPR_MATERIAL_STANDARD_INPUT_CLEARCOAT_NORMAL",
      "value": "0x118"
    },
    "RPR_MATERIAL_STANDARD_INPUT_REFRACTION_COLOR": {
      "name": "RPR_MATERIAL_STANDARD_INPUT_REFRACTION_COLOR",
      "value": "0x119"
    },
    "RPR_MATERIAL_STANDARD_INPUT_REFRACTION_NORMAL": {
      "name": "RPR_MATERIAL_STANDARD_INPUT_REFRACTION_NORMAL",
      "value": "0x11A"
    },
    "RPR_MATERIAL_STANDARD_INPUT_REFRACTION_IOR": {
      "name": "RPR_MATERIAL_STANDARD_INPUT_REFRACTION_IOR",
      "value": "0x11C"
    },
    "RPR_MATERIAL_STANDARD_INPUT_DIFFUSE_TO_REFRACTION_WEIGHT": {
      "name": "RPR_MATERIAL_STANDARD_INPUT_DIFFUSE_TO_REFRACTION_WEIGHT",
      "value": "0x11D"
    },
    "RPR_MATERIAL_STANDARD_INPUT_GLOSSY_TO_DIFFUSE_WEIGHT": {
      "name": "RPR_MATERIAL_STANDARD_INPUT_GLOSSY_TO_DIFFUSE_WEIGHT",
      "value": "0x11E"
    },
    "RPR_MATERIAL_STANDARD_INPUT_CLEARCOAT_TO_GLOSSY_WEIGHT": {
      "name": "RPR_MATERIAL_STANDARD_INPUT_CLEARCOAT_TO_GLOSSY_WEIGHT",
      "value": "0x11F"
    },
    "RPR_MATERIAL_STANDARD_INPUT_TRANSPARENCY": {
      "name": "RPR_MATERIAL_STANDARD_INPUT_TRANSPARENCY",
      "value": "0x120"
    },
    "RPR_MATERIAL_STANDARD_INPUT_TRANSPARENCY_COLOR": {
      "name": "RPR_MATERIAL_STANDARD_INPUT_TRANSPARENCY_COLOR",
      "value": "0x121"
    },
    "RPR_MATERIAL_STANDARD_INPUT_REFRACTION_ROUGHNESS": {
      "name": "RPR_MATERIAL_STANDARD_INPUT_REFRACTION_ROUGHNESS",
      "value": "0x122"
    },
    "RPR_MATERIAL_STANDARD_INPUT_GLOSSY_ROUGHNESS_Y": {
      "name": "RPR_MATERIAL_STANDARD_INPUT_GLOSSY_ROUGHNESS_Y",
      "value": "0x123"
    },
    "RPR_MATERIAL_INPUT_RASTER_METALLIC": {
      "name": "RPR_MATERIAL_INPUT_RASTER_METALLIC",
      "value": "0x901"
    },
    "RPR_MATERIAL_INPUT_RASTER_ROUGHNESS": {
      "name": "RPR_MATERIAL_INPUT_RASTER_ROUGHNESS",
      "value": "0x902"
    },
    "RPR_MATERIAL_INPUT_RASTER_SUBSURFACE": {
      "name": "RPR_MATERIAL_INPUT_RASTER_SUBSURFACE",
      "value": "0x903"
    },
    "RPR_MATERIAL_INPUT_RASTER_ANISOTROPIC": {
      "name": "RPR_MATERIAL_INPUT_RASTER_ANISOTROPIC",
      "value": "0x904"
    },
    "RPR_MATERIAL_INPUT_RASTER_SPECULAR": {
      "name": "RPR_MATERIAL_INPUT_RASTER_SPECULAR",
      "value": "0x905"
    },
    "RPR_MATERIAL_INPUT_RASTER_SPECULARTINT": {
      "name": "RPR_MATERIAL_INPUT_RASTER_SPECULARTINT",
      "value": "0x906"
    },
    "RPR_MATERIAL_INPUT_RASTER_SHEEN": {
      "name": "RPR_MATERIAL_INPUT_RASTER_SHEEN",
      "value": "0x907"
    },
    "RPR_MATERIAL_INPUT_RASTER_SHEENTINT": {
      "name": "RPR_MATERIAL_INPUT_RASTER_SHEENTINT",
      "value": "0x908"
    },
    "RPR_MATERIAL_INPUT_RASTER_CLEARCOAT": {
      "name": "RPR_MATERIAL_INPUT_RASTER_CLEARCOAT",
      "value": "0x90A"
    },
    "RPR_MATERIAL_INPUT_RASTER_CLEARCOATGLOSS": {
      "name": "RPR_MATERIAL_INPUT_RASTER_CLEARCOATGLOSS",
      "value": "0x90B"
    },
    "RPR_MATERIAL_INPUT_RASTER_COLOR": {
      "name": "RPR_MATERIAL_INPUT_RASTER_COLOR",
      "value": "0x90C"
    },
    "RPR_MATERIAL_INPUT_RASTER_NORMAL": {
      "name": "RPR_MATERIAL_INPUT_RASTER_NORMAL",
      "value": "0x90D"
    },
    "RPR_MATERIAL_NODE_OP_ADD": {
      "name": "RPR_MATERIAL_NODE_OP_ADD",
      "value": "0x00"
    },
    "RPR_MATERIAL_NODE_OP_SUB": {
      "name": "RPR_MATERIAL_NODE_OP_SUB",
      "value": "0x01"
    },
    "RPR_MATERIAL_NODE_OP_MUL": {
      "name": "RPR_MATERIAL_NODE_OP_MUL",
      "value": "0x02"
    },
    "RPR_MATERIAL_NODE_OP_DIV": {
      "name": "RPR_MATERIAL_NODE_OP_DIV",
      "value": "0x03"
    },
    "RPR_MATERIAL_NODE_OP_SIN": {
      "name": "RPR_MATERIAL_NODE_OP_SIN",
      "value": "0x04"
    },
    "RPR_MATERIAL_NODE_OP_COS": {
      "name": "RPR_MATERIAL_NODE_OP_COS",
      "value": "0x05"
    },
    "RPR_MATERIAL_NODE_OP_TAN": {
      "name": "RPR_MATERIAL_NODE_OP_TAN",
      "value": "0x06"
    },
    "RPR_MATERIAL_NODE_OP_SELECT_X": {
      "name": "RPR_MATERIAL_NODE_OP_SELECT_X",
      "value": "0x07"
    },
    "RPR_MATERIAL_NODE_OP_SELECT_Y": {
      "name": "RPR_MATERIAL_NODE_OP_SELECT_Y",
      "value": "0x08"
    },
    "RPR_MATERIAL_NODE_OP_SELECT_Z": {
      "name": "RPR_MATERIAL_NODE_OP_SELECT_Z",
      "value": "0x09"
    },
    "RPR_MATERIAL_NODE_OP_COMBINE": {
      "name": "RPR_MATERIAL_NODE_OP_COMBINE",
      "value": "0x0A"
    },
    "RPR_MATERIAL_NODE_OP_DOT3": {
      "name": "RPR_MATERIAL_NODE_OP_DOT3",
      "value": "0x0B"
    },
    "RPR_MATERIAL_NODE_OP_CROSS3": {
      "name": "RPR_MATERIAL_NODE_OP_CROSS3",
      "value": "0x0C"
    },
    "RPR_MATERIAL_NODE_OP_LENGTH3": {
      "name": "RPR_MATERIAL_NODE_OP_LENGTH3",
      "value": "0x0D"
    },
    "RPR_MATERIAL_NODE_OP_NORMALIZE3": {
      "name": "RPR_MATERIAL_NODE_OP_NORMALIZE3",
      "value": "0x0E"
    },
    "RPR_MATERIAL_NODE_OP_POW": {
      "name": "RPR_MATERIAL_NODE_OP_POW",
      "value": "0x0F"
    },
    "RPR_MATERIAL_NODE_OP_ACOS": {
      "name": "RPR_MATERIAL_NODE_OP_ACOS",
      "value": "0x10"
    },
    "RPR_MATERIAL_NODE_OP_ASIN": {
      "name": "RPR_MATERIAL_NODE_OP_ASIN",
      "value": "0x11"
    },
    "RPR_MATERIAL_NODE_OP_ATAN": {
      "name": "RPR_MATERIAL_NODE_OP_ATAN",
      "value": "0x12"
    },
    "RPR_MATERIAL_NODE_OP_AVERAGE_XYZ": {
      "name": "RPR_MATERIAL_NODE_OP_AVERAGE_XYZ",
      "value": "0x13"
    },
    "RPR_MATERIAL_NODE_OP_AVERAGE": {
      "name": "RPR_MATERIAL_NODE_OP_AVERAGE",
      "value": "0x14"
    },
    "RPR_MATERIAL_NODE_OP_MIN": {
      "name": "RPR_MATERIAL_NODE_OP_MIN",
      "value": "0x15"
    },
    "RPR_MATERIAL_NODE_OP_MAX": {
      "name": "RPR_MATERIAL_NODE_OP_MAX",
      "value": "0x16"
    },
    "RPR_MATERIAL_NODE_OP_FLOOR": {
      "name": "RPR_MATERIAL_NODE_OP_FLOOR",
      "value": "0x17"
    },
    "RPR_MATERIAL_NODE_OP_MOD": {
      "name": "RPR_MATERIAL_NODE_OP_MOD",
      "value": "0x18"
    },
    "RPR_MATERIAL_NODE_OP_ABS": {
      "name": "RPR_MATERIAL_NODE_OP_ABS",
      "value": "0x19"
    },
    "RPR_MATERIAL_NODE_OP_SHUFFLE_YZWX": {
      "name": "RPR_MATERIAL_NODE_OP_SHUFFLE_YZWX",
      "value": "0x1a"
    },
    "RPR_MATERIAL_NODE_OP_SHUFFLE_ZWXY": {
      "name": "RPR_MATERIAL_NODE_OP_SHUFFLE_ZWXY",
      "value": "0x1b"
    },
    "RPR_MATERIAL_NODE_OP_SHUFFLE_WXYZ": {
      "name": "RPR_MATERIAL_NODE_OP_SHUFFLE_WXYZ",
      "value": "0x1c"
    },
    "RPR_MATERIAL_NODE_OP_MAT_MUL": {
      "name": "RPR_MATERIAL_NODE_OP_MAT_MUL",
      "value": "0x1d"
    },
    "RPR_MATERIAL_NODE_OP_SELECT_W": {
      "name": "RPR_MATERIAL_NODE_OP_SELECT_W",
      "value": "0x1e"
    },
    "RPR_MATERIAL_NODE_OP_DOT4": {
      "name": "RPR_MATERIAL_NODE_OP_DOT4",
      "value": "0x1f"
    },
    "RPR_MATERIAL_NODE_LOOKUP_UV": {
      "name": "RPR_MATERIAL_NODE_LOOKUP_UV",
      "value": "0x0"
    },
    "RPR_MATERIAL_NODE_LOOKUP_N": {
      "name": "RPR_MATERIAL_NODE_LOOKUP_N",
      "value": "0x1"
    },
    "RPR_MATERIAL_NODE_LOOKUP_P": {
      "name": "RPR_MATERIAL_NODE_LOOKUP_P",
      "value": "0x2"
    },
    "RPR_MATERIAL_NODE_LOOKUP_INVEC": {
      "name": "RPR_MATERIAL_NODE_LOOKUP_INVEC",
      "value": "0x3"
    },
    "RPR_MATERIAL_NODE_LOOKUP_OUTVEC": {
      "name": "RPR_MATERIAL_NODE_LOOKUP_OUTVEC",
      "value": "0x4"
    },
    "RPR_MATERIAL_NODE_LOOKUP_UV1": {
      "name": "RPR_MATERIAL_NODE_LOOKUP_UV1",
      "value": "0x5"
    },
    "RPR_POST_EFFECT_TYPE": {
      "name": "RPR_POST_EFFECT_TYPE",
      "value": "0x0"
    },
    "RPR_POST_EFFECT_WHITE_BALANCE_COLOR_SPACE": {
      "name": "RPR_POST_EFFECT_WHITE_BALANCE_COLOR_SPACE",
      "value": "0x4"
    },
    "RPR_POST_EFFECT_WHITE_BALANCE_COLOR_TEMPERATURE": {
      "name": "RPR_POST_EFFECT_WHITE_BALANCE_COLOR_TEMPERATURE",
      "value": "0x5"
    },
    "RPR_POST_EFFECT_SIMPLE_TONEMAP_EXPOSURE": {
      "name": "RPR_POST_EFFECT_SIMPLE_TONEMAP_EXPOSURE",
      "value": "0x6"
    },
    "RPR_POST_EFFECT_SIMPLE_TONEMAP_CONTRAST": {
      "name": "RPR_POST_EFFECT_SIMPLE_TONEMAP_CONTRAST",
      "value": "0x7"
    },
    "RPR_POST_EFFECT_SIMPLE_TONEMAP_ENABLE_TONEMAP": {
      "name": "RPR_POST_EFFECT_SIMPLE_TONEMAP_ENABLE_TONEMAP",
      "value": "0x8"
    },
    "RPR_AOV_COLOR": {
      "name": "RPR_AOV_COLOR",
      "value": "0x0"
    },
    "RPR_AOV_OPACITY": {
      "name": "RPR_AOV_OPACITY",
      "value": "0x1"
    },
    "RPR_AOV_WORLD_COORDINATE": {
      "name": "RPR_AOV_WORLD_COORDINATE",
      "value": "0x2"
    },
    "RPR_AOV_UV": {
      "name": "RPR_AOV_UV",
      "value": "0x3"
    },
    "RPR_AOV_MATERIAL_IDX": {
      "name": "RPR_AOV_MATERIAL_IDX",
      "value": "0x4"
    },
    "RPR_AOV_GEOMETRIC_NORMAL": {
      "name": "RPR_AOV_GEOMETRIC_NORMAL",
      "value": "0x5"
    },
    "RPR_AOV_SHADING_NORMAL": {
      "name": "RPR_AOV_SHADING_NORMAL",
      "value": "0x6"
    },
    "RPR_AOV_DEPTH": {
      "name": "RPR_AOV_DEPTH",
      "value": "0x7"
    },
    "RPR_AOV_OBJECT_ID": {
      "name": "RPR_AOV_OBJECT_ID",
      "value": "0x8"
    },
    "RPR_AOV_OBJECT_GROUP_ID": {
      "name": "RPR_AOV_OBJECT_GROUP_ID",
      "value": "0x9"
    },
    "RPR_AOV_SHADOW_CATCHER": {
      "name": "RPR_AOV_SHADOW_CATCHER",
      "value": "0x0a"
    },
    "RPR_AOV_BACKGROUND": {
      "name": "RPR_AOV_BACKGROUND",
      "value": "0x0b"
    },
    "RPR_AOV_EMISSION": {
      "name": "RPR_AOV_EMISSION",
      "value": "0x0c"
    },
    "RPR_AOV_VELOCITY": {
      "name": "RPR_AOV_VELOCITY",
      "value": "0x0d"
    },
    "RPR_AOV_DIRECT_ILLUMINATION": {
      "name": "RPR_AOV_DIRECT_ILLUMINATION",
      "value": "0x0e"
    },
    "RPR_AOV_INDIRECT_ILLUMINATION": {
      "name": "RPR_AOV_INDIRECT_ILLUMINATION",
      "value": "0x0f"
    },
    "RPR_AOV_MAX": {
      "name": "RPR_AOV_MAX",
      "value": "0x10"
    },
    "RPR_POST_EFFECT_TONE_MAP": {
      "name": "RPR_POST_EFFECT_TONE_MAP",
      "value": "0x0"
    },
    "RPR_POST_EFFECT_WHITE_BALANCE": {
      "name": "RPR_POST_EFFECT_WHITE_BALANCE",
      "value": "0x1"
    },
    "RPR_POST_EFFECT_SIMPLE_TONEMAP": {
      "name": "RPR_POST_EFFECT_SIMPLE_TONEMAP",
      "value": "0x2"
    },
    "RPR_POST_EFFECT_NORMALIZATION": {
      "name": "RPR_POST_EFFECT_NORMALIZATION",
      "value": "0x3"
    },
    "RPR_POST_EFFECT_GAMMA_CORRECTION": {
      "name": "RPR_POST_EFFECT_GAMMA_CORRECTION",
      "value": "0x4"
    },
    "RPR_COLOR_SPACE_SRGB": {
      "name": "RPR_COLOR_SPACE_SRGB",
      "value": "0x1"
    },
    "RPR_COLOR_SPACE_ADOBE_RGB": {
      "name": "RPR_COLOR_SPACE_ADOBE_RGB",
      "value": "0x2"
    },
    "RPR_COLOR_SPACE_REC2020": {
      "name": "RPR_COLOR_SPACE_REC2020",
      "value": "0x3"
    },
    "RPR_COLOR_SPACE_DCIP3": {
      "name": "RPR_COLOR_SPACE_DCIP3",
      "value": "0x4"
    },
    "RPR_MATERIAL_NODE_INPUT_TYPE_FLOAT4": {
      "name": "RPR_MATERIAL_NODE_INPUT_TYPE_FLOAT4",
      "value": "0x1"
    },
    "RPR_MATERIAL_NODE_INPUT_TYPE_UINT": {
      "name": "RPR_MATERIAL_NODE_INPUT_TYPE_UINT",
      "value": "0x2"
    },
    "RPR_MATERIAL_NODE_INPUT_TYPE_NODE": {
      "name": "RPR_MATERIAL_NODE_INPUT_TYPE_NODE",
      "value": "0x3"
    },
    "RPR_MATERIAL_NODE_INPUT_TYPE_IMAGE": {
      "name": "RPR_MATERIAL_NODE_INPUT_TYPE_IMAGE",
      "value": "0x4"
    },
    "RPR_MATERIAL_NODE_INPUT_TYPE_BUFFER": {
      "name": "RPR_MATERIAL_NODE_INPUT_TYPE_BUFFER",
      "value": "0x5"
    },
    "RPR_SUBDIV_BOUNDARY_INTERFOP_TYPE_EDGE_AND_CORNER": {
      "name": "RPR_SUBDIV_BOUNDARY_INTERFOP_TYPE_EDGE_AND_CORNER",
      "value": "0x1"
    },
    "RPR_SUBDIV_BOUNDARY_INTERFOP_TYPE_EDGE_ONLY": {
      "name": "RPR_SUBDIV_BOUNDARY_INTERFOP_TYPE_EDGE_ONLY",
      "value": "0x2"
    },
    "RPR_IMAGE_WRAP_TYPE_REPEAT": {
      "name": "RPR_IMAGE_WRAP_TYPE_REPEAT",
      "value": "0x1"
    },
    "RPR_IMAGE_WRAP_TYPE_MIRRORED_REPEAT": {
      "name": "RPR_IMAGE_WRAP_TYPE_MIRRORED_REPEAT",
      "value": "0x2"
    },
    "RPR_IMAGE_WRAP_TYPE_CLAMP_TO_EDGE": {
      "name": "RPR_IMAGE_WRAP_TYPE_CLAMP_TO_EDGE",
      "value": "0x3"
    },
    "RPR_IMAGE_WRAP_TYPE_CLAMP_TO_BORDER": {
      "name": "RPR_IMAGE_WRAP_TYPE_CLAMP_TO_BORDER",
      "value": "0x4"
    },
    "RPR_IMAGE_WRAP_TYPE_CLAMP_ZERO": {
      "name": "RPR_IMAGE_WRAP_TYPE_CLAMP_ZERO",
      "value": "0x5"
    },
    "RPR_IMAGE_WRAP_TYPE_CLAMP_ONE": {
      "name": "RPR_IMAGE_WRAP_TYPE_CLAMP_ONE",
      "value": "0x6"
    },
    "RPR_IMAGE_FILTER_TYPE_NEAREST": {
      "name": "RPR_IMAGE_FILTER_TYPE_NEAREST",
      "value": "0x1"
    },
    "RPR_IMAGE_FILTER_TYPE_LINEAR": {
      "name": "RPR_IMAGE_FILTER_TYPE_LINEAR",
      "value": "0x2"
    },
    "RPR_MAX_AA_SAMPLES": {
      "name": "RPR_MAX_AA_SAMPLES",
      "value": "32"
    },
    "RPR_MAX_AA_GRID_SIZE": {
      "name": "RPR_MAX_AA_GRID_SIZE",
      "value": "16"
    },
    "RPR_COMPOSITE_TYPE": {
      "name": "RPR_COMPOSITE_TYPE",
      "value": "0x1"
    },
    "RPR_COMPOSITE_FRAMEBUFFER_INPUT_FB": {
      "name": "RPR_COMPOSITE_FRAMEBUFFER_INPUT_FB",
      "value": "0x2"
    },
    "RPR_COMPOSITE_NORMALIZE_INPUT_COLOR": {
      "name": "RPR_COMPOSITE_NORMALIZE_INPUT_COLOR",
      "value": "0x3"
    },
    "RPR_COMPOSITE_NORMALIZE_INPUT_SHADOWCATCHER": {
      "name": "RPR_COMPOSITE_NORMALIZE_INPUT_SHADOWCATCHER",
      "value": "0x4"
    },
    "RPR_COMPOSITE_CONSTANT_INPUT_VALUE": {
      "name": "RPR_COMPOSITE_CONSTANT_INPUT_VALUE",
      "value": "0x5"
    },
    "RPR_COMPOSITE_LERP_VALUE_INPUT_COLOR0": {
      "name": "RPR_COMPOSITE_LERP_VALUE_INPUT_COLOR0",
      "value": "0x6"
    },
    "RPR_COMPOSITE_LERP_VALUE_INPUT_COLOR1": {
      "name": "RPR_COMPOSITE_LERP_VALUE_INPUT_COLOR1",
      "value": "0x7"
    },
    "RPR_COMPOSITE_LERP_VALUE_INPUT_WEIGHT": {
      "name": "RPR_COMPOSITE_LERP_VALUE_INPUT_WEIGHT",
      "value": "0x8"
    },
    "RPR_COMPOSITE_ARITHMETIC_INPUT_COLOR0": {
      "name": "RPR_COMPOSITE_ARITHMETIC_INPUT_COLOR0",
      "value": "0x9"
    },
    "RPR_COMPOSITE_ARITHMETIC_INPUT_COLOR1": {
      "name": "RPR_COMPOSITE_ARITHMETIC_INPUT_COLOR1",
      "value": "0x0a"
    },
    "RPR_COMPOSITE_ARITHMETIC_INPUT_OP": {
      "name": "RPR_COMPOSITE_ARITHMETIC_INPUT_OP",
      "value": "0x0b"
    },
    "RPR_COMPOSITE_GAMMA_CORRECTION_INPUT_COLOR": {
      "name": "RPR_COMPOSITE_GAMMA_CORRECTION_INPUT_COLOR",
      "value": "0x0c"
    },
    "RPR_COMPOSITE_ARITHMETIC": {
      "name": "RPR_COMPOSITE_ARITHMETIC",
      "value": "0x1"
    },
    "RPR_COMPOSITE_LERP_VALUE": {
      "name": "RPR_COMPOSITE_LERP_VALUE",
      "value": "0x2"
    },
    "RPR_COMPOSITE_INVERSE": {
      "name": "RPR_COMPOSITE_INVERSE",
      "value": "0x3"
    },
    "RPR_COMPOSITE_NORMALIZE": {
      "name": "RPR_COMPOSITE_NORMALIZE",
      "value": "0x4"
    },
    "RPR_COMPOSITE_GAMMA_CORRECTION": {
      "name": "RPR_COMPOSITE_GAMMA_CORRECTION",
      "value": "0x5"
    },
    "RPR_COMPOSITE_EXPOSURE": {
      "name": "RPR_COMPOSITE_EXPOSURE",
      "value": "0x6"
    },
    "RPR_COMPOSITE_CONTRAST": {
      "name": "RPR_COMPOSITE_CONTRAST",
      "value": "0x7"
    },
    "RPR_COMPOSITE_SIDE_BY_SIDE": {
      "name": "RPR_COMPOSITE_SIDE_BY_SIDE",
      "value": "0x8"
    },
    "RPR_COMPOSITE_TONEMAP_ACES": {
      "name": "RPR_COMPOSITE_TONEMAP_ACES",
      "value": "0x9"
    },
    "RPR_COMPOSITE_TONEMAP_REINHARD": {
      "name": "RPR_COMPOSITE_TONEMAP_REINHARD",
      "value": "0xa"
    },
    "RPR_COMPOSITE_TONEMAP_LINEAR": {
      "name": "RPR_COMPOSITE_TONEMAP_LINEAR",
      "value": "0xb"
    },
    "RPR_COMPOSITE_FRAMEBUFFER": {
      "name": "RPR_COMPOSITE_FRAMEBUFFER",
      "value": "0xc"
    },
    "RPR_COMPOSITE_CONSTANT": {
      "name": "RPR_COMPOSITE_CONSTANT",
      "value": "0xd"
    },
    "RPR_HETEROVOLUME_SIZE_X": {
      "name": "RPR_HETEROVOLUME_SIZE_X",
      "value": "0x730"
    },
    "RPR_HETEROVOLUME_SIZE_Y": {
      "name": "RPR_HETEROVOLUME_SIZE_Y",
      "value": "0x731"
    },
    "RPR_HETEROVOLUME_SIZE_Z": {
      "name": "RPR_HETEROVOLUME_SIZE_Z",
      "value": "0x732"
    },
    "RPR_HETEROVOLUME_DATA": {
      "name": "RPR_HETEROVOLUME_DATA",
      "value": "0x733"
    },
    "RPR_HETEROVOLUME_DATA_SIZEBYTE": {
      "name": "RPR_HETEROVOLUME_DATA_SIZEBYTE",
      "value": "0x734"
    },
    "RPR_HETEROVOLUME_TRANSFORM": {
      "name": "RPR_HETEROVOLUME_TRANSFORM",
      "value": "0x735"
    },
    "RPR_HETEROVOLUME_INDICES": {
      "name": "RPR_HETEROVOLUME_INDICES",
      "value": "0x736"
    },
    "RPR_HETEROVOLUME_INDICES_NUMBER": {
      "name": "RPR_HETEROVOLUME_INDICES_NUMBER",
      "value": "0x737"
    },
    "RPR_HETEROVOLUME_INDICES_TOPOLOGY": {
      "name": "RPR_HETEROVOLUME_INDICES_TOPOLOGY",
      "value": "0x738"
    },
    "RPR_HETEROVOLUME_INDICES_TOPOLOGY_I_U64": {
      "name": "RPR_HETEROVOLUME_INDICES_TOPOLOGY_I_U64",
      "value": "0x750"
    },
    "RPR_HETEROVOLUME_INDICES_TOPOLOGY_XYZ_U32": {
      "name": "RPR_HETEROVOLUME_INDICES_TOPOLOGY_XYZ_U32",
      "value": "0x751"
    },
    "RPR_HETEROVOLUME_INDICES_TOPOLOGY_I_S64": {
      "name": "RPR_HETEROVOLUME_INDICES_TOPOLOGY_I_S64",
      "value": "0x752"
    },
    "RPR_HETEROVOLUME_INDICES_TOPOLOGY_XYZ_S32": {
      "name": "RPR_HETEROVOLUME_INDICES_TOPOLOGY_XYZ_S32",
      "value": "0x753"
    },
    "RPR_FALSE": {
      "name": "RPR_FALSE",
      "value": "0"
    },
    "RPR_TRUE": {
      "name": "RPR_TRUE",
      "value": "1"
    },
    "FR_API_VERSION": {
      "name": "FR_API_VERSION",
      "value": "0x010028600"
    },
    "FR_SUCCESS": {
      "name": "FR_SUCCESS",
      "value": "0"
    },
    "FR_ERROR_COMPUTE_API_NOT_SUPPORTED": {
      "name": "FR_ERROR_COMPUTE_API_NOT_SUPPORTED",
      "value": "-1"
    },
    "FR_ERROR_OUT_OF_SYSTEM_MEMORY": {
      "name": "FR_ERROR_OUT_OF_SYSTEM_MEMORY",
      "value": "-2"
    },
    "FR_ERROR_OUT_OF_VIDEO_MEMORY": {
      "name": "FR_ERROR_OUT_OF_VIDEO_MEMORY",
      "value": "-3"
    },
    "FR_ERROR_INVALID_LIGHTPATH_EXPR": {
      "name": "FR_ERROR_INVALID_LIGHTPATH_EXPR",
      "value": "-5"
    },
    "FR_ERROR_INVALID_IMAGE": {
      "name": "FR_ERROR_INVALID_IMAGE",
      "value": "-6"
    },
    "FR_ERROR_INVALID_AA_METHOD": {
      "name": "FR_ERROR_INVALID_AA_METHOD",
      "value": "-7"
    },
    "FR_ERROR_UNSUPPORTED_IMAGE_FORMAT": {
      "name": "FR_ERROR_UNSUPPORTED_IMAGE_FORMAT",
      "value": "-8"
    },
    "FR_ERROR_INVALID_GL_TEXTURE": {
      "name": "FR_ERROR_INVALID_GL_TEXTURE",
      "value": "-9"
    },
    "FR_ERROR_INVALID_CL_IMAGE": {
      "name": "FR_ERROR_INVALID_CL_IMAGE",
      "value": "-10"
    },
    "FR_ERROR_INVALID_OBJECT": {
      "name": "FR_ERROR_INVALID_OBJECT",
      "value": "-11"
    },
    "FR_ERROR_INVALID_PARAMETER": {
      "name": "FR_ERROR_INVALID_PARAMETER",
      "value": "-12"
    },
    "FR_ERROR_INVALID_TAG": {
      "name": "FR_ERROR_INVALID_TAG",
      "value": "-13"
    },
    "FR_ERROR_INVALID_LIGHT": {
      "name": "FR_ERROR_INVALID_LIGHT",
      "value": "-14"
    },
    "FR_ERROR_INVALID_CONTEXT": {
      "name": "FR_ERROR_INVALID_CONTEXT",
      "value": "-15"
    },
    "FR_ERROR_UNIMPLEMENTED": {
      "name": "FR_ERROR_UNIMPLEMENTED",
      "value": "-16"
    },
    "FR_ERROR_INVALID_API_VERSION": {
      "name": "FR_ERROR_INVALID_API_VERSION",
      "value": "-17"
    },
    "FR_ERROR_INTERNAL_ERROR": {
      "name": "FR_ERROR_INTERNAL_ERROR",
      "value": "-18"
    },
    "FR_ERROR_IO_ERROR": {
      "name": "FR_ERROR_IO_ERROR",
      "value": "-19"
    },
    "FR_ERROR_UNSUPPORTED_SHADER_PARAMETER_TYPE": {
      "name": "FR_ERROR_UNSUPPORTED_SHADER_PARAMETER_TYPE",
      "value": "-20"
    },
    "FR_ERROR_MATERIAL_STACK_OVERFLOW": {
      "name": "FR_ERROR_MATERIAL_STACK_OVERFLOW",
      "value": "-21"
    },
    "FR_ERROR_INVALID_PARAMETER_TYPE": {
      "name": "FR_ERROR_INVALID_PARAMETER_TYPE",
      "value": "-22"
    },
    "FR_ERROR_UNSUPPORTED": {
      "name": "FR_ERROR_UNSUPPORTED",
      "value": "-23"
    },
    "FR_ERROR_OPENCL_OUT_OF_HOST_MEMORY": {
      "name": "FR_ERROR_OPENCL_OUT_OF_HOST_MEMORY",
      "value": "-24"
    },
    "FR_PARAMETER_TYPE_FLOAT": {
      "name": "FR_PARAMETER_TYPE_FLOAT",
      "value": "0x1"
    },
    "FR_PARAMETER_TYPE_FLOAT2": {
      "name": "FR_PARAMETER_TYPE_FLOAT2",
      "value": "0x2"
    },
    "FR_PARAMETER_TYPE_FLOAT3": {
      "name": "FR_PARAMETER_TYPE_FLOAT3",
      "value": "0x3"
    },
    "FR_PARAMETER_TYPE_FLOAT4": {
      "name": "FR_PARAMETER_TYPE_FLOAT4",
      "value": "0x4"
    },
    "FR_PARAMETER_TYPE_IMAGE": {
      "name": "FR_PARAMETER_TYPE_IMAGE",
      "value": "0x5"
    },
    "FR_PARAMETER_TYPE_STRING": {
      "name": "FR_PARAMETER_TYPE_STRING",
      "value": "0x6"
    },
    "FR_PARAMETER_TYPE_SHADER": {
      "name": "FR_PARAMETER_TYPE_SHADER",
      "value": "0x7"
    },
    "FR_PARAMETER_TYPE_UINT": {
      "name": "FR_PARAMETER_TYPE_UINT",
      "value": "0x8"
    },
    "FR_CONTEXT_OPENCL": {
      "name": "FR_CONTEXT_OPENCL",
      "value": "(1 << 0)"
    },
    "FR_CONTEXT_DIRECTCOMPUTE": {
      "name": "FR_CONTEXT_DIRECTCOMPUTE",
      "value": "(1 << 1)"
    },
    "FR_CONTEXT_REFERENCE": {
      "name": "FR_CONTEXT_REFERENCE",
      "value": "(1 << 2)"
    },
    "FR_CONTEXT_OPENGL": {
      "name": "FR_CONTEXT_OPENGL",
      "value": "(1 << 3)"
    },
    "FR_CONTEXT_METAL": {
      "name": "FR_CONTEXT_METAL",
      "value": "(1 << 4)"
    },
    "FR_CREATION_FLAGS_ENABLE_GPU0": {
      "name": "FR_CREATION_FLAGS_ENABLE_GPU0",
      "value": "(1 << 0)"
    },
    "FR_CREATION_FLAGS_ENABLE_GPU1": {
      "name": "FR_CREATION_FLAGS_ENABLE_GPU1",
      "value": "(1 << 1)"
    },
    "FR_CREATION_FLAGS_ENABLE_GPU2": {
      "name": "FR_CREATION_FLAGS_ENABLE_GPU2",
      "value": "(1 << 2)"
    },
    "FR_CREATION_FLAGS_ENABLE_GPU3": {
      "name": "FR_CREATION_FLAGS_ENABLE_GPU3",
      "value": "(1 << 3)"
    },
    "FR_CREATION_FLAGS_ENABLE_CPU": {
      "name": "FR_CREATION_FLAGS_ENABLE_CPU",
      "value": "(1 << 4)"
    },
    "FR_CREATION_FLAGS_ENABLE_GL_INTEROP": {
      "name": "FR_CREATION_FLAGS_ENABLE_GL_INTEROP",
      "value": "(1 << 5)"
    },
    "FR_CREATION_FLAGS_ENABLE_GPU4": {
      "name": "FR_CREATION_FLAGS_ENABLE_GPU4",
      "value": "(1 << 6)"
    },
    "FR_CREATION_FLAGS_ENABLE_GPU5": {
      "name": "FR_CREATION_FLAGS_ENABLE_GPU5",
      "value": "(1 << 7)"
    },
    "FR_CREATION_FLAGS_ENABLE_GPU6": {
      "name": "FR_CREATION_FLAGS_ENABLE_GPU6",
      "value": "(1 << 8)"
    },
    "FR_CREATION_FLAGS_ENABLE_GPU7": {
      "name": "FR_CREATION_FLAGS_ENABLE_GPU7",
      "value": "(1 << 9)"
    },
    "FR_CREATION_FLAGS_ENABLE_METAL": {
      "name": "FR_CREATION_FLAGS_ENABLE_METAL",
      "value": "(1 << 10)"
    },
    "FR_FILTER_BOX": {
      "name": "FR_FILTER_BOX",
      "value": "0x1"
    },
    "FR_FILTER_TRIANGLE": {
      "name": "FR_FILTER_TRIANGLE",
      "value": "0x2"
    },
    "FR_FILTER_GAUSSIAN": {
      "name": "FR_FILTER_GAUSSIAN",
      "value": "0x3"
    },
    "FR_FILTER_MITCHELL": {
      "name": "FR_FILTER_MITCHELL",
      "value": "0x4"
    },
    "FR_FILTER_LANCZOS": {
      "name": "FR_FILTER_LANCZOS",
      "value": "0x5"
    },
    "FR_FILTER_BLACKMANHARRIS": {
      "name": "FR_FILTER_BLACKMANHARRIS",
      "value": "0x6"
    },
    "FR_SHAPE_TYPE_MESH": {
      "name": "FR_SHAPE_TYPE_MESH",
      "value": "0x1"
    },
    "FR_SHAPE_TYPE_INSTANCE": {
      "name": "FR_SHAPE_TYPE_INSTANCE",
      "value": "0x2"
    },
    "FR_LIGHT_TYPE_POINT": {
      "name": "FR_LIGHT_TYPE_POINT",
      "value": "0x1"
    },
    "FR_LIGHT_TYPE_DIRECTIONAL": {
      "name": "FR_LIGHT_TYPE_DIRECTIONAL",
      "value": "0x2"
    },
    "FR_LIGHT_TYPE_SPOT": {
      "name": "FR_LIGHT_TYPE_SPOT",
      "value": "0x3"
    },
    "FR_LIGHT_TYPE_ENVIRONMENT": {
      "name": "FR_LIGHT_TYPE_ENVIRONMENT",
      "value": "0x4"
    },
    "FR_LIGHT_TYPE_SKY": {
      "name": "FR_LIGHT_TYPE_SKY",
      "value": "0x5"
    },
    "FR_LIGHT_TYPE_IES": {
      "name": "FR_LIGHT_TYPE_IES",
      "value": "0x6"
    },
    "FR_OBJECT_NAME": {
      "name": "FR_OBJECT_NAME",
      "value": "0x777777"
    },
    "FR_CONTEXT_CREATEPROP_CPU_THREAD_LIMIT": {
      "name": "FR_CONTEXT_CREATEPROP_CPU_THREAD_LIMIT",
      "value": "0x600"
    },
    "FR_CONTEXT_CREATION_FLAGS": {
      "name": "FR_CONTEXT_CREATION_FLAGS",
      "value": "0x102"
    },
    "FR_CONTEXT_CACHE_PATH": {
      "name": "FR_CONTEXT_CACHE_PATH",
      "value": "0x103"
    },
    "FR_CONTEXT_RENDER_STATUS": {
      "name": "FR_CONTEXT_RENDER_STATUS",
      "value": "0x104"
    },
    "FR_CONTEXT_RENDER_STATISTICS": {
      "name": "FR_CONTEXT_RENDER_STATISTICS",
      "value": "0x105"
    },
    "FR_CONTEXT_DEVICE_COUNT": {
      "name": "FR_CONTEXT_DEVICE_COUNT",
      "value": "0x106"
    },
    "FR_CONTEXT_PARAMETER_COUNT": {
      "name": "FR_CONTEXT_PARAMETER_COUNT",
      "value": "0x107"
    },
    "FR_CONTEXT_ACTIVE_PLUGIN": {
      "name": "FR_CONTEXT_ACTIVE_PLUGIN",
      "value": "0x108"
    },
    "FR_CONTEXT_SCENE": {
      "name": "FR_CONTEXT_SCENE",
      "value": "0x109"
    },
    "FR_CONTEXT_AA_CELL_SIZE": {
      "name": "FR_CONTEXT_AA_CELL_SIZE",
      "value": "0x10A"
    },
    "FR_CONTEXT_AA_SAMPLES": {
      "name": "FR_CONTEXT_AA_SAMPLES",
      "value": "0x10B"
    },
    "FR_CONTEXT_IMAGE_FILTER_TYPE": {
      "name": "FR_CONTEXT_IMAGE_FILTER_TYPE",
      "value": "0x10C"
    },
    "FR_CONTEXT_IMAGE_FILTER_BOX_RADIUS": {
      "name": "FR_CONTEXT_IMAGE_FILTER_BOX_RADIUS",
      "value": "0x10D"
    },
    "FR_CONTEXT_IMAGE_FILTER_GAUSSIAN_RADIUS": {
      "name": "FR_CONTEXT_IMAGE_FILTER_GAUSSIAN_RADIUS",
      "value": "0x10E"
    },
    "FR_CONTEXT_IMAGE_FILTER_TRIANGLE_RADIUS": {
      "name": "FR_CONTEXT_IMAGE_FILTER_TRIANGLE_RADIUS",
      "value": "0x10F"
    },
    "FR_CONTEXT_IMAGE_FILTER_MITCHELL_RADIUS": {
      "name": "FR_CONTEXT_IMAGE_FILTER_MITCHELL_RADIUS",
      "value": "0x110"
    },
    "FR_CONTEXT_IMAGE_FILTER_LANCZOS_RADIUS": {
      "name": "FR_CONTEXT_IMAGE_FILTER_LANCZOS_RADIUS",
      "value": "0x111"
    },
    "FR_CONTEXT_IMAGE_FILTER_BLACKMANHARRIS_RADIUS": {
      "name": "FR_CONTEXT_IMAGE_FILTER_BLACKMANHARRIS_RADIUS",
      "value": "0x112"
    },
    "FR_CONTEXT_TONE_MAPPING_TYPE": {
      "name": "FR_CONTEXT_TONE_MAPPING_TYPE",
      "value": "0x113"
    },
    "FR_CONTEXT_TONE_MAPPING_LINEAR_SCALE": {
      "name": "FR_CONTEXT_TONE_MAPPING_LINEAR_SCALE",
      "value": "0x114"
    },
    "FR_CONTEXT_TONE_MAPPING_PHOTO_LINEAR_SENSITIVITY": {
      "name": "FR_CONTEXT_TONE_MAPPING_PHOTO_LINEAR_SENSITIVITY",
      "value": "0x115"
    },
    "FR_CONTEXT_TONE_MAPPING_PHOTO_LINEAR_EXPOSURE": {
      "name": "FR_CONTEXT_TONE_MAPPING_PHOTO_LINEAR_EXPOSURE",
      "value": "0x116"
    },
    "FR_CONTEXT_TONE_MAPPING_PHOTO_LINEAR_FSTOP": {
      "name": "FR_CONTEXT_TONE_MAPPING_PHOTO_LINEAR_FSTOP",
      "value": "0x117"
    },
    "FR_CONTEXT_TONE_MAPPING_REINHARD02_PRE_SCALE": {
      "name": "FR_CONTEXT_TONE_MAPPING_REINHARD02_PRE_SCALE",
      "value": "0x118"
    },
    "FR_CONTEXT_TONE_MAPPING_REINHARD02_POST_SCALE": {
      "name": "FR_CONTEXT_TONE_MAPPING_REINHARD02_POST_SCALE",
      "value": "0x119"
    },
    "FR_CONTEXT_TONE_MAPPING_REINHARD02_BURN": {
      "name": "FR_CONTEXT_TONE_MAPPING_REINHARD02_BURN",
      "value": "0x11A"
    },
    "FR_CONTEXT_MAX_RECURSION": {
      "name": "FR_CONTEXT_MAX_RECURSION",
      "value": "0x11B"
    },
    "FR_CONTEXT_RAY_CAST_EPISLON": {
      "name": "FR_CONTEXT_RAY_CAST_EPISLON",
      "value": "0x11C"
    },
    "FR_CONTEXT_RADIANCE_CLAMP": {
      "name": "FR_CONTEXT_RADIANCE_CLAMP",
      "value": "0x11D"
    },
    "FR_CONTEXT_X_FLIP": {
      "name": "FR_CONTEXT_X_FLIP",
      "value": "0x11E"
    },
    "FR_CONTEXT_Y_FLIP": {
      "name": "FR_CONTEXT_Y_FLIP",
      "value": "0x11F"
    },
    "FR_CONTEXT_TEXTURE_GAMMA": {
      "name": "FR_CONTEXT_TEXTURE_GAMMA",
      "value": "0x120"
    },
    "FR_CONTEXT_PDF_THRESHOLD": {
      "name": "FR_CONTEXT_PDF_THRESHOLD",
      "value": "0x121"
    },
    "FR_CONTEXT_RENDER_MODE": {
      "name": "FR_CONTEXT_RENDER_MODE",
      "value": "0x122"
    },
    "FR_CONTEXT_ROUGHNESS_CAP": {
      "name": "FR_CONTEXT_ROUGHNESS_CAP",
      "value": "0x123"
    },
    "FR_CONTEXT_DISPLAY_GAMMA": {
      "name": "FR_CONTEXT_DISPLAY_GAMMA",
      "value": "0x124"
    },
    "FR_CONTEXT_MATERIAL_STACK_SIZE": {
      "name": "FR_CONTEXT_MATERIAL_STACK_SIZE",
      "value": "0x125"
    },
    "FR_CONTEXT_CLIPPING_PLANE": {
      "name": "FR_CONTEXT_CLIPPING_PLANE",
      "value": "0x126"
    },
    "FR_CONTEXT_GPU0_NAME": {
      "name": "FR_CONTEXT_GPU0_NAME",
      "value": "0x127"
    },
    "FR_CONTEXT_GPU1_NAME": {
      "name": "FR_CONTEXT_GPU1_NAME",
      "value": "0x128"
    },
    "FR_CONTEXT_GPU2_NAME": {
      "name": "FR_CONTEXT_GPU2_NAME",
      "value": "0x129"
    },
    "FR_CONTEXT_GPU3_NAME": {
      "name": "FR_CONTEXT_GPU3_NAME",
      "value": "0x12A"
    },
    "FR_CONTEXT_CPU_NAME": {
      "name": "FR_CONTEXT_CPU_NAME",
      "value": "0x12B"
    },
    "FR_CONTEXT_GPU4_NAME": {
      "name": "FR_CONTEXT_GPU4_NAME",
      "value": "0x12C"
    },
    "FR_CONTEXT_GPU5_NAME": {
      "name": "FR_CONTEXT_GPU5_NAME",
      "value": "0x12D"
    },
    "FR_CONTEXT_GPU6_NAME": {
      "name": "FR_CONTEXT_GPU6_NAME",
      "value": "0x12E"
    },
    "FR_CONTEXT_GPU7_NAME": {
      "name": "FR_CONTEXT_GPU7_NAME",
      "value": "0x12F"
    },
    "FR_CONTEXT_TONE_MAPPING_EXPONENTIAL_INTENSITY": {
      "name": "FR_CONTEXT_TONE_MAPPING_EXPONENTIAL_INTENSITY",
      "value": "0x130"
    },
    "FR_CONTEXT_FRAMECOUNT": {
      "name": "FR_CONTEXT_FRAMECOUNT",
      "value": "0x131"
    },
    "FR_CONTEXT_TEXTURE_COMPRESSION": {
      "name": "FR_CONTEXT_TEXTURE_COMPRESSION",
      "value": "0x132"
    },
    "FR_CONTEXT_AO_RAY_LENGTH": {
      "name": "FR_CONTEXT_AO_RAY_LENGTH",
      "value": "0x133"
    },
    "FR_CONTEXT_OOC_TEXTURE_CACHE": {
      "name": "FR_CONTEXT_OOC_TEXTURE_CACHE",
      "value": "0x134"
    },
    "FR_CONTEXT_PREVIEW": {
      "name": "FR_CONTEXT_PREVIEW",
      "value": "0x135"
    },
    "FR_CONTEXT_CPU_THREAD_LIMIT": {
      "name": "FR_CONTEXT_CPU_THREAD_LIMIT",
      "value": "0x136"
    },
    "FR_CONTEXT_LAST_ERROR_MESSAGE": {
      "name": "FR_CONTEXT_LAST_ERROR_MESSAGE",
      "value": "0x137"
    },
    "FR_CONTEXT_MAX_DEPTH_DIFFUSE": {
      "name": "FR_CONTEXT_MAX_DEPTH_DIFFUSE",
      "value": "0x138"
    },
    "FR_CONTEXT_MAX_DEPTH_GLOSSY": {
      "name": "FR_CONTEXT_MAX_DEPTH_GLOSSY",
      "value": "0x139"
    },
    "FR_CONTEXT_OOC_CACHE_PATH": {
      "name": "FR_CONTEXT_OOC_CACHE_PATH",
      "value": "0x13A"
    },
    "FR_CONTEXT_MAX_DEPTH_REFRACTION": {
      "name": "FR_CONTEXT_MAX_DEPTH_REFRACTION",
      "value": "0x13B"
    },
    "FR_CONTEXT_MAX_DEPTH_GLOSSY_REFRACTION": {
      "name": "FR_CONTEXT_MAX_DEPTH_GLOSSY_REFRACTION",
      "value": "0x13C"
    },
    "FR_CONTEXT_MAX": {
      "name": "FR_CONTEXT_MAX",
      "value": "0x13D"
    },
    "FR_CAMERA_TRANSFORM": {
      "name": "FR_CAMERA_TRANSFORM",
      "value": "0x201"
    },
    "FR_CAMERA_FSTOP": {
      "name": "FR_CAMERA_FSTOP",
      "value": "0x202"
    },
    "FR_CAMERA_APERTURE_BLADES": {
      "name": "FR_CAMERA_APERTURE_BLADES",
      "value": "0x203"
    },
    "FR_CAMERA_RESPONSE": {
      "name": "FR_CAMERA_RESPONSE",
      "value": "0x204"
    },
    "FR_CAMERA_EXPOSURE": {
      "name": "FR_CAMERA_EXPOSURE",
      "value": "0x205"
    },
    "FR_CAMERA_FOCAL_LENGTH": {
      "name": "FR_CAMERA_FOCAL_LENGTH",
      "value": "0x206"
    },
    "FR_CAMERA_SENSOR_SIZE": {
      "name": "FR_CAMERA_SENSOR_SIZE",
      "value": "0x207"
    },
    "FR_CAMERA_MODE": {
      "name": "FR_CAMERA_MODE",
      "value": "0x208"
    },
    "FR_CAMERA_ORTHO_WIDTH": {
      "name": "FR_CAMERA_ORTHO_WIDTH",
      "value": "0x209"
    },
    "FR_CAMERA_ORTHO_HEIGHT": {
      "name": "FR_CAMERA_ORTHO_HEIGHT",
      "value": "0x20A"
    },
    "FR_CAMERA_FOCUS_DISTANCE": {
      "name": "FR_CAMERA_FOCUS_DISTANCE",
      "value": "0x20B"
    },
    "FR_CAMERA_POSITION": {
      "name": "FR_CAMERA_POSITION",
      "value": "0x20C"
    },
    "FR_CAMERA_LOOKAT": {
      "name": "FR_CAMERA_LOOKAT",
      "value": "0x20D"
    },
    "FR_CAMERA_UP": {
      "name": "FR_CAMERA_UP",
      "value": "0x20E"
    },
    "FR_CAMERA_FOCAL_TILT": {
      "name": "FR_CAMERA_FOCAL_TILT",
      "value": "0x20F"
    },
    "FR_CAMERA_LENS_SHIFT": {
      "name": "FR_CAMERA_LENS_SHIFT",
      "value": "0x210"
    },
    "FR_CAMERA_IPD": {
      "name": "FR_CAMERA_IPD",
      "value": "0x211"
    },
    "FR_CAMERA_TILT_CORRECTION": {
      "name": "FR_CAMERA_TILT_CORRECTION",
      "value": "0x212"
    },
    "FR_CAMERA_NEAR_PLANE": {
      "name": "FR_CAMERA_NEAR_PLANE",
      "value": "0x213"
    },
    "FR_CAMERA_FAR_PLANE": {
      "name": "FR_CAMERA_FAR_PLANE",
      "value": "0x214"
    },
    "FR_IMAGE_FORMAT": {
      "name": "FR_IMAGE_FORMAT",
      "value": "0x301"
    },
    "FR_IMAGE_DESC": {
      "name": "FR_IMAGE_DESC",
      "value": "0x302"
    },
    "FR_IMAGE_DATA": {
      "name": "FR_IMAGE_DATA",
      "value": "0x303"
    },
    "FR_IMAGE_DATA_SIZEBYTE": {
      "name": "FR_IMAGE_DATA_SIZEBYTE",
      "value": "0x304"
    },
    "FR_IMAGE_WRAP": {
      "name": "FR_IMAGE_WRAP",
      "value": "0x305"
    },
    "FR_IMAGE_FILTER": {
      "name": "FR_IMAGE_FILTER",
      "value": "0x306"
    },
    "FR_BUFFER_DESC": {
      "name": "FR_BUFFER_DESC",
      "value": "0x350"
    },
    "FR_BUFFER_DATA": {
      "name": "FR_BUFFER_DATA",
      "value": "0x351"
    },
    "FR_SHAPE_TYPE": {
      "name": "FR_SHAPE_TYPE",
      "value": "0x401"
    },
    "FR_SHAPE_VIDMEM_USAGE": {
      "name": "FR_SHAPE_VIDMEM_USAGE",
      "value": "0x402"
    },
    "FR_SHAPE_TRANSFORM": {
      "name": "FR_SHAPE_TRANSFORM",
      "value": "0x403"
    },
    "FR_SHAPE_MATERIAL": {
      "name": "FR_SHAPE_MATERIAL",
      "value": "0x404"
    },
    "FR_SHAPE_LINEAR_MOTION": {
      "name": "FR_SHAPE_LINEAR_MOTION",
      "value": "0x405"
    },
    "FR_SHAPE_ANGULAR_MOTION": {
      "name": "FR_SHAPE_ANGULAR_MOTION",
      "value": "0x406"
    },
    "FR_SHAPE_VISIBILITY_FLAG": {
      "name": "FR_SHAPE_VISIBILITY_FLAG",
      "value": "0x407"
    },
    "FR_SHAPE_SHADOW_FLAG": {
      "name": "FR_SHAPE_SHADOW_FLAG",
      "value": "0x408"
    },
    "FR_SHAPE_SUBDIVISION_FACTOR": {
      "name": "FR_SHAPE_SUBDIVISION_FACTOR",
      "value": "0x409"
    },
    "FR_SHAPE_DISPLACEMENT_SCALE": {
      "name": "FR_SHAPE_DISPLACEMENT_SCALE",
      "value": "0x40A"
    },
    "FR_SHAPE_VISIBILITY_PRIMARY_ONLY_FLAG": {
      "name": "FR_SHAPE_VISIBILITY_PRIMARY_ONLY_FLAG",
      "value": "0x40C"
    },
    "FR_SHAPE_VISIBILITY_IN_SPECULAR_FLAG": {
      "name": "FR_SHAPE_VISIBILITY_IN_SPECULAR_FLAG",
      "value": "0x40D"
    },
    "FR_SHAPE_SHADOW_CATCHER_FLAG": {
      "name": "FR_SHAPE_SHADOW_CATCHER_FLAG",
      "value": "0x40E"
    },
    "FR_SHAPE_VOLUME_MATERIAL": {
      "name": "FR_SHAPE_VOLUME_MATERIAL",
      "value": "0x40F"
    },
    "FR_SHAPE_OBJECT_GROUP_ID": {
      "name": "FR_SHAPE_OBJECT_GROUP_ID",
      "value": "0x410"
    },
    "FR_SHAPE_SUBDIVISION_CREASEWEIGHT": {
      "name": "FR_SHAPE_SUBDIVISION_CREASEWEIGHT",
      "value": "0x411"
    },
    "FR_SHAPE_SUBDIVISION_BOUNDARYINTEROP": {
      "name": "FR_SHAPE_SUBDIVISION_BOUNDARYINTEROP",
      "value": "0x412"
    },
    "FR_SHAPE_DISPLACEMENT_MATERIAL": {
      "name": "FR_SHAPE_DISPLACEMENT_MATERIAL",
      "value": "0x413"
    },
    "FR_SHAPE_MATERIALS_PER_FACE": {
      "name": "FR_SHAPE_MATERIALS_PER_FACE",
      "value": "0x415"
    },
    "FR_SHAPE_SCALE_MOTION": {
      "name": "FR_SHAPE_SCALE_MOTION",
      "value": "0x416"
    },
    "FR_SHAPE_HETERO_VOLUME": {
      "name": "FR_SHAPE_HETERO_VOLUME",
      "value": "0x417"
    },
    "FR_MESH_POLYGON_COUNT": {
      "name": "FR_MESH_POLYGON_COUNT",
      "value": "0x501"
    },
    "FR_MESH_VERTEX_COUNT": {
      "name": "FR_MESH_VERTEX_COUNT",
      "value": "0x502"
    },
    "FR_MESH_NORMAL_COUNT": {
      "name": "FR_MESH_NORMAL_COUNT",
      "value": "0x503"
    },
    "FR_MESH_UV_COUNT": {
      "name": "FR_MESH_UV_COUNT",
      "value": "0x504"
    },
    "FR_MESH_VERTEX_ARRAY": {
      "name": "FR_MESH_VERTEX_ARRAY",
      "value": "0x505"
    },
    "FR_MESH_NORMAL_ARRAY": {
      "name": "FR_MESH_NORMAL_ARRAY",
      "value": "0x506"
    },
    "FR_MESH_UV_ARRAY": {
      "name": "FR_MESH_UV_ARRAY",
      "value": "0x507"
    },
    "FR_MESH_VERTEX_INDEX_ARRAY": {
      "name": "FR_MESH_VERTEX_INDEX_ARRAY",
      "value": "0x508"
    },
    "FR_MESH_NORMAL_INDEX_ARRAY": {
      "name": "FR_MESH_NORMAL_INDEX_ARRAY",
      "value": "0x509"
    },
    "FR_MESH_UV_INDEX_ARRAY": {
      "name": "FR_MESH_UV_INDEX_ARRAY",
      "value": "0x50A"
    },
    "FR_MESH_VERTEX_STRIDE": {
      "name": "FR_MESH_VERTEX_STRIDE",
      "value": "0x50C"
    },
    "FR_MESH_NORMAL_STRIDE": {
      "name": "FR_MESH_NORMAL_STRIDE",
      "value": "0x50D"
    },
    "FR_MESH_UV_STRIDE": {
      "name": "FR_MESH_UV_STRIDE",
      "value": "0x50E"
    },
    "FR_MESH_VERTEX_INDEX_STRIDE": {
      "name": "FR_MESH_VERTEX_INDEX_STRIDE",
      "value": "0x50F"
    },
    "FR_MESH_NORMAL_INDEX_STRIDE": {
      "name": "FR_MESH_NORMAL_INDEX_STRIDE",
      "value": "0x510"
    },
    "FR_MESH_UV_INDEX_STRIDE": {
      "name": "FR_MESH_UV_INDEX_STRIDE",
      "value": "0x511"
    },
    "FR_MESH_NUM_FACE_VERTICES_ARRAY": {
      "name": "FR_MESH_NUM_FACE_VERTICES_ARRAY",
      "value": "0x512"
    },
    "FR_MESH_UV2_COUNT": {
      "name": "FR_MESH_UV2_COUNT",
      "value": "0x513"
    },
    "FR_MESH_UV2_ARRAY": {
      "name": "FR_MESH_UV2_ARRAY",
      "value": "0x514"
    },
    "FR_MESH_UV2_INDEX_ARRAY": {
      "name": "FR_MESH_UV2_INDEX_ARRAY",
      "value": "0x515"
    },
    "FR_MESH_UV2_STRIDE": {
      "name": "FR_MESH_UV2_STRIDE",
      "value": "0x516"
    },
    "FR_MESH_UV2_INDEX_STRIDE": {
      "name": "FR_MESH_UV2_INDEX_STRIDE",
      "value": "0x517"
    },
    "FR_MESH_UV_DIM": {
      "name": "FR_MESH_UV_DIM",
      "value": "0x518"
    },
    "FR_SCENE_SHAPE_COUNT": {
      "name": "FR_SCENE_SHAPE_COUNT",
      "value": "0x701"
    },
    "FR_SCENE_LIGHT_COUNT": {
      "name": "FR_SCENE_LIGHT_COUNT",
      "value": "0x702"
    },
    "FR_SCENE_SHAPE_LIST": {
      "name": "FR_SCENE_SHAPE_LIST",
      "value": "0x704"
    },
    "FR_SCENE_LIGHT_LIST": {
      "name": "FR_SCENE_LIGHT_LIST",
      "value": "0x705"
    },
    "FR_SCENE_CAMERA": {
      "name": "FR_SCENE_CAMERA",
      "value": "0x706"
    },
    "FR_SCENE_BACKGROUND_IMAGE": {
      "name": "FR_SCENE_BACKGROUND_IMAGE",
      "value": "0x708"
    },
    "FR_SCENE_ENVIRONMENT_OVERRIDE_REFLECTION": {
      "name": "FR_SCENE_ENVIRONMENT_OVERRIDE_REFLECTION",
      "value": "0x709"
    },
    "FR_SCENE_ENVIRONMENT_OVERRIDE_REFRACTION": {
      "name": "FR_SCENE_ENVIRONMENT_OVERRIDE_REFRACTION",
      "value": "0x70A"
    },
    "FR_SCENE_ENVIRONMENT_OVERRIDE_TRANSPARENCY": {
      "name": "FR_SCENE_ENVIRONMENT_OVERRIDE_TRANSPARENCY",
      "value": "0x70B"
    },
    "FR_SCENE_ENVIRONMENT_OVERRIDE_BACKGROUND": {
      "name": "FR_SCENE_ENVIRONMENT_OVERRIDE_BACKGROUND",
      "value": "0x70C"
    },
    "FR_SCENE_AABB": {
      "name": "FR_SCENE_AABB",
      "value": "0x70D"
    },
    "FR_SCENE_HETEROVOLUME_LIST": {
      "name": "FR_SCENE_HETEROVOLUME_LIST",
      "value": "0x70E"
    },
    "FR_SCENE_HETEROVOLUME_COUNT": {
      "name": "FR_SCENE_HETEROVOLUME_COUNT",
      "value": "0x70F"
    },
    "FR_LIGHT_TYPE": {
      "name": "FR_LIGHT_TYPE",
      "value": "0x801"
    },
    "FR_LIGHT_TRANSFORM": {
      "name": "FR_LIGHT_TRANSFORM",
      "value": "0x803"
    },
    "FR_POINT_LIGHT_RADIANT_POWER": {
      "name": "FR_POINT_LIGHT_RADIANT_POWER",
      "value": "0x804"
    },
    "FR_DIRECTIONAL_LIGHT_RADIANT_POWER": {
      "name": "FR_DIRECTIONAL_LIGHT_RADIANT_POWER",
      "value": "0x808"
    },
    "FR_DIRECTIONAL_LIGHT_SHADOW_SOFTNESS": {
      "name": "FR_DIRECTIONAL_LIGHT_SHADOW_SOFTNESS",
      "value": "0x809"
    },
    "FR_SPOT_LIGHT_RADIANT_POWER": {
      "name": "FR_SPOT_LIGHT_RADIANT_POWER",
      "value": "0x80B"
    },
    "FR_SPOT_LIGHT_CONE_SHAPE": {
      "name": "FR_SPOT_LIGHT_CONE_SHAPE",
      "value": "0x80C"
    },
    "FR_ENVIRONMENT_LIGHT_IMAGE": {
      "name": "FR_ENVIRONMENT_LIGHT_IMAGE",
      "value": "0x80F"
    },
    "FR_ENVIRONMENT_LIGHT_INTENSITY_SCALE": {
      "name": "FR_ENVIRONMENT_LIGHT_INTENSITY_SCALE",
      "value": "0x810"
    },
    "FR_ENVIRONMENT_LIGHT_PORTAL_LIST": {
      "name": "FR_ENVIRONMENT_LIGHT_PORTAL_LIST",
      "value": "0x818"
    },
    "FR_ENVIRONMENT_LIGHT_PORTAL_COUNT": {
      "name": "FR_ENVIRONMENT_LIGHT_PORTAL_COUNT",
      "value": "0x819"
    },
    "FR_SKY_LIGHT_TURBIDITY": {
      "name": "FR_SKY_LIGHT_TURBIDITY",
      "value": "0x812"
    },
    "FR_SKY_LIGHT_ALBEDO": {
      "name": "FR_SKY_LIGHT_ALBEDO",
      "value": "0x813"
    },
    "FR_SKY_LIGHT_SCALE": {
      "name": "FR_SKY_LIGHT_SCALE",
      "value": "0x814"
    },
    "FR_SKY_LIGHT_PORTAL_LIST": {
      "name": "FR_SKY_LIGHT_PORTAL_LIST",
      "value": "0x820"
    },
    "FR_SKY_LIGHT_PORTAL_COUNT": {
      "name": "FR_SKY_LIGHT_PORTAL_COUNT",
      "value": "0x821"
    },
    "FR_IES_LIGHT_RADIANT_POWER": {
      "name": "FR_IES_LIGHT_RADIANT_POWER",
      "value": "0x816"
    },
    "FR_IES_LIGHT_IMAGE_DESC": {
      "name": "FR_IES_LIGHT_IMAGE_DESC",
      "value": "0x817"
    },
    "FR_PARAMETER_NAME": {
      "name": "FR_PARAMETER_NAME",
      "value": "0x1201"
    },
    "FR_PARAMETER_NAME_STRING": {
      "name": "FR_PARAMETER_NAME_STRING",
      "value": "0x1202"
    },
    "FR_PARAMETER_TYPE": {
      "name": "FR_PARAMETER_TYPE",
      "value": "0x1203"
    },
    "FR_PARAMETER_DESCRIPTION": {
      "name": "FR_PARAMETER_DESCRIPTION",
      "value": "0x1204"
    },
    "FR_PARAMETER_VALUE": {
      "name": "FR_PARAMETER_VALUE",
      "value": "0x1205"
    },
    "FR_FRAMEBUFFER_FORMAT": {
      "name": "FR_FRAMEBUFFER_FORMAT",
      "value": "0x1301"
    },
    "FR_FRAMEBUFFER_DESC": {
      "name": "FR_FRAMEBUFFER_DESC",
      "value": "0x1302"
    },
    "FR_FRAMEBUFFER_DATA": {
      "name": "FR_FRAMEBUFFER_DATA",
      "value": "0x1303"
    },
    "FR_FRAMEBUFFER_GL_TARGET": {
      "name": "FR_FRAMEBUFFER_GL_TARGET",
      "value": "0x1304"
    },
    "FR_FRAMEBUFFER_GL_MIPLEVEL": {
      "name": "FR_FRAMEBUFFER_GL_MIPLEVEL",
      "value": "0x1305"
    },
    "FR_FRAMEBUFFER_GL_TEXTURE": {
      "name": "FR_FRAMEBUFFER_GL_TEXTURE",
      "value": "0x1306"
    },
    "FR_MESH_POLYGON_VERTEX_COUNT": {
      "name": "FR_MESH_POLYGON_VERTEX_COUNT",
      "value": "0x1401"
    },
    "FR_MESH_POLYGON_VERTEX_POSITION": {
      "name": "FR_MESH_POLYGON_VERTEX_POSITION",
      "value": "0x1501"
    },
    "FR_MESH_POLYGON_VERTEX_NORMAL": {
      "name": "FR_MESH_POLYGON_VERTEX_NORMAL",
      "value": "0x1502"
    },
    "FR_MESH_POLYGON_VERTEX_TEXCOORD": {
      "name": "FR_MESH_POLYGON_VERTEX_TEXCOORD",
      "value": "0x1503"
    },
    "FR_INSTANCE_PARENT_SHAPE": {
      "name": "FR_INSTANCE_PARENT_SHAPE",
      "value": "0x1601"
    },
    "FR_COMPONENT_TYPE_UINT8": {
      "name": "FR_COMPONENT_TYPE_UINT8",
      "value": "0x1"
    },
    "FR_COMPONENT_TYPE_FLOAT16": {
      "name": "FR_COMPONENT_TYPE_FLOAT16",
      "value": "0x2"
    },
    "FR_COMPONENT_TYPE_FLOAT32": {
      "name": "FR_COMPONENT_TYPE_FLOAT32",
      "value": "0x3"
    },
    "FR_BUFFER_ELEMENT_TYPE_INT32": {
      "name": "FR_BUFFER_ELEMENT_TYPE_INT32",
      "value": "0x1"
    },
    "FR_BUFFER_ELEMENT_TYPE_FLOAT32": {
      "name": "FR_BUFFER_ELEMENT_TYPE_FLOAT32",
      "value": "0x2"
    },
    "FR_RENDER_MODE_GLOBAL_ILLUMINATION": {
      "name": "FR_RENDER_MODE_GLOBAL_ILLUMINATION",
      "value": "0x1"
    },
    "FR_RENDER_MODE_DIRECT_ILLUMINATION": {
      "name": "FR_RENDER_MODE_DIRECT_ILLUMINATION",
      "value": "0x2"
    },
    "FR_RENDER_MODE_DIRECT_ILLUMINATION_NO_SHADOW": {
      "name": "FR_RENDER_MODE_DIRECT_ILLUMINATION_NO_SHADOW",
      "value": "0x3"
    },
    "FR_RENDER_MODE_WIREFRAME": {
      "name": "FR_RENDER_MODE_WIREFRAME",
      "value": "0x4"
    },
    "FR_RENDER_MODE_MATERIAL_INDEX": {
      "name": "FR_RENDER_MODE_MATERIAL_INDEX",
      "value": "0x5"
    },
    "FR_RENDER_MODE_POSITION": {
      "name": "FR_RENDER_MODE_POSITION",
      "value": "0x6"
    },
    "FR_RENDER_MODE_NORMAL": {
      "name": "FR_RENDER_MODE_NORMAL",
      "value": "0x7"
    },
    "FR_RENDER_MODE_TEXCOORD": {
      "name": "FR_RENDER_MODE_TEXCOORD",
      "value": "0x8"
    },
    "FR_RENDER_MODE_AMBIENT_OCCLUSION": {
      "name": "FR_RENDER_MODE_AMBIENT_OCCLUSION",
      "value": "0x9"
    },
    "FR_RENDER_MODE_DIFFUSE": {
      "name": "FR_RENDER_MODE_DIFFUSE",
      "value": "0x0a"
    },
    "FR_CAMERA_MODE_PERSPECTIVE": {
      "name": "FR_CAMERA_MODE_PERSPECTIVE",
      "value": "0x1"
    },
    "FR_CAMERA_MODE_ORTHOGRAPHIC": {
      "name": "FR_CAMERA_MODE_ORTHOGRAPHIC",
      "value": "0x2"
    },
    "FR_CAMERA_MODE_LATITUDE_LONGITUDE_360": {
      "name": "FR_CAMERA_MODE_LATITUDE_LONGITUDE_360",
      "value": "0x3"
    },
    "FR_CAMERA_MODE_LATITUDE_LONGITUDE_STEREO": {
      "name": "FR_CAMERA_MODE_LATITUDE_LONGITUDE_STEREO",
      "value": "0x4"
    },
    "FR_CAMERA_MODE_CUBEMAP": {
      "name": "FR_CAMERA_MODE_CUBEMAP",
      "value": "0x5"
    },
    "FR_CAMERA_MODE_CUBEMAP_STEREO": {
      "name": "FR_CAMERA_MODE_CUBEMAP_STEREO",
      "value": "0x6"
    },
    "FR_CAMERA_MODE_FISHEYE": {
      "name": "FR_CAMERA_MODE_FISHEYE",
      "value": "0x7"
    },
    "FR_TONEMAPPING_OPERATOR_NONE": {
      "name": "FR_TONEMAPPING_OPERATOR_NONE",
      "value": "0x0"
    },
    "FR_TONEMAPPING_OPERATOR_LINEAR": {
      "name": "FR_TONEMAPPING_OPERATOR_LINEAR",
      "value": "0x1"
    },
    "FR_TONEMAPPING_OPERATOR_PHOTOLINEAR": {
      "name": "FR_TONEMAPPING_OPERATOR_PHOTOLINEAR",
      "value": "0x2"
    },
    "FR_TONEMAPPING_OPERATOR_AUTOLINEAR": {
      "name": "FR_TONEMAPPING_OPERATOR_AUTOLINEAR",
      "value": "0x3"
    },
    "FR_TONEMAPPING_OPERATOR_MAXWHITE": {
      "name": "FR_TONEMAPPING_OPERATOR_MAXWHITE",
      "value": "0x4"
    },
    "FR_TONEMAPPING_OPERATOR_REINHARD02": {
      "name": "FR_TONEMAPPING_OPERATOR_REINHARD02",
      "value": "0x5"
    },
    "FR_TONEMAPPING_OPERATOR_EXPONENTIAL": {
      "name": "FR_TONEMAPPING_OPERATOR_EXPONENTIAL",
      "value": "0x6"
    },
    "FR_VOLUME_TYPE_NONE": {
      "name": "FR_VOLUME_TYPE_NONE",
      "value": "0xFFFF"
    },
    "FR_VOLUME_TYPE_HOMOGENEOUS": {
      "name": "FR_VOLUME_TYPE_HOMOGENEOUS",
      "value": "0x0"
    },
    "FR_VOLUME_TYPE_HETEROGENEOUS": {
      "name": "FR_VOLUME_TYPE_HETEROGENEOUS",
      "value": "0x1"
    },
    "FR_MATERIAL_NODE_TYPE": {
      "name": "FR_MATERIAL_NODE_TYPE",
      "value": "0x1101"
    },
    "FR_MATERIAL_NODE_SYSTEM": {
      "name": "FR_MATERIAL_NODE_SYSTEM",
      "value": "0x1102"
    },
    "FR_MATERIAL_NODE_INPUT_COUNT": {
      "name": "FR_MATERIAL_NODE_INPUT_COUNT",
      "value": "0x1103"
    },
    "FR_MATERIAL_NODE_INPUT_NAME": {
      "name": "FR_MATERIAL_NODE_INPUT_NAME",
      "value": "0x1103"
    },
    "FR_MATERIAL_NODE_INPUT_NAME_STRING": {
      "name": "FR_MATERIAL_NODE_INPUT_NAME_STRING",
      "value": "0x1104"
    },
    "FR_MATERIAL_NODE_INPUT_DESCRIPTION": {
      "name": "FR_MATERIAL_NODE_INPUT_DESCRIPTION",
      "value": "0x1105"
    },
    "FR_MATERIAL_NODE_INPUT_VALUE": {
      "name": "FR_MATERIAL_NODE_INPUT_VALUE",
      "value": "0x1106"
    },
    "FR_MATERIAL_NODE_INPUT_TYPE": {
      "name": "FR_MATERIAL_NODE_INPUT_TYPE",
      "value": "0x1107"
    },
    "FR_MATERIAL_NODE_DIFFUSE": {
      "name": "FR_MATERIAL_NODE_DIFFUSE",
      "value": "0x1"
    },
    "FR_MATERIAL_NODE_MICROFACET": {
      "name": "FR_MATERIAL_NODE_MICROFACET",
      "value": "0x2"
    },
    "FR_MATERIAL_NODE_REFLECTION": {
      "name": "FR_MATERIAL_NODE_REFLECTION",
      "value": "0x3"
    },
    "FR_MATERIAL_NODE_REFRACTION": {
      "name": "FR_MATERIAL_NODE_REFRACTION",
      "value": "0x4"
    },
    "FR_MATERIAL_NODE_MICROFACET_REFRACTION": {
      "name": "FR_MATERIAL_NODE_MICROFACET_REFRACTION",
      "value": "0x5"
    },
    "FR_MATERIAL_NODE_TRANSPARENT": {
      "name": "FR_MATERIAL_NODE_TRANSPARENT",
      "value": "0x6"
    },
    "FR_MATERIAL_NODE_EMISSIVE": {
      "name": "FR_MATERIAL_NODE_EMISSIVE",
      "value": "0x7"
    },
    "FR_MATERIAL_NODE_WARD": {
      "name": "FR_MATERIAL_NODE_WARD",
      "value": "0x8"
    },
    "FR_MATERIAL_NODE_ADD": {
      "name": "FR_MATERIAL_NODE_ADD",
      "value": "0x9"
    },
    "FR_MATERIAL_NODE_BLEND": {
      "name": "FR_MATERIAL_NODE_BLEND",
      "value": "0xA"
    },
    "FR_MATERIAL_NODE_ARITHMETIC": {
      "name": "FR_MATERIAL_NODE_ARITHMETIC",
      "value": "0xB"
    },
    "FR_MATERIAL_NODE_FRESNEL": {
      "name": "FR_MATERIAL_NODE_FRESNEL",
      "value": "0xC"
    },
    "FR_MATERIAL_NODE_NORMAL_MAP": {
      "name": "FR_MATERIAL_NODE_NORMAL_MAP",
      "value": "0xD"
    },
    "FR_MATERIAL_NODE_IMAGE_TEXTURE": {
      "name": "FR_MATERIAL_NODE_IMAGE_TEXTURE",
      "value": "0xE"
    },
    "FR_MATERIAL_NODE_NOISE2D_TEXTURE": {
      "name": "FR_MATERIAL_NODE_NOISE2D_TEXTURE",
      "value": "0xF"
    },
    "FR_MATERIAL_NODE_DOT_TEXTURE": {
      "name": "FR_MATERIAL_NODE_DOT_TEXTURE",
      "value": "0x10"
    },
    "FR_MATERIAL_NODE_GRADIENT_TEXTURE": {
      "name": "FR_MATERIAL_NODE_GRADIENT_TEXTURE",
      "value": "0x11"
    },
    "FR_MATERIAL_NODE_CHECKER_TEXTURE": {
      "name": "FR_MATERIAL_NODE_CHECKER_TEXTURE",
      "value": "0x12"
    },
    "FR_MATERIAL_NODE_CONSTANT_TEXTURE": {
      "name": "FR_MATERIAL_NODE_CONSTANT_TEXTURE",
      "value": "0x13"
    },
    "FR_MATERIAL_NODE_INPUT_LOOKUP": {
      "name": "FR_MATERIAL_NODE_INPUT_LOOKUP",
      "value": "0x14"
    },
    "FR_MATERIAL_NODE_STANDARD": {
      "name": "FR_MATERIAL_NODE_STANDARD",
      "value": "0x15"
    },
    "FR_MATERIAL_NODE_BLEND_VALUE": {
      "name": "FR_MATERIAL_NODE_BLEND_VALUE",
      "value": "0x16"
    },
    "FR_MATERIAL_NODE_PASSTHROUGH": {
      "name": "FR_MATERIAL_NODE_PASSTHROUGH",
      "value": "0x17"
    },
    "FR_MATERIAL_NODE_ORENNAYAR": {
      "name": "FR_MATERIAL_NODE_ORENNAYAR",
      "value": "0x18"
    },
    "FR_MATERIAL_NODE_FRESNEL_SCHLICK": {
      "name": "FR_MATERIAL_NODE_FRESNEL_SCHLICK",
      "value": "0x19"
    },
    "FR_MATERIAL_NODE_DIFFUSE_REFRACTION": {
      "name": "FR_MATERIAL_NODE_DIFFUSE_REFRACTION",
      "value": "0x1B"
    },
    "FR_MATERIAL_NODE_BUMP_MAP": {
      "name": "FR_MATERIAL_NODE_BUMP_MAP",
      "value": "0x1C"
    },
    "FR_MATERIAL_NODE_VOLUME": {
      "name": "FR_MATERIAL_NODE_VOLUME",
      "value": "0x1D"
    },
    "FR_MATERIAL_NODE_MICROFACET_ANISOTROPIC_REFLECTION": {
      "name": "FR_MATERIAL_NODE_MICROFACET_ANISOTROPIC_REFLECTION",
      "value": "0x1E"
    },
    "FR_MATERIAL_NODE_MICROFACET_ANISOTROPIC_REFRACTION": {
      "name": "FR_MATERIAL_NODE_MICROFACET_ANISOTROPIC_REFRACTION",
      "value": "0x1F"
    },
    "FR_MATERIAL_NODE_TWOSIDED": {
      "name": "FR_MATERIAL_NODE_TWOSIDED",
      "value": "0x20"
    },
    "FR_MATERIAL_NODE_UV_PROJECT": {
      "name": "FR_MATERIAL_NODE_UV_PROJECT",
      "value": "0x21"
    },
    "FR_MATERIAL_NODE_MICROFACET_BECKMANN": {
      "name": "FR_MATERIAL_NODE_MICROFACET_BECKMANN",
      "value": "0x22"
    },
    "FR_MATERIAL_NODE_PHONG": {
      "name": "FR_MATERIAL_NODE_PHONG",
      "value": "0x23"
    },
    "FR_MATERIAL_NODE_BUFFER_SAMPLER": {
      "name": "FR_MATERIAL_NODE_BUFFER_SAMPLER",
      "value": "0x24"
    },
    "FR_MATERIAL_INPUT_COLOR": {
      "name": "FR_MATERIAL_INPUT_COLOR",
      "value": "0x0"
    },
    "FR_MATERIAL_INPUT_COLOR0": {
      "name": "FR_MATERIAL_INPUT_COLOR0",
      "value": "0x1"
    },
    "FR_MATERIAL_INPUT_COLOR1": {
      "name": "FR_MATERIAL_INPUT_COLOR1",
      "value": "0x2"
    },
    "FR_MATERIAL_INPUT_NORMAL": {
      "name": "FR_MATERIAL_INPUT_NORMAL",
      "value": "0x3"
    },
    "FR_MATERIAL_INPUT_UV": {
      "name": "FR_MATERIAL_INPUT_UV",
      "value": "0x4"
    },
    "FR_MATERIAL_INPUT_DATA": {
      "name": "FR_MATERIAL_INPUT_DATA",
      "value": "0x5"
    },
    "FR_MATERIAL_INPUT_ROUGHNESS": {
      "name": "FR_MATERIAL_INPUT_ROUGHNESS",
      "value": "0x6"
    },
    "FR_MATERIAL_INPUT_IOR": {
      "name": "FR_MATERIAL_INPUT_IOR",
      "value": "0x7"
    },
    "FR_MATERIAL_INPUT_ROUGHNESS_X": {
      "name": "FR_MATERIAL_INPUT_ROUGHNESS_X",
      "value": "0x8"
    },
    "FR_MATERIAL_INPUT_ROUGHNESS_Y": {
      "name": "FR_MATERIAL_INPUT_ROUGHNESS_Y",
      "value": "0x9"
    },
    "FR_MATERIAL_INPUT_ROTATION": {
      "name": "FR_MATERIAL_INPUT_ROTATION",
      "value": "0xA"
    },
    "FR_MATERIAL_INPUT_WEIGHT": {
      "name": "FR_MATERIAL_INPUT_WEIGHT",
      "value": "0xB"
    },
    "FR_MATERIAL_INPUT_OP": {
      "name": "FR_MATERIAL_INPUT_OP",
      "value": "0xC"
    },
    "FR_MATERIAL_INPUT_INVEC": {
      "name": "FR_MATERIAL_INPUT_INVEC",
      "value": "0xD"
    },
    "FR_MATERIAL_INPUT_UV_SCALE": {
      "name": "FR_MATERIAL_INPUT_UV_SCALE",
      "value": "0xE"
    },
    "FR_MATERIAL_INPUT_VALUE": {
      "name": "FR_MATERIAL_INPUT_VALUE",
      "value": "0xF"
    },
    "FR_MATERIAL_INPUT_REFLECTANCE": {
      "name": "FR_MATERIAL_INPUT_REFLECTANCE",
      "value": "0x10"
    },
    "FR_MATERIAL_INPUT_SCALE": {
      "name": "FR_MATERIAL_INPUT_SCALE",
      "value": "0x11"
    },
    "FR_MATERIAL_INPUT_SCATTERING": {
      "name": "FR_MATERIAL_INPUT_SCATTERING",
      "value": "0x12"
    },
    "FR_MATERIAL_INPUT_ABSORBTION": {
      "name": "FR_MATERIAL_INPUT_ABSORBTION",
      "value": "0x13"
    },
    "FR_MATERIAL_INPUT_EMISSION": {
      "name": "FR_MATERIAL_INPUT_EMISSION",
      "value": "0x14"
    },
    "FR_MATERIAL_INPUT_G": {
      "name": "FR_MATERIAL_INPUT_G",
      "value": "0x15"
    },
    "FR_MATERIAL_INPUT_MULTISCATTER": {
      "name": "FR_MATERIAL_INPUT_MULTISCATTER",
      "value": "0x16"
    },
    "FR_MATERIAL_INPUT_COLOR2": {
      "name": "FR_MATERIAL_INPUT_COLOR2",
      "value": "0x17"
    },
    "FR_MATERIAL_INPUT_COLOR3": {
      "name": "FR_MATERIAL_INPUT_COLOR3",
      "value": "0x18"
    },
    "FR_MATERIAL_INPUT_ANISOTROPIC": {
      "name": "FR_MATERIAL_INPUT_ANISOTROPIC",
      "value": "0x19"
    },
    "FR_MATERIAL_INPUT_FRONTFACE": {
      "name": "FR_MATERIAL_INPUT_FRONTFACE",
      "value": "0x1a"
    },
    "FR_MATERIAL_INPUT_BACKFACE": {
      "name": "FR_MATERIAL_INPUT_BACKFACE",
      "value": "0x1b"
    },
    "FR_MATERIAL_INPUT_ORIGIN": {
      "name": "FR_MATERIAL_INPUT_ORIGIN",
      "value": "0x1c"
    },
    "FR_MATERIAL_INPUT_ZAXIS": {
      "name": "FR_MATERIAL_INPUT_ZAXIS",
      "value": "0x1d"
    },
    "FR_MATERIAL_INPUT_XAXIS": {
      "name": "FR_MATERIAL_INPUT_XAXIS",
      "value": "0x1e"
    },
    "FR_MATERIAL_INPUT_THRESHOLD": {
      "name": "FR_MATERIAL_INPUT_THRESHOLD",
      "value": "0x1f"
    },
    "FR_MATERIAL_INPUT_MAX": {
      "name": "FR_MATERIAL_INPUT_MAX",
      "value": "0x20"
    },
    "FR_MATERIAL_STANDARD_INPUT_DIFFUSE_COLOR": {
      "name": "FR_MATERIAL_STANDARD_INPUT_DIFFUSE_COLOR",
      "value": "0x112"
    },
    "FR_MATERIAL_STANDARD_INPUT_DIFFUSE_NORMAL": {
      "name": "FR_MATERIAL_STANDARD_INPUT_DIFFUSE_NORMAL",
      "value": "0x113"
    },
    "FR_MATERIAL_STANDARD_INPUT_GLOSSY_COLOR": {
      "name": "FR_MATERIAL_STANDARD_INPUT_GLOSSY_COLOR",
      "value": "0x114"
    },
    "FR_MATERIAL_STANDARD_INPUT_GLOSSY_NORMAL": {
      "name": "FR_MATERIAL_STANDARD_INPUT_GLOSSY_NORMAL",
      "value": "0x115"
    },
    "FR_MATERIAL_STANDARD_INPUT_GLOSSY_ROUGHNESS_X": {
      "name": "FR_MATERIAL_STANDARD_INPUT_GLOSSY_ROUGHNESS_X",
      "value": "0x116"
    },
    "FR_MATERIAL_STANDARD_INPUT_CLEARCOAT_COLOR": {
      "name": "FR_MATERIAL_STANDARD_INPUT_CLEARCOAT_COLOR",
      "value": "0x117"
    },
    "FR_MATERIAL_STANDARD_INPUT_CLEARCOAT_NORMAL": {
      "name": "FR_MATERIAL_STANDARD_INPUT_CLEARCOAT_NORMAL",
      "value": "0x118"
    },
    "FR_MATERIAL_STANDARD_INPUT_REFRACTION_COLOR": {
      "name": "FR_MATERIAL_STANDARD_INPUT_REFRACTION_COLOR",
      "value": "0x119"
    },
    "FR_MATERIAL_STANDARD_INPUT_REFRACTION_NORMAL": {
      "name": "FR_MATERIAL_STANDARD_INPUT_REFRACTION_NORMAL",
      "value": "0x11A"
    },
    "FR_MATERIAL_STANDARD_INPUT_REFRACTION_IOR": {
      "name": "FR_MATERIAL_STANDARD_INPUT_REFRACTION_IOR",
      "value": "0x11C"
    },
    "FR_MATERIAL_STANDARD_INPUT_DIFFUSE_TO_REFRACTION_WEIGHT": {
      "name": "FR_MATERIAL_STANDARD_INPUT_DIFFUSE_TO_REFRACTION_WEIGHT",
      "value": "0x11D"
    },
    "FR_MATERIAL_STANDARD_INPUT_GLOSSY_TO_DIFFUSE_WEIGHT": {
      "name": "FR_MATERIAL_STANDARD_INPUT_GLOSSY_TO_DIFFUSE_WEIGHT",
      "value": "0x11E"
    },
    "FR_MATERIAL_STANDARD_INPUT_CLEARCOAT_TO_GLOSSY_WEIGHT": {
      "name": "FR_MATERIAL_STANDARD_INPUT_CLEARCOAT_TO_GLOSSY_WEIGHT",
      "value": "0x11F"
    },
    "FR_MATERIAL_STANDARD_INPUT_TRANSPARENCY": {
      "name": "FR_MATERIAL_STANDARD_INPUT_TRANSPARENCY",
      "value": "0x120"
    },
    "FR_MATERIAL_STANDARD_INPUT_TRANSPARENCY_COLOR": {
      "name": "FR_MATERIAL_STANDARD_INPUT_TRANSPARENCY_COLOR",
      "value": "0x121"
    },
    "FR_MATERIAL_STANDARD_INPUT_REFRACTION_ROUGHNESS": {
      "name": "FR_MATERIAL_STANDARD_INPUT_REFRACTION_ROUGHNESS",
      "value": "0x122"
    },
    "FR_MATERIAL_STANDARD_INPUT_GLOSSY_ROUGHNESS_Y": {
      "name": "FR_MATERIAL_STANDARD_INPUT_GLOSSY_ROUGHNESS_Y",
      "value": "0x123"
    },
    "FR_MATERIAL_INPUT_RASTER_METALLIC": {
      "name": "FR_MATERIAL_INPUT_RASTER_METALLIC",
      "value": "0x901"
    },
    "FR_MATERIAL_INPUT_RASTER_ROUGHNESS": {
      "name": "FR_MATERIAL_INPUT_RASTER_ROUGHNESS",
      "value": "0x902"
    },
    "FR_MATERIAL_INPUT_RASTER_SUBSURFACE": {
      "name": "FR_MATERIAL_INPUT_RASTER_SUBSURFACE",
      "value": "0x903"
    },
    "FR_MATERIAL_INPUT_RASTER_ANISOTROPIC": {
      "name": "FR_MATERIAL_INPUT_RASTER_ANISOTROPIC",
      "value": "0x904"
    },
    "FR_MATERIAL_INPUT_RASTER_SPECULAR": {
      "name": "FR_MATERIAL_INPUT_RASTER_SPECULAR",
      "value": "0x905"
    },
    "FR_MATERIAL_INPUT_RASTER_SPECULARTINT": {
      "name": "FR_MATERIAL_INPUT_RASTER_SPECULARTINT",
      "value": "0x906"
    },
    "FR_MATERIAL_INPUT_RASTER_SHEEN": {
      "name": "FR_MATERIAL_INPUT_RASTER_SHEEN",
      "value": "0x907"
    },
    "FR_MATERIAL_INPUT_RASTER_SHEENTINT": {
      "name": "FR_MATERIAL_INPUT_RASTER_SHEENTINT",
      "value": "0x908"
    },
    "FR_MATERIAL_INPUT_RASTER_CLEARCOAT": {
      "name": "FR_MATERIAL_INPUT_RASTER_CLEARCOAT",
      "value": "0x90A"
    },
    "FR_MATERIAL_INPUT_RASTER_CLEARCOATGLOSS": {
      "name": "FR_MATERIAL_INPUT_RASTER_CLEARCOATGLOSS",
      "value": "0x90B"
    },
    "FR_MATERIAL_INPUT_RASTER_COLOR": {
      "name": "FR_MATERIAL_INPUT_RASTER_COLOR",
      "value": "0x90C"
    },
    "FR_MATERIAL_INPUT_RASTER_NORMAL": {
      "name": "FR_MATERIAL_INPUT_RASTER_NORMAL",
      "value": "0x90D"
    },
    "FR_MATERIAL_NODE_OP_ADD": {
      "name": "FR_MATERIAL_NODE_OP_ADD",
      "value": "0x00"
    },
    "FR_MATERIAL_NODE_OP_SUB": {
      "name": "FR_MATERIAL_NODE_OP_SUB",
      "value": "0x01"
    },
    "FR_MATERIAL_NODE_OP_MUL": {
      "name": "FR_MATERIAL_NODE_OP_MUL",
      "value": "0x02"
    },
    "FR_MATERIAL_NODE_OP_DIV": {
      "name": "FR_MATERIAL_NODE_OP_DIV",
      "value": "0x03"
    },
    "FR_MATERIAL_NODE_OP_SIN": {
      "name": "FR_MATERIAL_NODE_OP_SIN",
      "value": "0x04"
    },
    "FR_MATERIAL_NODE_OP_COS": {
      "name": "FR_MATERIAL_NODE_OP_COS",
      "value": "0x05"
    },
    "FR_MATERIAL_NODE_OP_TAN": {
      "name": "FR_MATERIAL_NODE_OP_TAN",
      "value": "0x06"
    },
    "FR_MATERIAL_NODE_OP_SELECT_X": {
      "name": "FR_MATERIAL_NODE_OP_SELECT_X",
      "value": "0x07"
    },
    "FR_MATERIAL_NODE_OP_SELECT_Y": {
      "name": "FR_MATERIAL_NODE_OP_SELECT_Y",
      "value": "0x08"
    },
    "FR_MATERIAL_NODE_OP_SELECT_Z": {
      "name": "FR_MATERIAL_NODE_OP_SELECT_Z",
      "value": "0x09"
    },
    "FR_MATERIAL_NODE_OP_COMBINE": {
      "name": "FR_MATERIAL_NODE_OP_COMBINE",
      "value": "0x0A"
    },
    "FR_MATERIAL_NODE_OP_DOT3": {
      "name": "FR_MATERIAL_NODE_OP_DOT3",
      "value": "0x0B"
    },
    "FR_MATERIAL_NODE_OP_CROSS3": {
      "name": "FR_MATERIAL_NODE_OP_CROSS3",
      "value": "0x0C"
    },
    "FR_MATERIAL_NODE_OP_LENGTH3": {
      "name": "FR_MATERIAL_NODE_OP_LENGTH3",
      "value": "0x0D"
    },
    "FR_MATERIAL_NODE_OP_NORMALIZE3": {
      "name": "FR_MATERIAL_NODE_OP_NORMALIZE3",
      "value": "0x0E"
    },
    "FR_MATERIAL_NODE_OP_POW": {
      "name": "FR_MATERIAL_NODE_OP_POW",
      "value": "0x0F"
    },
    "FR_MATERIAL_NODE_OP_ACOS": {
      "name": "FR_MATERIAL_NODE_OP_ACOS",
      "value": "0x10"
    },
    "FR_MATERIAL_NODE_OP_ASIN": {
      "name": "FR_MATERIAL_NODE_OP_ASIN",
      "value": "0x11"
    },
    "FR_MATERIAL_NODE_OP_ATAN": {
      "name": "FR_MATERIAL_NODE_OP_ATAN",
      "value": "0x12"
    },
    "FR_MATERIAL_NODE_OP_AVERAGE_XYZ": {
      "name": "FR_MATERIAL_NODE_OP_AVERAGE_XYZ",
      "value": "0x13"
    },
    "FR_MATERIAL_NODE_OP_AVERAGE": {
      "name": "FR_MATERIAL_NODE_OP_AVERAGE",
      "value": "0x14"
    },
    "FR_MATERIAL_NODE_OP_MIN": {
      "name": "FR_MATERIAL_NODE_OP_MIN",
      "value": "0x15"
    },
    "FR_MATERIAL_NODE_OP_MAX": {
      "name": "FR_MATERIAL_NODE_OP_MAX",
      "value": "0x16"
    },
    "FR_MATERIAL_NODE_OP_FLOOR": {
      "name": "FR_MATERIAL_NODE_OP_FLOOR",
      "value": "0x17"
    },
    "FR_MATERIAL_NODE_OP_MOD": {
      "name": "FR_MATERIAL_NODE_OP_MOD",
      "value": "0x18"
    },
    "FR_MATERIAL_NODE_OP_ABS": {
      "name": "FR_MATERIAL_NODE_OP_ABS",
      "value": "0x19"
    },
    "FR_MATERIAL_NODE_OP_SHUFFLE_YZWX": {
      "name": "FR_MATERIAL_NODE_OP_SHUFFLE_YZWX",
      "value": "0x1a"
    },
    "FR_MATERIAL_NODE_OP_SHUFFLE_ZWXY": {
      "name": "FR_MATERIAL_NODE_OP_SHUFFLE_ZWXY",
      "value": "0x1b"
    },
    "FR_MATERIAL_NODE_OP_SHUFFLE_WXYZ": {
      "name": "FR_MATERIAL_NODE_OP_SHUFFLE_WXYZ",
      "value": "0x1c"
    },
    "FR_MATERIAL_NODE_OP_MAT_MUL": {
      "name": "FR_MATERIAL_NODE_OP_MAT_MUL",
      "value": "0x1d"
    },
    "FR_MATERIAL_NODE_OP_SELECT_W": {
      "name": "FR_MATERIAL_NODE_OP_SELECT_W",
      "value": "0x1e"
    },
    "FR_MATERIAL_NODE_OP_DOT4": {
      "name": "FR_MATERIAL_NODE_OP_DOT4",
      "value": "0x1f"
    },
    "FR_MATERIAL_NODE_LOOKUP_UV": {
      "name": "FR_MATERIAL_NODE_LOOKUP_UV",
      "value": "0x0"
    },
    "FR_MATERIAL_NODE_LOOKUP_N": {
      "name": "FR_MATERIAL_NODE_LOOKUP_N",
      "value": "0x1"
    },
    "FR_MATERIAL_NODE_LOOKUP_P": {
      "name": "FR_MATERIAL_NODE_LOOKUP_P",
      "value": "0x2"
    },
    "FR_MATERIAL_NODE_LOOKUP_INVEC": {
      "name": "FR_MATERIAL_NODE_LOOKUP_INVEC",
      "value": "0x3"
    },
    "FR_MATERIAL_NODE_LOOKUP_OUTVEC": {
      "name": "FR_MATERIAL_NODE_LOOKUP_OUTVEC",
      "value": "0x4"
    },
    "FR_MATERIAL_NODE_LOOKUP_UV1": {
      "name": "FR_MATERIAL_NODE_LOOKUP_UV1",
      "value": "0x5"
    },
    "FR_POST_EFFECT_TYPE": {
      "name": "FR_POST_EFFECT_TYPE",
      "value": "0x0"
    },
    "FR_POST_EFFECT_WHITE_BALANCE_COLOR_SPACE": {
      "name": "FR_POST_EFFECT_WHITE_BALANCE_COLOR_SPACE",
      "value": "0x4"
    },
    "FR_POST_EFFECT_WHITE_BALANCE_COLOR_TEMPERATURE": {
      "name": "FR_POST_EFFECT_WHITE_BALANCE_COLOR_TEMPERATURE",
      "value": "0x5"
    },
    "FR_POST_EFFECT_SIMPLE_TONEMAP_EXPOSURE": {
      "name": "FR_POST_EFFECT_SIMPLE_TONEMAP_EXPOSURE",
      "value": "0x6"
    },
    "FR_POST_EFFECT_SIMPLE_TONEMAP_CONTRAST": {
      "name": "FR_POST_EFFECT_SIMPLE_TONEMAP_CONTRAST",
      "value": "0x7"
    },
    "FR_POST_EFFECT_SIMPLE_TONEMAP_ENABLE_TONEMAP": {
      "name": "FR_POST_EFFECT_SIMPLE_TONEMAP_ENABLE_TONEMAP",
      "value": "0x8"
    },
    "FR_AOV_COLOR": {
      "name": "FR_AOV_COLOR",
      "value": "0x0"
    },
    "FR_AOV_OPACITY": {
      "name": "FR_AOV_OPACITY",
      "value": "0x1"
    },
    "FR_AOV_WORLD_COORDINATE": {
      "name": "FR_AOV_WORLD_COORDINATE",
      "value": "0x2"
    },
    "FR_AOV_UV": {
      "name": "FR_AOV_UV",
      "value": "0x3"
    },
    "FR_AOV_MATERIAL_IDX": {
      "name": "FR_AOV_MATERIAL_IDX",
      "value": "0x4"
    },
    "FR_AOV_GEOMETRIC_NORMAL": {
      "name": "FR_AOV_GEOMETRIC_NORMAL",
      "value": "0x5"
    },
    "FR_AOV_SHADING_NORMAL": {
      "name": "FR_AOV_SHADING_NORMAL",
      "value": "0x6"
    },
    "FR_AOV_DEPTH": {
      "name": "FR_AOV_DEPTH",
      "value": "0x7"
    },
    "FR_AOV_OBJECT_ID": {
      "name": "FR_AOV_OBJECT_ID",
      "value": "0x8"
    },
    "FR_AOV_OBJECT_GROUP_ID": {
      "name": "FR_AOV_OBJECT_GROUP_ID",
      "value": "0x9"
    },
    "FR_AOV_SHADOW_CATCHER": {
      "name": "FR_AOV_SHADOW_CATCHER",
      "value": "0x0a"
    },
    "FR_AOV_BACKGROUND": {
      "name": "FR_AOV_BACKGROUND",
      "value": "0x0b"
    },
    "FR_AOV_EMISSION": {
      "name": "FR_AOV_EMISSION",
      "value": "0x0c"
    },
    "FR_AOV_VELOCITY": {
      "name": "FR_AOV_VELOCITY",
      "value": "0x0d"
    },
    "FR_AOV_DIRECT_ILLUMINATION": {
      "name": "FR_AOV_DIRECT_ILLUMINATION",
      "value": "0x0e"
    },
    "FR_AOV_INDIRECT_ILLUMINATION": {
      "name": "FR_AOV_INDIRECT_ILLUMINATION",
      "value": "0x0f"
    },
    "FR_AOV_MAX": {
      "name": "FR_AOV_MAX",
      "value": "0x10"
    },
    "FR_POST_EFFECT_TONE_MAP": {
      "name": "FR_POST_EFFECT_TONE_MAP",
      "value": "0x0"
    },
    "FR_POST_EFFECT_WHITE_BALANCE": {
      "name": "FR_POST_EFFECT_WHITE_BALANCE",
      "value": "0x1"
    },
    "FR_POST_EFFECT_SIMPLE_TONEMAP": {
      "name": "FR_POST_EFFECT_SIMPLE_TONEMAP",
      "value": "0x2"
    },
    "FR_POST_EFFECT_NORMALIZATION": {
      "name": "FR_POST_EFFECT_NORMALIZATION",
      "value": "0x3"
    },
    "FR_POST_EFFECT_GAMMA_CORRECTION": {
      "name": "FR_POST_EFFECT_GAMMA_CORRECTION",
      "value": "0x4"
    },
    "FR_COLOR_SPACE_SRGB": {
      "name": "FR_COLOR_SPACE_SRGB",
      "value": "0x1"
    },
    "FR_COLOR_SPACE_ADOBE_RGB": {
      "name": "FR_COLOR_SPACE_ADOBE_RGB",
      "value": "0x2"
    },
    "FR_COLOR_SPACE_REC2020": {
      "name": "FR_COLOR_SPACE_REC2020",
      "value": "0x3"
    },
    "FR_COLOR_SPACE_DCIP3": {
      "name": "FR_COLOR_SPACE_DCIP3",
      "value": "0x4"
    },
    "FR_MATERIAL_NODE_INPUT_TYPE_FLOAT4": {
      "name": "FR_MATERIAL_NODE_INPUT_TYPE_FLOAT4",
      "value": "0x1"
    },
    "FR_MATERIAL_NODE_INPUT_TYPE_UINT": {
      "name": "FR_MATERIAL_NODE_INPUT_TYPE_UINT",
      "value": "0x2"
    },
    "FR_MATERIAL_NODE_INPUT_TYPE_NODE": {
      "name": "FR_MATERIAL_NODE_INPUT_TYPE_NODE",
      "value": "0x3"
    },
    "FR_MATERIAL_NODE_INPUT_TYPE_IMAGE": {
      "name": "FR_MATERIAL_NODE_INPUT_TYPE_IMAGE",
      "value": "0x4"
    },
    "FR_MATERIAL_NODE_INPUT_TYPE_BUFFER": {
      "name": "FR_MATERIAL_NODE_INPUT_TYPE_BUFFER",
      "value": "0x5"
    },
    "FR_SUBDIV_BOUNDARY_INTERFOP_TYPE_EDGE_AND_CORNER": {
      "name": "FR_SUBDIV_BOUNDARY_INTERFOP_TYPE_EDGE_AND_CORNER",
      "value": "0x1"
    },
    "FR_SUBDIV_BOUNDARY_INTERFOP_TYPE_EDGE_ONLY": {
      "name": "FR_SUBDIV_BOUNDARY_INTERFOP_TYPE_EDGE_ONLY",
      "value": "0x2"
    },
    "FR_IMAGE_WRAP_TYPE_REPEAT": {
      "name": "FR_IMAGE_WRAP_TYPE_REPEAT",
      "value": "0x1"
    },
    "FR_IMAGE_WRAP_TYPE_MIRRORED_REPEAT": {
      "name": "FR_IMAGE_WRAP_TYPE_MIRRORED_REPEAT",
      "value": "0x2"
    },
    "FR_IMAGE_WRAP_TYPE_CLAMP_TO_EDGE": {
      "name": "FR_IMAGE_WRAP_TYPE_CLAMP_TO_EDGE",
      "value": "0x3"
    },
    "FR_IMAGE_WRAP_TYPE_CLAMP_TO_BORDER": {
      "name": "FR_IMAGE_WRAP_TYPE_CLAMP_TO_BORDER",
      "value": "0x4"
    },
    "FR_IMAGE_WRAP_TYPE_CLAMP_ZERO": {
      "name": "FR_IMAGE_WRAP_TYPE_CLAMP_ZERO",
      "value": "0x5"
    },
    "FR_IMAGE_WRAP_TYPE_CLAMP_ONE": {
      "name": "FR_IMAGE_WRAP_TYPE_CLAMP_ONE",
      "value": "0x6"
    },
    "FR_IMAGE_FILTER_TYPE_NEAREST": {
      "name": "FR_IMAGE_FILTER_TYPE_NEAREST",
      "value": "0x1"
    },
    "FR_IMAGE_FILTER_TYPE_LINEAR": {
      "name": "FR_IMAGE_FILTER_TYPE_LINEAR",
      "value": "0x2"
    },
    "FR_MAX_AA_SAMPLES": {
      "name": "FR_MAX_AA_SAMPLES",
      "value": "32"
    },
    "FR_MAX_AA_GRID_SIZE": {
      "name": "FR_MAX_AA_GRID_SIZE",
      "value": "16"
    },
    "FR_COMPOSITE_TYPE": {
      "name": "FR_COMPOSITE_TYPE",
      "value": "0x1"
    },
    "FR_COMPOSITE_FRAMEBUFFER_INPUT_FB": {
      "name": "FR_COMPOSITE_FRAMEBUFFER_INPUT_FB",
      "value": "0x2"
    },
    "FR_COMPOSITE_NORMALIZE_INPUT_COLOR": {
      "name": "FR_COMPOSITE_NORMALIZE_INPUT_COLOR",
      "value": "0x3"
    },
    "FR_COMPOSITE_NORMALIZE_INPUT_SHADOWCATCHER": {
      "name": "FR_COMPOSITE_NORMALIZE_INPUT_SHADOWCATCHER",
      "value": "0x4"
    },
    "FR_COMPOSITE_CONSTANT_INPUT_VALUE": {
      "name": "FR_COMPOSITE_CONSTANT_INPUT_VALUE",
      "value": "0x5"
    },
    "FR_COMPOSITE_LERP_VALUE_INPUT_COLOR0": {
      "name": "FR_COMPOSITE_LERP_VALUE_INPUT_COLOR0",
      "value": "0x6"
    },
    "FR_COMPOSITE_LERP_VALUE_INPUT_COLOR1": {
      "name": "FR_COMPOSITE_LERP_VALUE_INPUT_COLOR1",
      "value": "0x7"
    },
    "FR_COMPOSITE_LERP_VALUE_INPUT_WEIGHT": {
      "name": "FR_COMPOSITE_LERP_VALUE_INPUT_WEIGHT",
      "value": "0x8"
    },
    "FR_COMPOSITE_ARITHMETIC_INPUT_COLOR0": {
      "name": "FR_COMPOSITE_ARITHMETIC_INPUT_COLOR0",
      "value": "0x9"
    },
    "FR_COMPOSITE_ARITHMETIC_INPUT_COLOR1": {
      "name": "FR_COMPOSITE_ARITHMETIC_INPUT_COLOR1",
      "value": "0x0a"
    },
    "FR_COMPOSITE_ARITHMETIC_INPUT_OP": {
      "name": "FR_COMPOSITE_ARITHMETIC_INPUT_OP",
      "value": "0x0b"
    },
    "FR_COMPOSITE_GAMMA_CORRECTION_INPUT_COLOR": {
      "name": "FR_COMPOSITE_GAMMA_CORRECTION_INPUT_COLOR",
      "value": "0x0c"
    },
    "FR_COMPOSITE_ARITHMETIC": {
      "name": "FR_COMPOSITE_ARITHMETIC",
      "value": "0x1"
    },
    "FR_COMPOSITE_LERP_VALUE": {
      "name": "FR_COMPOSITE_LERP_VALUE",
      "value": "0x2"
    },
    "FR_COMPOSITE_INVERSE": {
      "name": "FR_COMPOSITE_INVERSE",
      "value": "0x3"
    },
    "FR_COMPOSITE_NORMALIZE": {
      "name": "FR_COMPOSITE_NORMALIZE",
      "value": "0x4"
    },
    "FR_COMPOSITE_GAMMA_CORRECTION": {
      "name": "FR_COMPOSITE_GAMMA_CORRECTION",
      "value": "0x5"
    },
    "FR_COMPOSITE_EXPOSURE": {
      "name": "FR_COMPOSITE_EXPOSURE",
      "value": "0x6"
    },
    "FR_COMPOSITE_CONTRAST": {
      "name": "FR_COMPOSITE_CONTRAST",
      "value": "0x7"
    },
    "FR_COMPOSITE_SIDE_BY_SIDE": {
      "name": "FR_COMPOSITE_SIDE_BY_SIDE",
      "value": "0x8"
    },
    "FR_COMPOSITE_TONEMAP_ACES": {
      "name": "FR_COMPOSITE_TONEMAP_ACES",
      "value": "0x9"
    },
    "FR_COMPOSITE_TONEMAP_REINHARD": {
      "name": "FR_COMPOSITE_TONEMAP_REINHARD",
      "value": "0xa"
    },
    "FR_COMPOSITE_TONEMAP_LINEAR": {
      "name": "FR_COMPOSITE_TONEMAP_LINEAR",
      "value": "0xb"
    },
    "FR_COMPOSITE_FRAMEBUFFER": {
      "name": "FR_COMPOSITE_FRAMEBUFFER",
      "value": "0xc"
    },
    "FR_COMPOSITE_CONSTANT": {
      "name": "FR_COMPOSITE_CONSTANT",
      "value": "0xd"
    },
    "FR_HETEROVOLUME_SIZE_X": {
      "name": "FR_HETEROVOLUME_SIZE_X",
      "value": "0x730"
    },
    "FR_HETEROVOLUME_SIZE_Y": {
      "name": "FR_HETEROVOLUME_SIZE_Y",
      "value": "0x731"
    },
    "FR_HETEROVOLUME_SIZE_Z": {
      "name": "FR_HETEROVOLUME_SIZE_Z",
      "value": "0x732"
    },
    "FR_HETEROVOLUME_DATA": {
      "name": "FR_HETEROVOLUME_DATA",
      "value": "0x733"
    },
    "FR_HETEROVOLUME_DATA_SIZEBYTE": {
      "name": "FR_HETEROVOLUME_DATA_SIZEBYTE",
      "value": "0x734"
    },
    "FR_HETEROVOLUME_TRANSFORM": {
      "name": "FR_HETEROVOLUME_TRANSFORM",
      "value": "0x735"
    },
    "FR_HETEROVOLUME_INDICES": {
      "name": "FR_HETEROVOLUME_INDICES",
      "value": "0x736"
    },
    "FR_HETEROVOLUME_INDICES_NUMBER": {
      "name": "FR_HETEROVOLUME_INDICES_NUMBER",
      "value": "0x737"
    },
    "FR_HETEROVOLUME_INDICES_TOPOLOGY": {
      "name": "FR_HETEROVOLUME_INDICES_TOPOLOGY",
      "value": "0x738"
    },
    "FR_HETEROVOLUME_INDICES_TOPOLOGY_I_U64": {
      "name": "FR_HETEROVOLUME_INDICES_TOPOLOGY_I_U64",
      "value": "0x750"
    },
    "FR_HETEROVOLUME_INDICES_TOPOLOGY_XYZ_U32": {
      "name": "FR_HETEROVOLUME_INDICES_TOPOLOGY_XYZ_U32",
      "value": "0x751"
    },
    "FR_HETEROVOLUME_INDICES_TOPOLOGY_I_S64": {
      "name": "FR_HETEROVOLUME_INDICES_TOPOLOGY_I_S64",
      "value": "0x752"
    },
    "FR_HETEROVOLUME_INDICES_TOPOLOGY_XYZ_S32": {
      "name": "FR_HETEROVOLUME_INDICES_TOPOLOGY_XYZ_S32",
      "value": "0x753"
    },
    "FR_FALSE": {
      "name": "FR_FALSE",
      "value": "0"
    },
    "FR_TRUE": {
      "name": "FR_TRUE",
      "value": "1"
    }
  },
  "types": {
    "rpr_bool": {
      "name": "rpr_bool",
      "kind": "typedef",
      "type": "int"
    },
    "rpr_char": {
      "name": "rpr_char",
      "kind": "typedef",
      "type": "char"
    },
    "rpr_double": {
      "name": "rpr_double",
      "kind": "typedef",
      "type": "double"
    },
    "rpr_float": {
      "name": "rpr_float",
      "kind": "typedef",
      "type": "float"
    },
    "rpr_int": {
      "name": "rpr_int",
      "kind": "typedef",
      "type": "int"
    },
    "rpr_long": {
      "name": "rpr_long",
      "kind": "typedef",
      "type": "long int"
    },
    "rpr_longlong": {
      "name": "rpr_longlong",
      "kind": "typedef",
      "type": "long long int"
    },
    "rpr_short": {
      "name": "rpr_short",
      "kind": "typedef",
      "type": "short int"
    },
    "rpr_uchar": {
      "name": "rpr_uchar",
      "kind": "typedef",
      "type": "unsigned char"
    },
    "rpr_uint": {
      "name": "rpr_uint",
      "kind": "typedef",
      "type": "unsigned int"
    },
    "rpr_ulong": {
      "name": "rpr_ulong",
      "kind": "typedef",
      "type": "long unsigned int"
    },
    "rpr_ushort": {
      "name": "rpr_ushort",
      "kind": "typedef",
      "type": "short unsigned int"
    },
    "_rpr_framebuffer_desc": {
      "name": "_rpr_framebuffer_desc",
      "kind": "struct",
      "fields": [
        {
          "name": "fb_width",
          "type": "rpr_uint"
        },
        {
          "name": "fb_height",
          "type": "rpr_uint"
        }
      ]
    },
    "_rpr_image_desc": {
      "name": "_rpr_image_desc",
      "kind": "struct",
      "fields": [
        {
          "name": "image_width",
          "type": "rpr_uint"
        },
        {
          "name": "image_height",
          "type": "rpr_uint"
        },
        {
          "name": "image_depth",
          "type": "rpr_uint"
        },
        {
          "name": "image_row_pitch",
          "type": "rpr_uint"
        },
        {
          "name": "image_slice_pitch",
          "type": "rpr_uint"
        }
      ]
    },
    "_rpr_render_statistics": {
      "name": "_rpr_render_statistics",
      "kind": "struct",
      "fields": [
        {
          "name": "gpumem_usage",
          "type": "rpr_longlong"
        },
        {
          "name": "gpumem_total",
          "type": "rpr_longlong"
        },
        {
          "name": "gpumem_max_allocation",
          "type": "rpr_longlong"
        },
        {
          "name": "sysmem_usage",
          "type": "rpr_longlong"
        }
      ]
    },
    "fr_bool": {
      "name": "fr_bool",
      "kind": "typedef",
      "type": "rpr_bool"
    },
    "fr_char": {
      "name": "fr_char",
      "kind": "typedef",
      "type": "rpr_char"
    },
    "fr_double": {
      "name": "fr_double",
      "kind": "typedef",
      "type": "rpr_double"
    },
    "fr_float": {
      "name": "fr_float",
      "kind": "typedef",
      "type": "rpr_float"
    },
    "fr_int": {
      "name": "fr_int",
      "kind": "typedef",
      "type": "rpr_int"
    },
    "fr_long": {
      "name": "fr_long",
      "kind": "typedef",
      "type": "rpr_long"
    },
    "fr_longlong": {
      "name": "fr_longlong",
      "kind": "typedef",
      "type": "rpr_longlong"
    },
    "fr_short": {
      "name": "fr_short",
      "kind": "typedef",
      "type": "rpr_short"
    },
    "fr_uchar": {
      "name": "fr_uchar",
      "kind": "typedef",
      "type": "rpr_uchar"
    },
    "fr_uint": {
      "name": "fr_uint",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "fr_ulong": {
      "name": "fr_ulong",
      "kind": "typedef",
      "type": "rpr_ulong"
    },
    "fr_ushort": {
      "name": "fr_ushort",
      "kind": "typedef",
      "type": "rpr_ushort"
    },
    "rpr_aa_filter": {
      "name": "rpr_aa_filter",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_aov": {
      "name": "rpr_aov",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_bitfield": {
      "name": "rpr_bitfield",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_buffer": {
      "name": "rpr_buffer",
      "kind": "typedef",
      "type": "void*"
    },
    "rpr_buffer_element_type": {
      "name": "rpr_buffer_element_type",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_buffer_info": {
      "name": "rpr_buffer_info",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_camera": {
      "name": "rpr_camera",
      "kind": "typedef",
      "type": "void*"
    },
    "rpr_camera_info": {
      "name": "rpr_camera_info",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_camera_mode": {
      "name": "rpr_camera_mode",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_channel_order": {
      "name": "rpr_channel_order",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_channel_type": {
      "name": "rpr_channel_type",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_color_space": {
      "name": "rpr_color_space",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_component_type": {
      "name": "rpr_component_type",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_composite": {
      "name": "rpr_composite",
      "kind": "typedef",
      "type": "void*"
    },
    "rpr_composite_info": {
      "name": "rpr_composite_info",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_composite_type": {
      "name": "rpr_composite_type",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_context": {
      "name": "rpr_context",
      "kind": "typedef",
      "type": "void*"
    },
    "rpr_context_info": {
      "name": "rpr_context_info",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_context_properties": {
      "name": "rpr_context_properties",
      "kind": "typedef",
      "type": "void*"
    },
    "rpr_context_type": {
      "name": "rpr_context_type",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_environment_override": {
      "name": "rpr_environment_override",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_framebuffer": {
      "name": "rpr_framebuffer",
      "kind": "typedef",
      "type": "void*"
    },
    "rpr_framebuffer_info": {
      "name": "rpr_framebuffer_info",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_hetero_volume": {
      "name": "rpr_hetero_volume",
      "kind": "typedef",
      "type": "void*"
    },
    "rpr_hetero_volume_indices_topology": {
      "name": "rpr_hetero_volume_indices_topology",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_image": {
      "name": "rpr_image",
      "kind": "typedef",
      "type": "void*"
    },
    "rpr_image_filter_type": {
      "name": "rpr_image_filter_type",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_image_info": {
      "name": "rpr_image_info",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_image_wrap_type": {
      "name": "rpr_image_wrap_type",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_light": {
      "name": "rpr_light",
      "kind": "typedef",
      "type": "void*"
    },
    "rpr_light_info": {
      "name": "rpr_light_info",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_light_type": {
      "name": "rpr_light_type",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_material_node": {
      "name": "rpr_material_node",
      "kind": "typedef",
      "type": "void*"
    },
    "rpr_material_node_arithmetic_operation": {
      "name": "rpr_material_node_arithmetic_operation",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_material_node_info": {
      "name": "rpr_material_node_info",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_material_node_input": {
      "name": "rpr_material_node_input",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_material_node_input_info": {
      "name": "rpr_material_node_input_info",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_material_node_lookup_value": {
      "name": "rpr_material_node_lookup_value",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_material_node_type": {
      "name": "rpr_material_node_type",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_material_system": {
      "name": "rpr_material_system",
      "kind": "typedef",
      "type": "void*"
    },
    "rpr_material_system_type": {
      "name": "rpr_material_system_type",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_mesh_info": {
      "name": "rpr_mesh_info",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_mesh_polygon_info": {
      "name": "rpr_mesh_polygon_info",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_mesh_polygon_vertex_info": {
      "name": "rpr_mesh_polygon_vertex_info",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_parameter_info": {
      "name": "rpr_parameter_info",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_parameter_type": {
      "name": "rpr_parameter_type",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_post_effect": {
      "name": "rpr_post_effect",
      "kind": "typedef",
      "type": "void*"
    },
    "rpr_post_effect_info": {
      "name": "rpr_post_effect_info",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_post_effect_type": {
      "name": "rpr_post_effect_type",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_render_mode": {
      "name": "rpr_render_mode",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_scene": {
      "name": "rpr_scene",
      "kind": "typedef",
      "type": "void*"
    },
    "rpr_scene_info": {
      "name": "rpr_scene_info",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_shape": {
      "name": "rpr_shape",
      "kind": "typedef",
      "type": "void*"
    },
    "rpr_shape_info": {
      "name": "rpr_shape_info",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_shape_type": {
      "name": "rpr_shape_type",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_subdiv_boundary_interfop_type": {
      "name": "rpr_subdiv_boundary_interfop_type",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_tonemapping_operator": {
      "name": "rpr_tonemapping_operator",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "rpr_volume_type": {
      "name": "rpr_volume_type",
      "kind": "typedef",
      "type": "rpr_uint"
    },
    "_fr_framebuffer_desc": {
      "name": "_fr_framebuffer_desc",
      "kind": "typedef",
      "type": "struct _rpr_framebuffer_desc"
    },
    "_fr_image_desc": {
      "name": "_fr_image_desc",
      "kind": "typedef",
      "type": "struct _rpr_image_desc"
    },
    "_fr_render_statistics": {
      "name": "_fr_render_statistics",
      "kind": "typedef",
      "type": "struct _rpr_render_statistics"
    },
    "_rpr_buffer_desc": {
      "name": "_rpr_buffer_desc",
      "kind": "struct",
      "fields": [
        {
          "name": "nb_element",
          "type": "rpr_uint"
        },
        {
          "name": "element_type",
          "type": "rpr_buffer_element_type"
        },
        {
          "name": "element_channel_size",
          "type": "rpr_uint"
        }
      ]
    },
    "_rpr_image_format": {
      "name": "_rpr_image_format",
      "kind": "struct",
      "fields": [
        {
          "name": "num_components",
          "type": "rpr_uint"
        },
        {
          "name": "type",
          "type": "rpr_component_type"
        }
      ]
    },
    "fr_aa_filter": {
      "name": "fr_aa_filter",
      "kind": "typedef",
      "type": "rpr_aa_filter"
    },
    "fr_aov": {
      "name": "fr_aov",
      "kind": "typedef",
      "type": "rpr_aov"
    },
    "fr_bitfield": {
      "name": "fr_bitfield",
      "kind": "typedef",
      "type": "rpr_bitfield"
    },
    "fr_buffer": {
      "name": "fr_buffer",
      "kind": "typedef",
      "type": "rpr_buffer"
    },
    "fr_buffer_element_type": {
      "name": "fr_buffer_element_type",
      "kind": "typedef",
      "type": "rpr_buffer_element_type"
    },
    "fr_buffer_info": {
      "name": "fr_buffer_info",
      "kind": "typedef",
      "type": "rpr_buffer_info"
    },
    "fr_camera": {
      "name": "fr_camera",
      "kind": "typedef",
      "type": "rpr_camera"
    },
    "fr_camera_info": {
      "name": "fr_camera_info",
      "kind": "typedef",
      "type": "rpr_camera_info"
    },
    "fr_camera_mode": {
      "name": "fr_camera_mode",
      "kind": "typedef",
      "type": "rpr_camera_mode"
    },
    "fr_channel_order": {
      "name": "fr_channel_order",
      "kind": "typedef",
      "type": "rpr_channel_order"
    },
    "fr_channel_type": {
      "name": "fr_channel_type",
      "kind": "typedef",
      "type": "rpr_channel_type"
    },
    "fr_color_space": {
      "name": "fr_color_space",
      "kind": "typedef",
      "type": "rpr_color_space"
    },
    "fr_component_type": {
      "name": "fr_component_type",
      "kind": "typedef",
      "type": "rpr_component_type"
    },
    "fr_composite": {
      "name": "fr_composite",
      "kind": "typedef",
      "type": "rpr_composite"
    },
    "fr_composite_info": {
      "name": "fr_composite_info",
      "kind": "typedef",
      "type": "rpr_composite_info"
    },
    "fr_composite_type": {
      "name": "fr_composite_type",
      "kind": "typedef",
      "type": "rpr_composite_type"
    },
    "fr_context": {
      "name": "fr_context",
      "kind": "typedef",
      "type": "rpr_context"
    },
    "fr_context_info": {
      "name": "fr_context_info",
      "kind": "typedef",
      "type": "rpr_context_info"
    },
    "fr_context_properties": {
      "name": "fr_context_properties",
      "kind": "typedef",
      "type": "rpr_context_properties"
    },
    "fr_context_type": {
      "name": "fr_context_type",
      "kind": "typedef",
      "type": "rpr_context_type"
    },
    "fr_environment_override": {
      "name": "fr_environment_override",
      "kind": "typedef",
      "type": "rpr_environment_override"
    },
    "fr_framebuffer": {
      "name": "fr_framebuffer",
      "kind": "typedef",
      "type": "rpr_framebuffer"
    },
    "fr_framebuffer_info": {
      "name": "fr_framebuffer_info",
      "kind": "typedef",
      "type": "rpr_framebuffer_info"
    },
    "fr_hetero_volume": {
      "name": "fr_hetero_volume",
      "kind": "typedef",
      "type": "rpr_hetero_volume"
    },
    "fr_hetero_volume_indices_topology": {
      "name": "fr_hetero_volume_indices_topology",
      "kind": "typedef",
      "type": "rpr_hetero_volume_indices_topology"
    },
    "fr_image": {
      "name": "fr_image",
      "kind": "typedef",
      "type": "rpr_image"
    },
    "fr_image_filter_type": {
      "name": "fr_image_filter_type",
      "kind": "typedef",
      "type": "rpr_image_filter_type"
    },
    "fr_image_info": {
      "name": "fr_image_info",
      "kind": "typedef",
      "type": "rpr_image_info"
    },
    "fr_image_wrap_type": {
      "name": "fr_image_wrap_type",
      "kind": "typedef",
      "type": "rpr_image_wrap_type"
    },
    "fr_light": {
      "name": "fr_light",
      "kind": "typedef",
      "type": "rpr_light"
    },
    "fr_light_info": {
      "name": "fr_light_info",
      "kind": "typedef",
      "type": "rpr_light_info"
    },
    "fr_light_type": {
      "name": "fr_light_type",
      "kind": "typedef",
      "type": "rpr_light_type"
    },
    "fr_material_node": {
      "name": "fr_material_node",
      "kind": "typedef",
      "type": "rpr_material_node"
    },
    "fr_material_node_arithmetic_operation": {
      "name": "fr_material_node_arithmetic_operation",
      "kind": "typedef",
      "type": "rpr_material_node_arithmetic_operation"
    },
    "fr_material_node_info": {
      "name": "fr_material_node_info",
      "kind": "typedef",
      "type": "rpr_material_node_info"
    },
    "fr_material_node_input": {
      "name": "fr_material_node_input",
      "kind": "typedef",
      "type": "rpr_material_node_input"
    },
    "fr_material_node_input_info": {
      "name": "fr_material_node_input_info",
      "kind": "typedef",
      "type": "rpr_material_node_input_info"
    },
    "fr_material_node_lookup_value": {
      "name": "fr_material_node_lookup_value",
      "kind": "typedef",
      "type": "rpr_material_node_lookup_value"
    },
    "fr_material_node_type": {
      "name": "fr_material_node_type",
      "kind": "typedef",
      "type": "rpr_material_node_type"
    },
    "fr_material_system": {
      "name": "fr_material_system",
      "kind": "typedef",
      "type": "rpr_material_system"
    },
    "fr_material_system_type": {
      "name": "fr_material_system_type",
      "kind": "typedef",
      "type": "rpr_material_system_type"
    },
    "fr_mesh_info": {
      "name": "fr_mesh_info",
      "kind": "typedef",
      "type": "rpr_mesh_info"
    },
    "fr_mesh_polygon_info": {
      "name": "fr_mesh_polygon_info",
      "kind": "typedef",
      "type": "rpr_mesh_polygon_info"
    },
    "fr_mesh_polygon_vertex_info": {
      "name": "fr_mesh_polygon_vertex_info",
      "kind": "typedef",
      "type": "rpr_mesh_polygon_vertex_info"
    },
    "fr_parameter_info": {
      "name": "fr_parameter_info",
      "kind": "typedef",
      "type": "rpr_parameter_info"
    },
    "fr_parameter_type": {
      "name": "fr_parameter_type",
      "kind": "typedef",
      "type": "rpr_parameter_type"
    },
    "fr_post_effect": {
      "name": "fr_post_effect",
      "kind": "typedef",
      "type": "rpr_post_effect"
    },
    "fr_post_effect_info": {
      "name": "fr_post_effect_info",
      "kind": "typedef",
      "type": "rpr_post_effect_info"
    },
    "fr_post_effect_type": {
      "name": "fr_post_effect_type",
      "kind": "typedef",
      "type": "rpr_post_effect_type"
    },
    "fr_render_mode": {
      "name": "fr_render_mode",
      "kind": "typedef",
      "type": "rpr_render_mode"
    },
    "fr_scene": {
      "name": "fr_scene",
      "kind": "typedef",
      "type": "rpr_scene"
    },
    "fr_scene_info": {
      "name": "fr_scene_info",
      "kind": "typedef",
      "type": "rpr_scene_info"
    },
    "fr_shape": {
      "name": "fr_shape",
      "kind": "typedef",
      "type": "rpr_shape"
    },
    "fr_shape_info": {
      "name": "fr_shape_info",
      "kind": "typedef",
      "type": "rpr_shape_info"
    },
    "fr_shape_type": {
      "name": "fr_shape_type",
      "kind": "typedef",
      "type": "rpr_shape_type"
    },
    "fr_subdiv_boundary_interfop_type": {
      "name": "fr_subdiv_boundary_interfop_type",
      "kind": "typedef",
      "type": "rpr_subdiv_boundary_interfop_type"
    },
    "fr_tonemapping_operator": {
      "name": "fr_tonemapping_operator",
      "kind": "typedef",
      "type": "rpr_tonemapping_operator"
    },
    "fr_volume_type": {
      "name": "fr_volume_type",
      "kind": "typedef",
      "type": "rpr_volume_type"
    },
    "rpr_creation_flags": {
      "name": "rpr_creation_flags",
      "kind": "typedef",
      "type": "rpr_bitfield"
    },
    "rpr_framebuffer_desc": {
      "name": "rpr_framebuffer_desc",
      "kind": "typedef",
      "type": "struct _rpr_framebuffer_desc"
    },
    "rpr_image_desc": {
      "name": "rpr_image_desc",
      "kind": "typedef",
      "type": "struct _rpr_image_desc"
    },
    "rpr_render_statistics": {
      "name": "rpr_render_statistics",
      "kind": "typedef",
      "type": "struct _rpr_render_statistics"
    },
    "_fr_buffer_desc": {
      "name": "_fr_buffer_desc",
      "kind": "typedef",
      "type": "struct _rpr_buffer_desc"
    },
    "_fr_image_format": {
      "name": "_fr_image_format",
      "kind": "typedef",
      "type": "struct _rpr_image_format"
    },
    "_rpr_ies_image_desc": {
      "name": "_rpr_ies_image_desc",
      "kind": "struct",
      "fields": [
        {
          "name": "w",
          "type": "rpr_int"
        },
        {
          "name": "h",
          "type": "rpr_int"
        },
        {
          "name": "data",
          "type": "rpr_char const*"
        },
        {
          "name": "filename",
          "type": "rpr_char const*"
        }
      ]
    },
    "fr_creation_flags": {
      "name": "fr_creation_flags",
      "kind": "typedef",
      "type": "rpr_creation_flags"
    },
    "fr_framebuffer_desc": {
      "name": "fr_framebuffer_desc",
      "kind": "typedef",
      "type": "rpr_framebuffer_desc"
    },
    "fr_image_desc": {
      "name": "fr_image_desc",
      "kind": "typedef",
      "type": "rpr_image_desc"
    },
    "fr_render_statistics": {
      "name": "fr_render_statistics",
      "kind": "typedef",
      "type": "rpr_render_statistics"
    },
    "rpr_buffer_desc": {
      "name": "rpr_buffer_desc",
      "kind": "typedef",
      "type": "struct _rpr_buffer_desc"
    },
    "rpr_image_format": {
      "name": "rpr_image_format",
      "kind": "typedef",
      "type": "struct _rpr_image_format"
    },
    "_fr_ies_image_desc": {
      "name": "_fr_ies_image_desc",
      "kind": "typedef",
      "type": "struct _rpr_ies_image_desc"
    },
    "fr_buffer_desc": {
      "name": "fr_buffer_desc",
      "kind": "typedef",
      "type": "rpr_buffer_desc"
    },
    "fr_image_format": {
      "name": "fr_image_format",
      "kind": "typedef",
      "type": "rpr_image_format"
    },
    "rpr_framebuffer_format": {
      "name": "rpr_framebuffer_format",
      "kind": "typedef",
      "type": "rpr_image_format"
    },
    "rpr_ies_image_desc": {
      "name": "rpr_ies_image_desc",
      "kind": "typedef",
      "type": "struct _rpr_ies_image_desc"
    },
    "fr_framebuffer_format": {
      "name": "fr_framebuffer_format",
      "kind": "typedef",
      "type": "rpr_framebuffer_format"
    },
    "fr_ies_image_desc": {
      "name": "fr_ies_image_desc",
      "kind": "typedef",
      "type": "rpr_ies_image_desc"
    }
  },
  "functions": {
    "frCameraGetInfo": {
      "name": "frCameraGetInfo",
      "restype": "fr_int",
      "args": [
        {
          "name": "camera",
          "type": "fr_camera"
        },
        {
          "name": "camera_info",
          "type": "fr_camera_info"
        },
        {
          "name": "size",
          "type": "size_t"
        },
        {
          "name": "data",
          "type": "void*"
        },
        {
          "name": "size_ret",
          "type": "size_t*"
        }
      ],
      "docs": null
    },
    "frCameraLookAt": {
      "name": "frCameraLookAt",
      "restype": "fr_int",
      "args": [
        {
          "name": "camera",
          "type": "fr_camera"
        },
        {
          "name": "posx",
          "type": "fr_float"
        },
        {
          "name": "posy",
          "type": "fr_float"
        },
        {
          "name": "posz",
          "type": "fr_float"
        },
        {
          "name": "atx",
          "type": "fr_float"
        },
        {
          "name": "aty",
          "type": "fr_float"
        },
        {
          "name": "atz",
          "type": "fr_float"
        },
        {
          "name": "upx",
          "type": "fr_float"
        },
        {
          "name": "upy",
          "type": "fr_float"
        },
        {
          "name": "upz",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frCameraSetApertureBlades": {
      "name": "frCameraSetApertureBlades",
      "restype": "fr_int",
      "args": [
        {
          "name": "camera",
          "type": "fr_camera"
        },
        {
          "name": "num_blades",
          "type": "fr_uint"
        }
      ],
      "docs": null
    },
    "frCameraSetExposure": {
      "name": "frCameraSetExposure",
      "restype": "fr_int",
      "args": [
        {
          "name": "camera",
          "type": "fr_camera"
        },
        {
          "name": "exposure",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frCameraSetFStop": {
      "name": "frCameraSetFStop",
      "restype": "fr_int",
      "args": [
        {
          "name": "camera",
          "type": "fr_camera"
        },
        {
          "name": "fstop",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frCameraSetFarPlane": {
      "name": "frCameraSetFarPlane",
      "restype": "fr_int",
      "args": [
        {
          "name": "camera",
          "type": "fr_camera"
        },
        {
          "name": "far",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frCameraSetFocalLength": {
      "name": "frCameraSetFocalLength",
      "restype": "fr_int",
      "args": [
        {
          "name": "camera",
          "type": "fr_camera"
        },
        {
          "name": "flength",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frCameraSetFocalTilt": {
      "name": "frCameraSetFocalTilt",
      "restype": "fr_int",
      "args": [
        {
          "name": "camera",
          "type": "fr_camera"
        },
        {
          "name": "tilt",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frCameraSetFocusDistance": {
      "name": "frCameraSetFocusDistance",
      "restype": "fr_int",
      "args": [
        {
          "name": "camera",
          "type": "fr_camera"
        },
        {
          "name": "fdist",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frCameraSetIPD": {
      "name": "frCameraSetIPD",
      "restype": "fr_int",
      "args": [
        {
          "name": "camera",
          "type": "fr_camera"
        },
        {
          "name": "ipd",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frCameraSetLensShift": {
      "name": "frCameraSetLensShift",
      "restype": "fr_int",
      "args": [
        {
          "name": "camera",
          "type": "fr_camera"
        },
        {
          "name": "shiftx",
          "type": "fr_float"
        },
        {
          "name": "shifty",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frCameraSetMode": {
      "name": "frCameraSetMode",
      "restype": "fr_int",
      "args": [
        {
          "name": "camera",
          "type": "fr_camera"
        },
        {
          "name": "mode",
          "type": "fr_camera_mode"
        }
      ],
      "docs": null
    },
    "frCameraSetNearPlane": {
      "name": "frCameraSetNearPlane",
      "restype": "fr_int",
      "args": [
        {
          "name": "camera",
          "type": "fr_camera"
        },
        {
          "name": "near",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frCameraSetOrthoHeight": {
      "name": "frCameraSetOrthoHeight",
      "restype": "fr_int",
      "args": [
        {
          "name": "camera",
          "type": "fr_camera"
        },
        {
          "name": "height",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frCameraSetOrthoWidth": {
      "name": "frCameraSetOrthoWidth",
      "restype": "fr_int",
      "args": [
        {
          "name": "camera",
          "type": "fr_camera"
        },
        {
          "name": "width",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frCameraSetSensorSize": {
      "name": "frCameraSetSensorSize",
      "restype": "fr_int",
      "args": [
        {
          "name": "camera",
          "type": "fr_camera"
        },
        {
          "name": "width",
          "type": "fr_float"
        },
        {
          "name": "height",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frCameraSetTiltCorrection": {
      "name": "frCameraSetTiltCorrection",
      "restype": "fr_int",
      "args": [
        {
          "name": "camera",
          "type": "fr_camera"
        },
        {
          "name": "tiltX",
          "type": "fr_float"
        },
        {
          "name": "tiltY",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frCameraSetTransform": {
      "name": "frCameraSetTransform",
      "restype": "fr_int",
      "args": [
        {
          "name": "camera",
          "type": "fr_camera"
        },
        {
          "name": "transpose",
          "type": "fr_bool"
        },
        {
          "name": "transform",
          "type": "fr_float*"
        }
      ],
      "docs": null
    },
    "frCompositeCompute": {
      "name": "frCompositeCompute",
      "restype": "fr_int",
      "args": [
        {
          "name": "composite",
          "type": "fr_composite"
        },
        {
          "name": "fb",
          "type": "fr_framebuffer"
        }
      ],
      "docs": null
    },
    "frCompositeGetInfo": {
      "name": "frCompositeGetInfo",
      "restype": "fr_int",
      "args": [
        {
          "name": "composite",
          "type": "fr_composite"
        },
        {
          "name": "composite_info",
          "type": "fr_composite_info"
        },
        {
          "name": "size",
          "type": "size_t"
        },
        {
          "name": "data",
          "type": "void*"
        },
        {
          "name": "size_ret",
          "type": "size_t*"
        }
      ],
      "docs": null
    },
    "frCompositeSetInput1u": {
      "name": "frCompositeSetInput1u",
      "restype": "fr_int",
      "args": [
        {
          "name": "composite",
          "type": "fr_composite"
        },
        {
          "name": "inputName",
          "type": "char const*"
        },
        {
          "name": "value",
          "type": "unsigned int"
        }
      ],
      "docs": null
    },
    "frCompositeSetInput4f": {
      "name": "frCompositeSetInput4f",
      "restype": "fr_int",
      "args": [
        {
          "name": "composite",
          "type": "fr_composite"
        },
        {
          "name": "inputName",
          "type": "char const*"
        },
        {
          "name": "x",
          "type": "float"
        },
        {
          "name": "y",
          "type": "float"
        },
        {
          "name": "z",
          "type": "float"
        },
        {
          "name": "w",
          "type": "float"
        }
      ],
      "docs": null
    },
    "frCompositeSetInputC": {
      "name": "frCompositeSetInputC",
      "restype": "fr_int",
      "args": [
        {
          "name": "composite",
          "type": "fr_composite"
        },
        {
          "name": "inputName",
          "type": "char const*"
        },
        {
          "name": "input",
          "type": "fr_composite"
        }
      ],
      "docs": null
    },
    "frCompositeSetInputFb": {
      "name": "frCompositeSetInputFb",
      "restype": "fr_int",
      "args": [
        {
          "name": "composite",
          "type": "fr_composite"
        },
        {
          "name": "inputName",
          "type": "char const*"
        },
        {
          "name": "input",
          "type": "fr_framebuffer"
        }
      ],
      "docs": null
    },
    "frCompositeSetInputOp": {
      "name": "frCompositeSetInputOp",
      "restype": "fr_int",
      "args": [
        {
          "name": "composite",
          "type": "fr_composite"
        },
        {
          "name": "inputName",
          "type": "char const*"
        },
        {
          "name": "op",
          "type": "fr_material_node_arithmetic_operation"
        }
      ],
      "docs": null
    },
    "frContextAttachPostEffect": {
      "name": "frContextAttachPostEffect",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "effect",
          "type": "fr_post_effect"
        }
      ],
      "docs": null
    },
    "frContextClearMemory": {
      "name": "frContextClearMemory",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        }
      ],
      "docs": null
    },
    "frContextCreateBuffer": {
      "name": "frContextCreateBuffer",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "buffer_desc",
          "type": "fr_buffer_desc const*"
        },
        {
          "name": "data",
          "type": "void const*"
        },
        {
          "name": "out_buffer",
          "type": "fr_buffer*"
        }
      ],
      "docs": null
    },
    "frContextCreateCamera": {
      "name": "frContextCreateCamera",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "out_camera",
          "type": "fr_camera*"
        }
      ],
      "docs": null
    },
    "frContextCreateComposite": {
      "name": "frContextCreateComposite",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "in_type",
          "type": "fr_composite_type"
        },
        {
          "name": "out_composite",
          "type": "fr_composite*"
        }
      ],
      "docs": null
    },
    "frContextCreateDirectionalLight": {
      "name": "frContextCreateDirectionalLight",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "out_light",
          "type": "fr_light*"
        }
      ],
      "docs": null
    },
    "frContextCreateEnvironmentLight": {
      "name": "frContextCreateEnvironmentLight",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "out_light",
          "type": "fr_light*"
        }
      ],
      "docs": null
    },
    "frContextCreateFrameBuffer": {
      "name": "frContextCreateFrameBuffer",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "format",
          "type": "fr_framebuffer_format const"
        },
        {
          "name": "fb_desc",
          "type": "fr_framebuffer_desc const*"
        },
        {
          "name": "out_fb",
          "type": "fr_framebuffer*"
        }
      ],
      "docs": null
    },
    "frContextCreateHeteroVolume": {
      "name": "frContextCreateHeteroVolume",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "out_heteroVolume",
          "type": "fr_hetero_volume*"
        },
        {
          "name": "gridSizeX",
          "type": "size_t"
        },
        {
          "name": "gridSizeY",
          "type": "size_t"
        },
        {
          "name": "gridSizeZ",
          "type": "size_t"
        },
        {
          "name": "indicesList",
          "type": "void*"
        },
        {
          "name": "numberOfIndices",
          "type": "size_t"
        },
        {
          "name": "indicesListTopology",
          "type": "fr_hetero_volume_indices_topology"
        },
        {
          "name": "gridData",
          "type": "void*"
        },
        {
          "name": "gridDataSizeByte",
          "type": "size_t"
        },
        {
          "name": "gridDataTopology___unused",
          "type": "fr_uint"
        }
      ],
      "docs": null
    },
    "frContextCreateIESLight": {
      "name": "frContextCreateIESLight",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "light",
          "type": "fr_light*"
        }
      ],
      "docs": null
    },
    "frContextCreateImage": {
      "name": "frContextCreateImage",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "format",
          "type": "fr_image_format const"
        },
        {
          "name": "image_desc",
          "type": "fr_image_desc const*"
        },
        {
          "name": "data",
          "type": "void const*"
        },
        {
          "name": "out_image",
          "type": "fr_image*"
        }
      ],
      "docs": null
    },
    "frContextCreateImageFromFile": {
      "name": "frContextCreateImageFromFile",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "path",
          "type": "fr_char const*"
        },
        {
          "name": "out_image",
          "type": "fr_image*"
        }
      ],
      "docs": null
    },
    "frContextCreateInstance": {
      "name": "frContextCreateInstance",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "shape",
          "type": "fr_shape"
        },
        {
          "name": "out_instance",
          "type": "fr_shape*"
        }
      ],
      "docs": null
    },
    "frContextCreateMaterialSystem": {
      "name": "frContextCreateMaterialSystem",
      "restype": "fr_int",
      "args": [
        {
          "name": "in_context",
          "type": "fr_context"
        },
        {
          "name": "type",
          "type": "fr_material_system_type"
        },
        {
          "name": "out_matsys",
          "type": "fr_material_system*"
        }
      ],
      "docs": null
    },
    "frContextCreateMesh": {
      "name": "frContextCreateMesh",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "vertices",
          "type": "fr_float const*"
        },
        {
          "name": "num_vertices",
          "type": "size_t"
        },
        {
          "name": "vertex_stride",
          "type": "fr_int"
        },
        {
          "name": "normals",
          "type": "fr_float const*"
        },
        {
          "name": "num_normals",
          "type": "size_t"
        },
        {
          "name": "normal_stride",
          "type": "fr_int"
        },
        {
          "name": "texcoords",
          "type": "fr_float const*"
        },
        {
          "name": "num_texcoords",
          "type": "size_t"
        },
        {
          "name": "texcoord_stride",
          "type": "fr_int"
        },
        {
          "name": "vertex_indices",
          "type": "fr_int const*"
        },
        {
          "name": "vidx_stride",
          "type": "fr_int"
        },
        {
          "name": "normal_indices",
          "type": "fr_int const*"
        },
        {
          "name": "nidx_stride",
          "type": "fr_int"
        },
        {
          "name": "texcoord_indices",
          "type": "fr_int const*"
        },
        {
          "name": "tidx_stride",
          "type": "fr_int"
        },
        {
          "name": "num_face_vertices",
          "type": "fr_int const*"
        },
        {
          "name": "num_faces",
          "type": "size_t"
        },
        {
          "name": "out_mesh",
          "type": "fr_shape*"
        }
      ],
      "docs": null
    },
    "frContextCreateMeshEx": {
      "name": "frContextCreateMeshEx",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "vertices",
          "type": "fr_float const*"
        },
        {
          "name": "num_vertices",
          "type": "size_t"
        },
        {
          "name": "vertex_stride",
          "type": "fr_int"
        },
        {
          "name": "normals",
          "type": "fr_float const*"
        },
        {
          "name": "num_normals",
          "type": "size_t"
        },
        {
          "name": "normal_stride",
          "type": "fr_int"
        },
        {
          "name": "perVertexFlag",
          "type": "fr_int const*"
        },
        {
          "name": "num_perVertexFlags",
          "type": "size_t"
        },
        {
          "name": "perVertexFlag_stride",
          "type": "fr_int"
        },
        {
          "name": "numberOfTexCoordLayers",
          "type": "fr_int"
        },
        {
          "name": "texcoords",
          "type": "fr_float const**"
        },
        {
          "name": "num_texcoords",
          "type": "size_t const*"
        },
        {
          "name": "texcoord_stride",
          "type": "fr_int const*"
        },
        {
          "name": "vertex_indices",
          "type": "fr_int const*"
        },
        {
          "name": "vidx_stride",
          "type": "fr_int"
        },
        {
          "name": "normal_indices",
          "type": "fr_int const*"
        },
        {
          "name": "nidx_stride",
          "type": "fr_int"
        },
        {
          "name": "texcoord_indices",
          "type": "fr_int const**"
        },
        {
          "name": "tidx_stride",
          "type": "fr_int const*"
        },
        {
          "name": "num_face_vertices",
          "type": "fr_int const*"
        },
        {
          "name": "num_faces",
          "type": "size_t"
        },
        {
          "name": "out_mesh",
          "type": "fr_shape*"
        }
      ],
      "docs": null
    },
    "frContextCreateMeshEx2": {
      "name": "frContextCreateMeshEx2",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "vertices",
          "type": "fr_float const*"
        },
        {
          "name": "num_vertices",
          "type": "size_t"
        },
        {
          "name": "vertex_stride",
          "type": "fr_int"
        },
        {
          "name": "normals",
          "type": "fr_float const*"
        },
        {
          "name": "num_normals",
          "type": "size_t"
        },
        {
          "name": "normal_stride",
          "type": "fr_int"
        },
        {
          "name": "perVertexFlag",
          "type": "fr_int const*"
        },
        {
          "name": "num_perVertexFlags",
          "type": "size_t"
        },
        {
          "name": "perVertexFlag_stride",
          "type": "fr_int"
        },
        {
          "name": "numberOfTexCoordLayers",
          "type": "fr_int"
        },
        {
          "name": "texcoords",
          "type": "fr_float const**"
        },
        {
          "name": "num_texcoords",
          "type": "size_t const*"
        },
        {
          "name": "texcoord_stride",
          "type": "fr_int const*"
        },
        {
          "name": "vertex_indices",
          "type": "fr_int const*"
        },
        {
          "name": "vidx_stride",
          "type": "fr_int"
        },
        {
          "name": "normal_indices",
          "type": "fr_int const*"
        },
        {
          "name": "nidx_stride",
          "type": "fr_int"
        },
        {
          "name": "texcoord_indices",
          "type": "fr_int const**"
        },
        {
          "name": "tidx_stride",
          "type": "fr_int const*"
        },
        {
          "name": "num_face_vertices",
          "type": "fr_int const*"
        },
        {
          "name": "num_faces",
          "type": "size_t"
        },
        {
          "name": "mesh_properties",
          "type": "fr_mesh_info const*"
        },
        {
          "name": "out_mesh",
          "type": "fr_shape*"
        }
      ],
      "docs": null
    },
    "frContextCreatePointLight": {
      "name": "frContextCreatePointLight",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "out_light",
          "type": "fr_light*"
        }
      ],
      "docs": null
    },
    "frContextCreatePostEffect": {
      "name": "frContextCreatePostEffect",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "type",
          "type": "fr_post_effect_type"
        },
        {
          "name": "out_effect",
          "type": "fr_post_effect*"
        }
      ],
      "docs": null
    },
    "frContextCreateScene": {
      "name": "frContextCreateScene",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "out_scene",
          "type": "fr_scene*"
        }
      ],
      "docs": null
    },
    "frContextCreateSkyLight": {
      "name": "frContextCreateSkyLight",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "out_light",
          "type": "fr_light*"
        }
      ],
      "docs": null
    },
    "frContextCreateSpotLight": {
      "name": "frContextCreateSpotLight",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "light",
          "type": "fr_light*"
        }
      ],
      "docs": null
    },
    "frContextDetachPostEffect": {
      "name": "frContextDetachPostEffect",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "effect",
          "type": "fr_post_effect"
        }
      ],
      "docs": null
    },
    "frContextGetAOV": {
      "name": "frContextGetAOV",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "aov",
          "type": "fr_aov"
        },
        {
          "name": "out_fb",
          "type": "fr_framebuffer*"
        }
      ],
      "docs": null
    },
    "frContextGetAttachedPostEffect": {
      "name": "frContextGetAttachedPostEffect",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "i",
          "type": "fr_uint"
        },
        {
          "name": "out_effect",
          "type": "fr_post_effect*"
        }
      ],
      "docs": null
    },
    "frContextGetAttachedPostEffectCount": {
      "name": "frContextGetAttachedPostEffectCount",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "nb",
          "type": "fr_uint*"
        }
      ],
      "docs": null
    },
    "frContextGetInfo": {
      "name": "frContextGetInfo",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "context_info",
          "type": "fr_context_info"
        },
        {
          "name": "size",
          "type": "size_t"
        },
        {
          "name": "data",
          "type": "void*"
        },
        {
          "name": "size_ret",
          "type": "size_t*"
        }
      ],
      "docs": null
    },
    "frContextGetParameterInfo": {
      "name": "frContextGetParameterInfo",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "param_idx",
          "type": "int"
        },
        {
          "name": "parameter_info",
          "type": "fr_parameter_info"
        },
        {
          "name": "size",
          "type": "size_t"
        },
        {
          "name": "data",
          "type": "void*"
        },
        {
          "name": "size_ret",
          "type": "size_t*"
        }
      ],
      "docs": null
    },
    "frContextGetScene": {
      "name": "frContextGetScene",
      "restype": "fr_int",
      "args": [
        {
          "name": "arg0",
          "type": "fr_context"
        },
        {
          "name": "out_scene",
          "type": "fr_scene*"
        }
      ],
      "docs": null
    },
    "frContextRender": {
      "name": "frContextRender",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        }
      ],
      "docs": null
    },
    "frContextRenderTile": {
      "name": "frContextRenderTile",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "xmin",
          "type": "fr_uint"
        },
        {
          "name": "xmax",
          "type": "fr_uint"
        },
        {
          "name": "ymin",
          "type": "fr_uint"
        },
        {
          "name": "ymax",
          "type": "fr_uint"
        }
      ],
      "docs": null
    },
    "frContextResolveFrameBuffer": {
      "name": "frContextResolveFrameBuffer",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "src_frame_buffer",
          "type": "fr_framebuffer"
        },
        {
          "name": "dst_frame_buffer",
          "type": "fr_framebuffer"
        },
        {
          "name": "normalizeOnly",
          "type": "fr_bool",
          "default": "false"
        }
      ],
      "docs": null
    },
    "frContextSetAOV": {
      "name": "frContextSetAOV",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "aov",
          "type": "fr_aov"
        },
        {
          "name": "frame_buffer",
          "type": "fr_framebuffer"
        }
      ],
      "docs": null
    },
    "frContextSetActivePlugin": {
      "name": "frContextSetActivePlugin",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "pluginID",
          "type": "fr_int"
        }
      ],
      "docs": null
    },
    "frContextSetParameter1f": {
      "name": "frContextSetParameter1f",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "name",
          "type": "fr_char const*"
        },
        {
          "name": "x",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frContextSetParameter1u": {
      "name": "frContextSetParameter1u",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "name",
          "type": "fr_char const*"
        },
        {
          "name": "x",
          "type": "fr_uint"
        }
      ],
      "docs": null
    },
    "frContextSetParameter3f": {
      "name": "frContextSetParameter3f",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "name",
          "type": "fr_char const*"
        },
        {
          "name": "x",
          "type": "fr_float"
        },
        {
          "name": "y",
          "type": "fr_float"
        },
        {
          "name": "z",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frContextSetParameter4f": {
      "name": "frContextSetParameter4f",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "name",
          "type": "fr_char const*"
        },
        {
          "name": "x",
          "type": "fr_float"
        },
        {
          "name": "y",
          "type": "fr_float"
        },
        {
          "name": "z",
          "type": "fr_float"
        },
        {
          "name": "w",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frContextSetParameterString": {
      "name": "frContextSetParameterString",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "name",
          "type": "fr_char const*"
        },
        {
          "name": "value",
          "type": "fr_char const*"
        }
      ],
      "docs": null
    },
    "frContextSetScene": {
      "name": "frContextSetScene",
      "restype": "fr_int",
      "args": [
        {
          "name": "context",
          "type": "fr_context"
        },
        {
          "name": "scene",
          "type": "fr_scene"
        }
      ],
      "docs": null
    },
    "frCreateContext": {
      "name": "frCreateContext",
      "restype": "fr_int",
      "args": [
        {
          "name": "api_version",
          "type": "fr_int"
        },
        {
          "name": "pluginIDs",
          "type": "fr_int*"
        },
        {
          "name": "pluginCount",
          "type": "size_t"
        },
        {
          "name": "creation_flags",
          "type": "fr_creation_flags"
        },
        {
          "name": "props",
          "type": "fr_context_properties const*"
        },
        {
          "name": "cache_path",
          "type": "fr_char const*"
        },
        {
          "name": "out_context",
          "type": "fr_context*"
        }
      ],
      "docs": null
    },
    "frDirectionalLightSetRadiantPower3f": {
      "name": "frDirectionalLightSetRadiantPower3f",
      "restype": "fr_int",
      "args": [
        {
          "name": "light",
          "type": "fr_light"
        },
        {
          "name": "r",
          "type": "fr_float"
        },
        {
          "name": "g",
          "type": "fr_float"
        },
        {
          "name": "b",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frDirectionalLightSetShadowSoftness": {
      "name": "frDirectionalLightSetShadowSoftness",
      "restype": "fr_int",
      "args": [
        {
          "name": "light",
          "type": "fr_light"
        },
        {
          "name": "coeff",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frEnvironmentLightAttachPortal": {
      "name": "frEnvironmentLightAttachPortal",
      "restype": "fr_int",
      "args": [
        {
          "name": "scene",
          "type": "fr_scene"
        },
        {
          "name": "env_light",
          "type": "fr_light"
        },
        {
          "name": "portal",
          "type": "fr_shape"
        }
      ],
      "docs": null
    },
    "frEnvironmentLightDetachPortal": {
      "name": "frEnvironmentLightDetachPortal",
      "restype": "fr_int",
      "args": [
        {
          "name": "scene",
          "type": "fr_scene"
        },
        {
          "name": "env_light",
          "type": "fr_light"
        },
        {
          "name": "portal",
          "type": "fr_shape"
        }
      ],
      "docs": null
    },
    "frEnvironmentLightSetImage": {
      "name": "frEnvironmentLightSetImage",
      "restype": "fr_int",
      "args": [
        {
          "name": "env_light",
          "type": "fr_light"
        },
        {
          "name": "image",
          "type": "fr_image"
        }
      ],
      "docs": null
    },
    "frEnvironmentLightSetIntensityScale": {
      "name": "frEnvironmentLightSetIntensityScale",
      "restype": "fr_int",
      "args": [
        {
          "name": "env_light",
          "type": "fr_light"
        },
        {
          "name": "intensity_scale",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frFrameBufferClear": {
      "name": "frFrameBufferClear",
      "restype": "fr_int",
      "args": [
        {
          "name": "frame_buffer",
          "type": "fr_framebuffer"
        }
      ],
      "docs": null
    },
    "frFrameBufferGetInfo": {
      "name": "frFrameBufferGetInfo",
      "restype": "fr_int",
      "args": [
        {
          "name": "framebuffer",
          "type": "fr_framebuffer"
        },
        {
          "name": "info",
          "type": "fr_framebuffer_info"
        },
        {
          "name": "size",
          "type": "size_t"
        },
        {
          "name": "data",
          "type": "void*"
        },
        {
          "name": "size_ret",
          "type": "size_t*"
        }
      ],
      "docs": null
    },
    "frFrameBufferSaveToFile": {
      "name": "frFrameBufferSaveToFile",
      "restype": "fr_int",
      "args": [
        {
          "name": "frame_buffer",
          "type": "fr_framebuffer"
        },
        {
          "name": "file_path",
          "type": "fr_char const*"
        }
      ],
      "docs": null
    },
    "frHeteroVolumeSetTransform": {
      "name": "frHeteroVolumeSetTransform",
      "restype": "fr_int",
      "args": [
        {
          "name": "out_heteroVolume",
          "type": "fr_hetero_volume"
        },
        {
          "name": "transpose",
          "type": "fr_bool"
        },
        {
          "name": "transform",
          "type": "fr_float const*"
        }
      ],
      "docs": null
    },
    "frIESLightSetImageFromFile": {
      "name": "frIESLightSetImageFromFile",
      "restype": "fr_int",
      "args": [
        {
          "name": "env_light",
          "type": "fr_light"
        },
        {
          "name": "imagePath",
          "type": "fr_char const*"
        },
        {
          "name": "nx",
          "type": "fr_int"
        },
        {
          "name": "ny",
          "type": "fr_int"
        }
      ],
      "docs": null
    },
    "frIESLightSetImageFromIESdata": {
      "name": "frIESLightSetImageFromIESdata",
      "restype": "fr_int",
      "args": [
        {
          "name": "env_light",
          "type": "fr_light"
        },
        {
          "name": "iesData",
          "type": "fr_char const*"
        },
        {
          "name": "nx",
          "type": "fr_int"
        },
        {
          "name": "ny",
          "type": "fr_int"
        }
      ],
      "docs": null
    },
    "frIESLightSetRadiantPower3f": {
      "name": "frIESLightSetRadiantPower3f",
      "restype": "fr_int",
      "args": [
        {
          "name": "light",
          "type": "fr_light"
        },
        {
          "name": "r",
          "type": "fr_float"
        },
        {
          "name": "g",
          "type": "fr_float"
        },
        {
          "name": "b",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frImageGetInfo": {
      "name": "frImageGetInfo",
      "restype": "fr_int",
      "args": [
        {
          "name": "image",
          "type": "fr_image"
        },
        {
          "name": "image_info",
          "type": "fr_image_info"
        },
        {
          "name": "size",
          "type": "size_t"
        },
        {
          "name": "data",
          "type": "void*"
        },
        {
          "name": "size_ret",
          "type": "size_t*"
        }
      ],
      "docs": null
    },
    "frImageSetFilter": {
      "name": "frImageSetFilter",
      "restype": "fr_int",
      "args": [
        {
          "name": "image",
          "type": "fr_image"
        },
        {
          "name": "type",
          "type": "fr_image_filter_type"
        }
      ],
      "docs": null
    },
    "frImageSetWrap": {
      "name": "frImageSetWrap",
      "restype": "fr_int",
      "args": [
        {
          "name": "image",
          "type": "fr_image"
        },
        {
          "name": "type",
          "type": "fr_image_wrap_type"
        }
      ],
      "docs": null
    },
    "frInstanceGetBaseShape": {
      "name": "frInstanceGetBaseShape",
      "restype": "fr_int",
      "args": [
        {
          "name": "shape",
          "type": "fr_shape"
        },
        {
          "name": "out_shape",
          "type": "fr_shape*"
        }
      ],
      "docs": null
    },
    "frLightGetInfo": {
      "name": "frLightGetInfo",
      "restype": "fr_int",
      "args": [
        {
          "name": "light",
          "type": "fr_light"
        },
        {
          "name": "info",
          "type": "fr_light_info"
        },
        {
          "name": "size",
          "type": "size_t"
        },
        {
          "name": "data",
          "type": "void*"
        },
        {
          "name": "size_ret",
          "type": "size_t*"
        }
      ],
      "docs": null
    },
    "frLightSetTransform": {
      "name": "frLightSetTransform",
      "restype": "fr_int",
      "args": [
        {
          "name": "light",
          "type": "fr_light"
        },
        {
          "name": "transpose",
          "type": "fr_bool"
        },
        {
          "name": "transform",
          "type": "fr_float const*"
        }
      ],
      "docs": null
    },
    "frMaterialNodeGetInfo": {
      "name": "frMaterialNodeGetInfo",
      "restype": "fr_int",
      "args": [
        {
          "name": "in_node",
          "type": "fr_material_node"
        },
        {
          "name": "in_info",
          "type": "fr_material_node_info"
        },
        {
          "name": "in_size",
          "type": "size_t"
        },
        {
          "name": "in_data",
          "type": "void*"
        },
        {
          "name": "out_size",
          "type": "size_t*"
        }
      ],
      "docs": null
    },
    "frMaterialNodeGetInputInfo": {
      "name": "frMaterialNodeGetInputInfo",
      "restype": "fr_int",
      "args": [
        {
          "name": "in_node",
          "type": "fr_material_node"
        },
        {
          "name": "in_input_idx",
          "type": "fr_int"
        },
        {
          "name": "in_info",
          "type": "fr_material_node_input_info"
        },
        {
          "name": "in_size",
          "type": "size_t"
        },
        {
          "name": "in_data",
          "type": "void*"
        },
        {
          "name": "out_size",
          "type": "size_t*"
        }
      ],
      "docs": null
    },
    "frMaterialNodeSetInputBufferData": {
      "name": "frMaterialNodeSetInputBufferData",
      "restype": "fr_int",
      "args": [
        {
          "name": "in_node",
          "type": "fr_material_node"
        },
        {
          "name": "in_input",
          "type": "fr_char const*"
        },
        {
          "name": "buffer",
          "type": "fr_buffer"
        }
      ],
      "docs": null
    },
    "frMaterialNodeSetInputF": {
      "name": "frMaterialNodeSetInputF",
      "restype": "fr_int",
      "args": [
        {
          "name": "in_node",
          "type": "fr_material_node"
        },
        {
          "name": "in_input",
          "type": "fr_char const*"
        },
        {
          "name": "in_value_x",
          "type": "fr_float"
        },
        {
          "name": "in_value_y",
          "type": "fr_float"
        },
        {
          "name": "in_value_z",
          "type": "fr_float"
        },
        {
          "name": "in_value_w",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frMaterialNodeSetInputImageData": {
      "name": "frMaterialNodeSetInputImageData",
      "restype": "fr_int",
      "args": [
        {
          "name": "in_node",
          "type": "fr_material_node"
        },
        {
          "name": "in_input",
          "type": "fr_char const*"
        },
        {
          "name": "image",
          "type": "fr_image"
        }
      ],
      "docs": null
    },
    "frMaterialNodeSetInputN": {
      "name": "frMaterialNodeSetInputN",
      "restype": "fr_int",
      "args": [
        {
          "name": "in_node",
          "type": "fr_material_node"
        },
        {
          "name": "in_input",
          "type": "fr_char const*"
        },
        {
          "name": "in_input_node",
          "type": "fr_material_node"
        }
      ],
      "docs": null
    },
    "frMaterialNodeSetInputU": {
      "name": "frMaterialNodeSetInputU",
      "restype": "fr_int",
      "args": [
        {
          "name": "in_node",
          "type": "fr_material_node"
        },
        {
          "name": "in_input",
          "type": "fr_char const*"
        },
        {
          "name": "in_value",
          "type": "fr_uint"
        }
      ],
      "docs": null
    },
    "frMaterialSystemCreateNode": {
      "name": "frMaterialSystemCreateNode",
      "restype": "fr_int",
      "args": [
        {
          "name": "in_matsys",
          "type": "fr_material_system"
        },
        {
          "name": "in_type",
          "type": "fr_material_node_type"
        },
        {
          "name": "out_node",
          "type": "fr_material_node*"
        }
      ],
      "docs": null
    },
    "frMaterialSystemGetSize": {
      "name": "frMaterialSystemGetSize",
      "restype": "fr_int",
      "args": [
        {
          "name": "in_context",
          "type": "fr_context"
        },
        {
          "name": "out_size",
          "type": "fr_uint*"
        }
      ],
      "docs": null
    },
    "frMeshGetInfo": {
      "name": "frMeshGetInfo",
      "restype": "fr_int",
      "args": [
        {
          "name": "mesh",
          "type": "fr_shape"
        },
        {
          "name": "mesh_info",
          "type": "fr_mesh_info"
        },
        {
          "name": "size",
          "type": "size_t"
        },
        {
          "name": "data",
          "type": "void*"
        },
        {
          "name": "size_ret",
          "type": "size_t*"
        }
      ],
      "docs": null
    },
    "frMeshPolygonGetInfo": {
      "name": "frMeshPolygonGetInfo",
      "restype": "fr_int",
      "args": [
        {
          "name": "mesh",
          "type": "fr_shape"
        },
        {
          "name": "polygon_index",
          "type": "size_t"
        },
        {
          "name": "polygon_info",
          "type": "fr_mesh_polygon_info"
        },
        {
          "name": "size",
          "type": "size_t"
        },
        {
          "name": "data",
          "type": "void*"
        },
        {
          "name": "size_ret",
          "type": "size_t*"
        }
      ],
      "docs": null
    },
    "frObjectDelete": {
      "name": "frObjectDelete",
      "restype": "fr_int",
      "args": [
        {
          "name": "obj",
          "type": "void*"
        }
      ],
      "docs": null
    },
    "frObjectSetName": {
      "name": "frObjectSetName",
      "restype": "fr_int",
      "args": [
        {
          "name": "node",
          "type": "void*"
        },
        {
          "name": "name",
          "type": "fr_char const*"
        }
      ],
      "docs": null
    },
    "frPointLightSetRadiantPower3f": {
      "name": "frPointLightSetRadiantPower3f",
      "restype": "fr_int",
      "args": [
        {
          "name": "light",
          "type": "fr_light"
        },
        {
          "name": "r",
          "type": "fr_float"
        },
        {
          "name": "g",
          "type": "fr_float"
        },
        {
          "name": "b",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frPostEffectGetInfo": {
      "name": "frPostEffectGetInfo",
      "restype": "fr_int",
      "args": [
        {
          "name": "effect",
          "type": "fr_post_effect"
        },
        {
          "name": "info",
          "type": "fr_post_effect_info"
        },
        {
          "name": "size",
          "type": "size_t"
        },
        {
          "name": "data",
          "type": "void*"
        },
        {
          "name": "size_ret",
          "type": "size_t*"
        }
      ],
      "docs": null
    },
    "frPostEffectSetParameter1f": {
      "name": "frPostEffectSetParameter1f",
      "restype": "fr_int",
      "args": [
        {
          "name": "effect",
          "type": "fr_post_effect"
        },
        {
          "name": "name",
          "type": "fr_char const*"
        },
        {
          "name": "x",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frPostEffectSetParameter1u": {
      "name": "frPostEffectSetParameter1u",
      "restype": "fr_int",
      "args": [
        {
          "name": "effect",
          "type": "fr_post_effect"
        },
        {
          "name": "name",
          "type": "fr_char const*"
        },
        {
          "name": "x",
          "type": "fr_uint"
        }
      ],
      "docs": null
    },
    "frPostEffectSetParameter3f": {
      "name": "frPostEffectSetParameter3f",
      "restype": "fr_int",
      "args": [
        {
          "name": "effect",
          "type": "fr_post_effect"
        },
        {
          "name": "name",
          "type": "fr_char const*"
        },
        {
          "name": "x",
          "type": "fr_float"
        },
        {
          "name": "y",
          "type": "fr_float"
        },
        {
          "name": "z",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frPostEffectSetParameter4f": {
      "name": "frPostEffectSetParameter4f",
      "restype": "fr_int",
      "args": [
        {
          "name": "effect",
          "type": "fr_post_effect"
        },
        {
          "name": "name",
          "type": "fr_char const*"
        },
        {
          "name": "x",
          "type": "fr_float"
        },
        {
          "name": "y",
          "type": "fr_float"
        },
        {
          "name": "z",
          "type": "fr_float"
        },
        {
          "name": "w",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frRegisterPlugin": {
      "name": "frRegisterPlugin",
      "restype": "fr_int",
      "args": [
        {
          "name": "path",
          "type": "fr_char const*"
        }
      ],
      "docs": null
    },
    "frSceneAttachHeteroVolume": {
      "name": "frSceneAttachHeteroVolume",
      "restype": "fr_int",
      "args": [
        {
          "name": "scene",
          "type": "fr_scene"
        },
        {
          "name": "heteroVolume",
          "type": "fr_hetero_volume"
        }
      ],
      "docs": null
    },
    "frSceneAttachLight": {
      "name": "frSceneAttachLight",
      "restype": "fr_int",
      "args": [
        {
          "name": "scene",
          "type": "fr_scene"
        },
        {
          "name": "light",
          "type": "fr_light"
        }
      ],
      "docs": null
    },
    "frSceneAttachShape": {
      "name": "frSceneAttachShape",
      "restype": "fr_int",
      "args": [
        {
          "name": "scene",
          "type": "fr_scene"
        },
        {
          "name": "shape",
          "type": "fr_shape"
        }
      ],
      "docs": null
    },
    "frSceneClear": {
      "name": "frSceneClear",
      "restype": "fr_int",
      "args": [
        {
          "name": "scene",
          "type": "fr_scene"
        }
      ],
      "docs": null
    },
    "frSceneDetachHeteroVolume": {
      "name": "frSceneDetachHeteroVolume",
      "restype": "fr_int",
      "args": [
        {
          "name": "scene",
          "type": "fr_scene"
        },
        {
          "name": "heteroVolume",
          "type": "fr_hetero_volume"
        }
      ],
      "docs": null
    },
    "frSceneDetachLight": {
      "name": "frSceneDetachLight",
      "restype": "fr_int",
      "args": [
        {
          "name": "scene",
          "type": "fr_scene"
        },
        {
          "name": "light",
          "type": "fr_light"
        }
      ],
      "docs": null
    },
    "frSceneDetachShape": {
      "name": "frSceneDetachShape",
      "restype": "fr_int",
      "args": [
        {
          "name": "scene",
          "type": "fr_scene"
        },
        {
          "name": "shape",
          "type": "fr_shape"
        }
      ],
      "docs": null
    },
    "frSceneGetBackgroundImage": {
      "name": "frSceneGetBackgroundImage",
      "restype": "fr_int",
      "args": [
        {
          "name": "scene",
          "type": "fr_scene"
        },
        {
          "name": "out_image",
          "type": "fr_image*"
        }
      ],
      "docs": null
    },
    "frSceneGetCamera": {
      "name": "frSceneGetCamera",
      "restype": "fr_int",
      "args": [
        {
          "name": "scene",
          "type": "fr_scene"
        },
        {
          "name": "out_camera",
          "type": "fr_camera*"
        }
      ],
      "docs": null
    },
    "frSceneGetEnvironmentOverride": {
      "name": "frSceneGetEnvironmentOverride",
      "restype": "fr_int",
      "args": [
        {
          "name": "scene",
          "type": "fr_scene"
        },
        {
          "name": "overrride",
          "type": "fr_environment_override"
        },
        {
          "name": "out_light",
          "type": "fr_light*"
        }
      ],
      "docs": null
    },
    "frSceneGetInfo": {
      "name": "frSceneGetInfo",
      "restype": "fr_int",
      "args": [
        {
          "name": "scene",
          "type": "fr_scene"
        },
        {
          "name": "info",
          "type": "fr_scene_info"
        },
        {
          "name": "size",
          "type": "size_t"
        },
        {
          "name": "data",
          "type": "void*"
        },
        {
          "name": "size_ret",
          "type": "size_t*"
        }
      ],
      "docs": null
    },
    "frSceneSetBackgroundImage": {
      "name": "frSceneSetBackgroundImage",
      "restype": "fr_int",
      "args": [
        {
          "name": "scene",
          "type": "fr_scene"
        },
        {
          "name": "image",
          "type": "fr_image"
        }
      ],
      "docs": null
    },
    "frSceneSetCamera": {
      "name": "frSceneSetCamera",
      "restype": "fr_int",
      "args": [
        {
          "name": "scene",
          "type": "fr_scene"
        },
        {
          "name": "camera",
          "type": "fr_camera"
        }
      ],
      "docs": null
    },
    "frSceneSetEnvironmentOverride": {
      "name": "frSceneSetEnvironmentOverride",
      "restype": "fr_int",
      "args": [
        {
          "name": "scene",
          "type": "fr_scene"
        },
        {
          "name": "overrride",
          "type": "fr_environment_override"
        },
        {
          "name": "light",
          "type": "fr_light"
        }
      ],
      "docs": null
    },
    "frShapeGetInfo": {
      "name": "frShapeGetInfo",
      "restype": "fr_int",
      "args": [
        {
          "name": "arg0",
          "type": "fr_shape"
        },
        {
          "name": "arg1",
          "type": "fr_shape_info"
        },
        {
          "name": "arg2",
          "type": "size_t"
        },
        {
          "name": "arg3",
          "type": "void*"
        },
        {
          "name": "arg4",
          "type": "size_t*"
        }
      ],
      "docs": null
    },
    "frShapeSetAngularMotion": {
      "name": "frShapeSetAngularMotion",
      "restype": "fr_int",
      "args": [
        {
          "name": "shape",
          "type": "fr_shape"
        },
        {
          "name": "x",
          "type": "fr_float"
        },
        {
          "name": "y",
          "type": "fr_float"
        },
        {
          "name": "z",
          "type": "fr_float"
        },
        {
          "name": "w",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frShapeSetDisplacementMaterial": {
      "name": "frShapeSetDisplacementMaterial",
      "restype": "fr_int",
      "args": [
        {
          "name": "shape",
          "type": "fr_shape"
        },
        {
          "name": "materialNode",
          "type": "fr_material_node"
        }
      ],
      "docs": null
    },
    "frShapeSetDisplacementScale": {
      "name": "frShapeSetDisplacementScale",
      "restype": "fr_int",
      "args": [
        {
          "name": "shape",
          "type": "fr_shape"
        },
        {
          "name": "minscale",
          "type": "fr_float"
        },
        {
          "name": "maxscale",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frShapeSetHeteroVolume": {
      "name": "frShapeSetHeteroVolume",
      "restype": "fr_int",
      "args": [
        {
          "name": "shape",
          "type": "fr_shape"
        },
        {
          "name": "heteroVolume",
          "type": "fr_hetero_volume"
        }
      ],
      "docs": null
    },
    "frShapeSetLinearMotion": {
      "name": "frShapeSetLinearMotion",
      "restype": "fr_int",
      "args": [
        {
          "name": "shape",
          "type": "fr_shape"
        },
        {
          "name": "x",
          "type": "fr_float"
        },
        {
          "name": "y",
          "type": "fr_float"
        },
        {
          "name": "z",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frShapeSetMaterial": {
      "name": "frShapeSetMaterial",
      "restype": "fr_int",
      "args": [
        {
          "name": "shape",
          "type": "fr_shape"
        },
        {
          "name": "node",
          "type": "fr_material_node"
        }
      ],
      "docs": null
    },
    "frShapeSetMaterialFaces": {
      "name": "frShapeSetMaterialFaces",
      "restype": "fr_int",
      "args": [
        {
          "name": "shape",
          "type": "fr_shape"
        },
        {
          "name": "node",
          "type": "fr_material_node"
        },
        {
          "name": "face_indices",
          "type": "fr_int*"
        },
        {
          "name": "num_faces",
          "type": "size_t"
        }
      ],
      "docs": null
    },
    "frShapeSetObjectGroupID": {
      "name": "frShapeSetObjectGroupID",
      "restype": "fr_int",
      "args": [
        {
          "name": "shape",
          "type": "fr_shape"
        },
        {
          "name": "objectGroupID",
          "type": "fr_uint"
        }
      ],
      "docs": null
    },
    "frShapeSetScaleMotion": {
      "name": "frShapeSetScaleMotion",
      "restype": "fr_int",
      "args": [
        {
          "name": "shape",
          "type": "fr_shape"
        },
        {
          "name": "x",
          "type": "fr_float"
        },
        {
          "name": "y",
          "type": "fr_float"
        },
        {
          "name": "z",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frShapeSetShadow": {
      "name": "frShapeSetShadow",
      "restype": "fr_int",
      "args": [
        {
          "name": "shape",
          "type": "fr_shape"
        },
        {
          "name": "casts_shadow",
          "type": "fr_bool"
        }
      ],
      "docs": null
    },
    "frShapeSetShadowCatcher": {
      "name": "frShapeSetShadowCatcher",
      "restype": "fr_int",
      "args": [
        {
          "name": "shape",
          "type": "fr_shape"
        },
        {
          "name": "shadowCatcher",
          "type": "fr_bool"
        }
      ],
      "docs": null
    },
    "frShapeSetSubdivisionBoundaryInterop": {
      "name": "frShapeSetSubdivisionBoundaryInterop",
      "restype": "fr_int",
      "args": [
        {
          "name": "shape",
          "type": "fr_shape"
        },
        {
          "name": "type",
          "type": "fr_subdiv_boundary_interfop_type"
        }
      ],
      "docs": null
    },
    "frShapeSetSubdivisionCreaseWeight": {
      "name": "frShapeSetSubdivisionCreaseWeight",
      "restype": "fr_int",
      "args": [
        {
          "name": "shape",
          "type": "fr_shape"
        },
        {
          "name": "factor",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frShapeSetSubdivisionFactor": {
      "name": "frShapeSetSubdivisionFactor",
      "restype": "fr_int",
      "args": [
        {
          "name": "shape",
          "type": "fr_shape"
        },
        {
          "name": "factor",
          "type": "fr_uint"
        }
      ],
      "docs": null
    },
    "frShapeSetTransform": {
      "name": "frShapeSetTransform",
      "restype": "fr_int",
      "args": [
        {
          "name": "shape",
          "type": "fr_shape"
        },
        {
          "name": "transpose",
          "type": "fr_bool"
        },
        {
          "name": "transform",
          "type": "fr_float const*"
        }
      ],
      "docs": null
    },
    "frShapeSetVisibility": {
      "name": "frShapeSetVisibility",
      "restype": "fr_int",
      "args": [
        {
          "name": "shape",
          "type": "fr_shape"
        },
        {
          "name": "visible",
          "type": "fr_bool"
        }
      ],
      "docs": null
    },
    "frShapeSetVisibilityInSpecular": {
      "name": "frShapeSetVisibilityInSpecular",
      "restype": "fr_int",
      "args": [
        {
          "name": "shape",
          "type": "fr_shape"
        },
        {
          "name": "visible",
          "type": "fr_bool"
        }
      ],
      "docs": null
    },
    "frShapeSetVisibilityPrimaryOnly": {
      "name": "frShapeSetVisibilityPrimaryOnly",
      "restype": "fr_int",
      "args": [
        {
          "name": "shape",
          "type": "fr_shape"
        },
        {
          "name": "visible",
          "type": "fr_bool"
        }
      ],
      "docs": null
    },
    "frShapeSetVolumeMaterial": {
      "name": "frShapeSetVolumeMaterial",
      "restype": "fr_int",
      "args": [
        {
          "name": "shape",
          "type": "fr_shape"
        },
        {
          "name": "node",
          "type": "fr_material_node"
        }
      ],
      "docs": null
    },
    "frSkyLightAttachPortal": {
      "name": "frSkyLightAttachPortal",
      "restype": "fr_int",
      "args": [
        {
          "name": "scene",
          "type": "fr_scene"
        },
        {
          "name": "skylight",
          "type": "fr_light"
        },
        {
          "name": "portal",
          "type": "fr_shape"
        }
      ],
      "docs": null
    },
    "frSkyLightDetachPortal": {
      "name": "frSkyLightDetachPortal",
      "restype": "fr_int",
      "args": [
        {
          "name": "scene",
          "type": "fr_scene"
        },
        {
          "name": "skylight",
          "type": "fr_light"
        },
        {
          "name": "portal",
          "type": "fr_shape"
        }
      ],
      "docs": null
    },
    "frSkyLightSetAlbedo": {
      "name": "frSkyLightSetAlbedo",
      "restype": "fr_int",
      "args": [
        {
          "name": "skylight",
          "type": "fr_light"
        },
        {
          "name": "albedo",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frSkyLightSetScale": {
      "name": "frSkyLightSetScale",
      "restype": "fr_int",
      "args": [
        {
          "name": "skylight",
          "type": "fr_light"
        },
        {
          "name": "scale",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frSkyLightSetTurbidity": {
      "name": "frSkyLightSetTurbidity",
      "restype": "fr_int",
      "args": [
        {
          "name": "skylight",
          "type": "fr_light"
        },
        {
          "name": "turbidity",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frSpotLightSetConeShape": {
      "name": "frSpotLightSetConeShape",
      "restype": "fr_int",
      "args": [
        {
          "name": "light",
          "type": "fr_light"
        },
        {
          "name": "iangle",
          "type": "fr_float"
        },
        {
          "name": "oangle",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "frSpotLightSetRadiantPower3f": {
      "name": "frSpotLightSetRadiantPower3f",
      "restype": "fr_int",
      "args": [
        {
          "name": "light",
          "type": "fr_light"
        },
        {
          "name": "r",
          "type": "fr_float"
        },
        {
          "name": "g",
          "type": "fr_float"
        },
        {
          "name": "b",
          "type": "fr_float"
        }
      ],
      "docs": null
    },
    "rprCameraGetInfo": {
      "name": "rprCameraGetInfo",
      "restype": "rpr_int",
      "args": [
        {
          "name": "camera",
          "type": "rpr_camera"
        },
        {
          "name": "camera_info",
          "type": "rpr_camera_info"
        },
        {
          "name": "size",
          "type": "size_t"
        },
        {
          "name": "data",
          "type": "void*"
        },
        {
          "name": "size_ret",
          "type": "size_t*"
        }
      ],
      "docs": [
        "rpr_int rprCameraGetInfo(rpr_camera camera, rpr_camera_info camera_info, size_t size, void * data, size_t * size_ret);\n",
        [
          "/** @brief Query information about a camera\n",
          " *\n",
          " *  The workflow is usually two-step: query with the data == NULL to get the required buffer size,\n",
          " *  then query with size_ret == NULL to fill the buffer with the data.\n",
          " *   Possible error codes:\n",
          " *      RPR_ERROR_INVALID_PARAMETER\n",
          " *\n",
          " *  @param  camera      The camera to query\n",
          " *  @param  camera_info The type of info to query\n",
          " *  @param  size        The size of the buffer pointed by data\n",
          " *  @param  data        The buffer to store queried info\n",
          " *  @param  size_ret    Returns the size in bytes of the data being queried\n",
          " *  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprCameraLookAt": {
      "name": "rprCameraLookAt",
      "restype": "rpr_int",
      "args": [
        {
          "name": "camera",
          "type": "rpr_camera"
        },
        {
          "name": "posx",
          "type": "rpr_float"
        },
        {
          "name": "posy",
          "type": "rpr_float"
        },
        {
          "name": "posz",
          "type": "rpr_float"
        },
        {
          "name": "atx",
          "type": "rpr_float"
        },
        {
          "name": "aty",
          "type": "rpr_float"
        },
        {
          "name": "atz",
          "type": "rpr_float"
        },
        {
          "name": "upx",
          "type": "rpr_float"
        },
        {
          "name": "upy",
          "type": "rpr_float"
        },
        {
          "name": "upz",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprCameraLookAt(rpr_camera camera, rpr_float posx, rpr_float posy, rpr_float posz, rpr_float atx, rpr_float aty, rpr_float atz, rpr_float upx, rpr_float upy, rpr_float upz);\n",
        [
          "/** @brief Set camera transform in lookat form\n",
          " *\n",
          " *  @param  camera  The camera to set transform for\n",
          " *  @param  posx    X component of the position\n",
          " *  @param  posy    Y component of the position\n",
          " *  @param  posz    Z component of the position\n",
          " *  @param  atx     X component of the center point\n",
          " *  @param  aty     Y component of the center point\n",
          " *  @param  atz     Z component of the center point\n",
          " *  @param  upx     X component of the up vector\n",
          " *  @param  upy     Y component of the up vector\n",
          " *  @param  upz     Z component of the up vector\n",
          " *  @return         RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprCameraSetApertureBlades": {
      "name": "rprCameraSetApertureBlades",
      "restype": "rpr_int",
      "args": [
        {
          "name": "camera",
          "type": "rpr_camera"
        },
        {
          "name": "num_blades",
          "type": "rpr_uint"
        }
      ],
      "docs": [
        "rpr_int rprCameraSetApertureBlades(rpr_camera camera, rpr_uint num_blades);\n",
        [
          "/** @brief Set the number of aperture blades\n",
          " *\n",
          " *   Possible error codes:\n",
          " *      RPR_ERROR_INVALID_PARAMETER\n",
          " *\n",
          " *  @param  camera      The camera to set aperture blades for\n",
          " *  @param  num_blades  Number of aperture blades 4 to 32\n",
          " *  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprCameraSetExposure": {
      "name": "rprCameraSetExposure",
      "restype": "rpr_int",
      "args": [
        {
          "name": "camera",
          "type": "rpr_camera"
        },
        {
          "name": "exposure",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprCameraSetExposure(rpr_camera camera, rpr_float exposure);\n",
        [
          "/** @brief Set the exposure of a camera\n",
          " *\n",
          " *   Possible error codes:\n",
          " *      RPR_ERROR_INVALID_PARAMETER\n",
          " *\n",
          " *  @param  camera    The camera to set aperture blades for\n",
          " *  @param  exposure  Exposure value 0.0 - 1.0\n",
          " *  @return           RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprCameraSetFStop": {
      "name": "rprCameraSetFStop",
      "restype": "rpr_int",
      "args": [
        {
          "name": "camera",
          "type": "rpr_camera"
        },
        {
          "name": "fstop",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprCameraSetFStop(rpr_camera camera, rpr_float fstop);\n",
        [
          "/** @brief Set f-stop for the camera\n",
          " *\n",
          " *  @param  camera  The camera to set f-stop for\n",
          " *  @param  fstop   f-stop value in mm^-1, default is FLT_MAX\n",
          " *  @return         RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprCameraSetFarPlane": {
      "name": "rprCameraSetFarPlane",
      "restype": "rpr_int",
      "args": [
        {
          "name": "camera",
          "type": "rpr_camera"
        },
        {
          "name": "far",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprCameraSetFarPlane(rpr_camera camera, rpr_float far);\n",
        [
          "/** @brief Set far plane of a camear\n",
          "*\n",
          "*  @param  camera  The camera to set far plane for\n",
          "*  @param  far   Far plane distance in meters, default is 100000000.f\n",
          "*  @return         RPR_SUCCESS in case of success, error code otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprCameraSetFocalLength": {
      "name": "rprCameraSetFocalLength",
      "restype": "rpr_int",
      "args": [
        {
          "name": "camera",
          "type": "rpr_camera"
        },
        {
          "name": "flength",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprCameraSetFocalLength(rpr_camera camera, rpr_float flength);\n",
        [
          "/** @brief Set camera focal length.\n",
          " *\n",
          " *  @param  camera  The camera to set focal length\n",
          " *  @param  flength Focal length in millimeters, default is 35mm\n",
          " *  @return         RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprCameraSetFocalTilt": {
      "name": "rprCameraSetFocalTilt",
      "restype": "rpr_int",
      "args": [
        {
          "name": "camera",
          "type": "rpr_camera"
        },
        {
          "name": "tilt",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprCameraSetFocalTilt(rpr_camera camera, rpr_float tilt);\n",
        [
          "/** @brief Set orthographic view volume width\n",
          " *\n",
          " *  @param  camera  The camera to set volume width for\n",
          " *  @param  width   View volume width in meters, default is 1 meter\n",
          " *  @return         RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprCameraSetFocusDistance": {
      "name": "rprCameraSetFocusDistance",
      "restype": "rpr_int",
      "args": [
        {
          "name": "camera",
          "type": "rpr_camera"
        },
        {
          "name": "fdist",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprCameraSetFocusDistance(rpr_camera camera, rpr_float fdist);\n",
        [
          "/** @brief Set camera focus distance\n",
          " *\n",
          " *  @param  camera  The camera to set focus distance\n",
          " *  @param  fdist   Focus distance in meters, default is 1m\n",
          " *  @return         RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprCameraSetIPD": {
      "name": "rprCameraSetIPD",
      "restype": "rpr_int",
      "args": [
        {
          "name": "camera",
          "type": "rpr_camera"
        },
        {
          "name": "ipd",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprCameraSetIPD(rpr_camera camera, rpr_float ipd);\n",
        [
          "/** @brief Set orthographic view volume width\n",
          " *\n",
          " *  @param  camera  The camera to set volume width for\n",
          " *  @param  width   View volume width in meters, default is 1 meter\n",
          " *  @return         RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprCameraSetLensShift": {
      "name": "rprCameraSetLensShift",
      "restype": "rpr_int",
      "args": [
        {
          "name": "camera",
          "type": "rpr_camera"
        },
        {
          "name": "shiftx",
          "type": "rpr_float"
        },
        {
          "name": "shifty",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprCameraSetLensShift(rpr_camera camera, rpr_float shiftx, rpr_float shifty);\n",
        [
          "/** @brief Set orthographic view volume width\n",
          " *\n",
          " *  @param  camera  The camera to set volume width for\n",
          " *  @param  width   View volume width in meters, default is 1 meter\n",
          " *  @return         RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprCameraSetMode": {
      "name": "rprCameraSetMode",
      "restype": "rpr_int",
      "args": [
        {
          "name": "camera",
          "type": "rpr_camera"
        },
        {
          "name": "mode",
          "type": "rpr_camera_mode"
        }
      ],
      "docs": [
        "rpr_int rprCameraSetMode(rpr_camera camera, rpr_camera_mode mode);\n",
        [
          "/** @brief Set camera mode\n",
          " *\n",
          " *  Camera modes include:\n",
          " *      RPR_CAMERA_MODE_PERSPECTIVE\n",
          " *      RPR_CAMERA_MODE_ORTHOGRAPHIC\n",
          " *      RPR_CAMERA_MODE_LATITUDE_LONGITUDE_360\n",
          " *      RPR_CAMERA_MODE_LATITUDE_LONGITUDE_STEREO\n",
          " *      RPR_CAMERA_MODE_CUBEMAP\n",
          " *      RPR_CAMERA_MODE_CUBEMAP_STEREO\n",
          " *      RPR_CAMERA_MODE_FISHEYE\n",
          " *\n",
          " *  @param  camera  The camera to set mode for\n",
          " *  @param  mode    Camera mode, default is RPR_CAMERA_MODE_PERSPECTIVE\n",
          " *  @return         RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprCameraSetNearPlane": {
      "name": "rprCameraSetNearPlane",
      "restype": "rpr_int",
      "args": [
        {
          "name": "camera",
          "type": "rpr_camera"
        },
        {
          "name": "near",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprCameraSetNearPlane(rpr_camera camera, rpr_float near);\n",
        [
          "/** @brief Set near plane of a camear\n",
          "*\n",
          "*  @param  camera  The camera to set near plane for\n",
          "*  @param  near   Near plane distance in meters, default is 0.01f\n",
          "*  @return         RPR_SUCCESS in case of success, error code otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprCameraSetOrthoHeight": {
      "name": "rprCameraSetOrthoHeight",
      "restype": "rpr_int",
      "args": [
        {
          "name": "camera",
          "type": "rpr_camera"
        },
        {
          "name": "height",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprCameraSetOrthoHeight(rpr_camera camera, rpr_float height);\n",
        [
          "/** @brief Set orthographic view volume height\n",
          "*\n",
          "*  @param  camera  The camera to set volume height for\n",
          "*  @param  width   View volume height in meters, default is 1 meter\n",
          "*  @return         RPR_SUCCESS in case of success, error code otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprCameraSetOrthoWidth": {
      "name": "rprCameraSetOrthoWidth",
      "restype": "rpr_int",
      "args": [
        {
          "name": "camera",
          "type": "rpr_camera"
        },
        {
          "name": "width",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprCameraSetOrthoWidth(rpr_camera camera, rpr_float width);\n",
        [
          "/** @brief Set orthographic view volume width\n",
          " *\n",
          " *  @param  camera  The camera to set volume width for\n",
          " *  @param  width   View volume width in meters, default is 1 meter\n",
          " *  @return         RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprCameraSetSensorSize": {
      "name": "rprCameraSetSensorSize",
      "restype": "rpr_int",
      "args": [
        {
          "name": "camera",
          "type": "rpr_camera"
        },
        {
          "name": "width",
          "type": "rpr_float"
        },
        {
          "name": "height",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprCameraSetSensorSize(rpr_camera camera, rpr_float width, rpr_float height);\n",
        [
          "/** @brief Set sensor size for the camera\n",
          " *\n",
          " *  Default sensor size is the one corresponding to full frame 36x24mm sensor\n",
          " *\n",
          " *  @param  camera  The camera to set transform for\n",
          " *  @param  width   Sensor width in millimeters\n",
          " *  @param  height  Sensor height in millimeters\n",
          " *  @return         RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprCameraSetTiltCorrection": {
      "name": "rprCameraSetTiltCorrection",
      "restype": "rpr_int",
      "args": [
        {
          "name": "camera",
          "type": "rpr_camera"
        },
        {
          "name": "tiltX",
          "type": "rpr_float"
        },
        {
          "name": "tiltY",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprCameraSetTiltCorrection(rpr_camera camera, rpr_float tiltX, rpr_float tiltY);\n",
        [
          "/** @brief Set orthographic view volume width\n",
          " *\n",
          " *  @param  camera  The camera to set volume width for\n",
          " *  @param  width   View volume width in meters, default is 1 meter\n",
          " *  @return         RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprCameraSetTransform": {
      "name": "rprCameraSetTransform",
      "restype": "rpr_int",
      "args": [
        {
          "name": "camera",
          "type": "rpr_camera"
        },
        {
          "name": "transpose",
          "type": "rpr_bool"
        },
        {
          "name": "transform",
          "type": "rpr_float*"
        }
      ],
      "docs": [
        "rpr_int rprCameraSetTransform(rpr_camera camera, rpr_bool transpose, rpr_float * transform);\n",
        [
          "/** @brief Set world transform for the camera\n",
          " *\n",
          " *  @param  camera      The camera to set transform for\n",
          " *  @param  transpose   Determines whether the basis vectors are in columns(false) or in rows(true) of the matrix\n",
          " *  @param  transform   Array of 16 rpr_float values (row-major form)\n",
          " *  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprCompositeCompute": {
      "name": "rprCompositeCompute",
      "restype": "rpr_int",
      "args": [
        {
          "name": "composite",
          "type": "rpr_composite"
        },
        {
          "name": "fb",
          "type": "rpr_framebuffer"
        }
      ],
      "docs": [
        "rpr_int rprCompositeCompute(rpr_composite composite, rpr_framebuffer fb);\n",
        [
          "/** @brief Set image input value\n",
          "*\n",
          "*   Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*\n",
          "*/\n"
        ]
      ]
    },
    "rprCompositeGetInfo": {
      "name": "rprCompositeGetInfo",
      "restype": "rpr_int",
      "args": [
        {
          "name": "composite",
          "type": "rpr_composite"
        },
        {
          "name": "composite_info",
          "type": "rpr_composite_info"
        },
        {
          "name": "size",
          "type": "size_t"
        },
        {
          "name": "data",
          "type": "void*"
        },
        {
          "name": "size_ret",
          "type": "size_t*"
        }
      ],
      "docs": [
        "rpr_int rprCompositeGetInfo(rpr_composite composite, rpr_composite_info composite_info, size_t size, void *  data, size_t * size_ret);\n",
        [
          "/** @brief Set image input value\n",
          "*\n",
          "*   Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*\n",
          "*/\n"
        ]
      ]
    },
    "rprCompositeSetInput1u": {
      "name": "rprCompositeSetInput1u",
      "restype": "rpr_int",
      "args": [
        {
          "name": "composite",
          "type": "rpr_composite"
        },
        {
          "name": "inputName",
          "type": "char const*"
        },
        {
          "name": "value",
          "type": "unsigned int"
        }
      ],
      "docs": [
        "rpr_int rprCompositeSetInput1u(rpr_composite composite, const char * inputName, unsigned int value);\n",
        [
          "/** @brief Set image input value\n",
          "*\n",
          "*   Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*\n",
          "*/\n"
        ]
      ]
    },
    "rprCompositeSetInput4f": {
      "name": "rprCompositeSetInput4f",
      "restype": "rpr_int",
      "args": [
        {
          "name": "composite",
          "type": "rpr_composite"
        },
        {
          "name": "inputName",
          "type": "char const*"
        },
        {
          "name": "x",
          "type": "float"
        },
        {
          "name": "y",
          "type": "float"
        },
        {
          "name": "z",
          "type": "float"
        },
        {
          "name": "w",
          "type": "float"
        }
      ],
      "docs": [
        "rpr_int rprCompositeSetInput4f(rpr_composite composite, const char * inputName, float x, float y, float z, float w);\n",
        [
          "/** @brief Set image input value\n",
          "*\n",
          "*   Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*\n",
          "*/\n"
        ]
      ]
    },
    "rprCompositeSetInputC": {
      "name": "rprCompositeSetInputC",
      "restype": "rpr_int",
      "args": [
        {
          "name": "composite",
          "type": "rpr_composite"
        },
        {
          "name": "inputName",
          "type": "char const*"
        },
        {
          "name": "input",
          "type": "rpr_composite"
        }
      ],
      "docs": [
        "rpr_int rprCompositeSetInputC(rpr_composite composite, const char * inputName, rpr_composite input);\n",
        [
          "/** @brief Set image input value\n",
          "*\n",
          "*   Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*\n",
          "*/\n"
        ]
      ]
    },
    "rprCompositeSetInputFb": {
      "name": "rprCompositeSetInputFb",
      "restype": "rpr_int",
      "args": [
        {
          "name": "composite",
          "type": "rpr_composite"
        },
        {
          "name": "inputName",
          "type": "char const*"
        },
        {
          "name": "input",
          "type": "rpr_framebuffer"
        }
      ],
      "docs": [
        "rpr_int rprCompositeSetInputFb(rpr_composite composite, const char * inputName, rpr_framebuffer input);\n",
        [
          "/** @brief Set image input value\n",
          "*\n",
          "*   Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*\n",
          "*/\n"
        ]
      ]
    },
    "rprCompositeSetInputOp": {
      "name": "rprCompositeSetInputOp",
      "restype": "rpr_int",
      "args": [
        {
          "name": "composite",
          "type": "rpr_composite"
        },
        {
          "name": "inputName",
          "type": "char const*"
        },
        {
          "name": "op",
          "type": "rpr_material_node_arithmetic_operation"
        }
      ],
      "docs": [
        "rpr_int rprCompositeSetInputOp(rpr_composite composite, const char * inputName, rpr_material_node_arithmetic_operation op);\n",
        [
          "/** @brief Set image input value\n",
          "*\n",
          "*   Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*\n",
          "*/\n"
        ]
      ]
    },
    "rprContextAttachPostEffect": {
      "name": "rprContextAttachPostEffect",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "effect",
          "type": "rpr_post_effect"
        }
      ],
      "docs": [
        "rpr_int rprContextAttachPostEffect(rpr_context context, rpr_post_effect effect);\n",
        [
          "/** @brief Create post effect\n",
          "*\n",
          "*  Create analytic point light represented by a point in space.\n",
          "*  Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*\n",
          "*  @param  context The context to create a light for\n",
          "*  @param  status  RPR_SUCCESS in case of success, error code otherwise\n",
          "*  @return         Light object\n",
          "*/\n"
        ]
      ]
    },
    "rprContextClearMemory": {
      "name": "rprContextClearMemory",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        }
      ],
      "docs": [
        "rpr_int rprContextClearMemory(rpr_context context);\n",
        [
          "/** @brief Clear all video memory used by the context\n",
          " *\n",
          " *  This function should be called after all context objects have been destroyed.\n",
          " *  It guarantees that all context memory is freed and returns the context into its initial state.\n",
          " *  Will be removed later. Possible error codes are:\n",
          " *\n",
          " *      RPR_ERROR_INTERNAL_ERROR\n",
          " *\n",
          " *  @param  context     The context to wipe out\n",
          " *  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprContextCreateBuffer": {
      "name": "rprContextCreateBuffer",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "buffer_desc",
          "type": "rpr_buffer_desc const*"
        },
        {
          "name": "data",
          "type": "void const*"
        },
        {
          "name": "out_buffer",
          "type": "rpr_buffer*"
        }
      ],
      "docs": [
        "rpr_int rprContextCreateBuffer(rpr_context context, rpr_buffer_desc const * buffer_desc, void const * data, rpr_buffer * out_buffer);\n",
        [
          "/** @brief Create a buffer from memory data\n",
          " *\n",
          " *  Buffers are used as arbitrary input for other nodes\n",
          " *\n",
          " *      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          " *      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          " *      RPR_ERROR_UNSUPPORTED_IMAGE_FORMAT\n",
          " *      RPR_ERROR_INVALID_PARAMETER\n",
          " *\n",
          " *  @param  context     The context to create image\n",
          " *  @param  buffer_desc Buffer layout description\n",
          " *  @param  data        Image data in system memory, can be NULL in which case the memory is allocated\n",
          " *  @param  out_buffer  Pointer to buffer object\n",
          " *  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprContextCreateCamera": {
      "name": "rprContextCreateCamera",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "out_camera",
          "type": "rpr_camera*"
        }
      ],
      "docs": [
        "rpr_int rprContextCreateCamera(rpr_context context, rpr_camera * out_camera);\n",
        [
          "/** @brief Create a camera\n",
          " *\n",
          " *  There are several camera types supported by a single rpr_camera type.\n",
          " *  Possible error codes are:\n",
          " *\n",
          " *      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          " *      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          " *\n",
          " *  @param  context The context to create a camera for\n",
          " *  @param  out_camera Pointer to camera object\n",
          " *  @return RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprContextCreateComposite": {
      "name": "rprContextCreateComposite",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "in_type",
          "type": "rpr_composite_type"
        },
        {
          "name": "out_composite",
          "type": "rpr_composite*"
        }
      ],
      "docs": [
        "rpr_int rprContextCreateComposite(rpr_context context, rpr_composite_type in_type, rpr_composite * out_composite);\n",
        [
          "/** @brief Set image input value\n",
          "*\n",
          "*   Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*\n",
          "*/\n"
        ]
      ]
    },
    "rprContextCreateDirectionalLight": {
      "name": "rprContextCreateDirectionalLight",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "out_light",
          "type": "rpr_light*"
        }
      ],
      "docs": [
        "rpr_int rprContextCreateDirectionalLight(rpr_context context, rpr_light * out_light);\n",
        [
          "/** @brief Create directional light\n",
          " *\n",
          " *  Create analytic directional light.\n",
          " *  Possible error codes:\n",
          " *      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          " *      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          " *\n",
          " *  @param  context The context to create a light for\n",
          " *  @param  status  RPR_SUCCESS in case of success, error code otherwise\n",
          " *  @return light id of a newly created light\n",
          " */\n"
        ]
      ]
    },
    "rprContextCreateEnvironmentLight": {
      "name": "rprContextCreateEnvironmentLight",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "out_light",
          "type": "rpr_light*"
        }
      ],
      "docs": [
        "rpr_int rprContextCreateEnvironmentLight(rpr_context context, rpr_light * out_light);\n",
        [
          "/** @brief Create an environment light\n",
          " *\n",
          " *  Environment light is a light based on lightprobe.\n",
          " *  Possible error codes:\n",
          " *      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          " *      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          " *\n",
          " *  @param  context The context to create a light for\n",
          " *  @param  status  RPR_SUCCESS in case of success, error code otherwise\n",
          " *  @return         Light object\n",
          " */\n"
        ]
      ]
    },
    "rprContextCreateFrameBuffer": {
      "name": "rprContextCreateFrameBuffer",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "format",
          "type": "rpr_framebuffer_format const"
        },
        {
          "name": "fb_desc",
          "type": "rpr_framebuffer_desc const*"
        },
        {
          "name": "out_fb",
          "type": "rpr_framebuffer*"
        }
      ],
      "docs": [
        "rpr_int rprContextCreateFrameBuffer(rpr_context context, rpr_framebuffer_format const format, rpr_framebuffer_desc const * fb_desc, rpr_framebuffer * out_fb);\n",
        [
          "/** @brief Create framebuffer object\n",
          " *\n",
          " *  Framebuffer is used to store final rendering result.\n",
          " *\n",
          " *  Possible error codes are:\n",
          " *\n",
          " *      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          " *      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          " *\n",
          " *  @param  context  The context to create framebuffer\n",
          " *  @param  format   Framebuffer format\n",
          " *  @param  fb_desc  Framebuffer layout description\n",
          " *  @param  status   Pointer to framebuffer object\n",
          " *  @return          RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprContextCreateHeteroVolume": {
      "name": "rprContextCreateHeteroVolume",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "out_heteroVolume",
          "type": "rpr_hetero_volume*"
        },
        {
          "name": "gridSizeX",
          "type": "size_t"
        },
        {
          "name": "gridSizeY",
          "type": "size_t"
        },
        {
          "name": "gridSizeZ",
          "type": "size_t"
        },
        {
          "name": "indicesList",
          "type": "void*"
        },
        {
          "name": "numberOfIndices",
          "type": "size_t"
        },
        {
          "name": "indicesListTopology",
          "type": "rpr_hetero_volume_indices_topology"
        },
        {
          "name": "gridData",
          "type": "void*"
        },
        {
          "name": "gridDataSizeByte",
          "type": "size_t"
        },
        {
          "name": "gridDataTopology___unused",
          "type": "rpr_uint"
        }
      ],
      "docs": [
        "rpr_int rprContextCreateHeteroVolume(rpr_context context, rpr_hetero_volume * out_heteroVolume, size_t gridSizeX, size_t gridSizeY, size_t gridSizeZ, void * indicesList, size_t numberOfIndices, rpr_hetero_volume_indices_topology indicesListTopology, void * gridData, size_t gridDataSizeByte, rpr_uint gridDataTopology___unused);\n",
        [
          "/** @brief Create post effect\n",
          "*\n",
          "*  Create analytic point light represented by a point in space.\n",
          "*  Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*\n",
          "*  @param  context The context to create a light for\n",
          "*  @param  status  RPR_SUCCESS in case of success, error code otherwise\n",
          "*  @return         Light object\n",
          "*/\n"
        ]
      ]
    },
    "rprContextCreateIESLight": {
      "name": "rprContextCreateIESLight",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "light",
          "type": "rpr_light*"
        }
      ],
      "docs": [
        "rpr_int rprContextCreateIESLight(rpr_context context, rpr_light * light);\n",
        [
          "/** @brief Create IES light\n",
          "*\n",
          "*  Create IES light\n",
          "*\n",
          "*  Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*\n",
          "*  @param  context The context to create a light for\n",
          "*  @param  status  RPR_SUCCESS in case of success, error code otherwise\n",
          "*  @return         Light object\n",
          "*/\n"
        ]
      ]
    },
    "rprContextCreateImage": {
      "name": "rprContextCreateImage",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "format",
          "type": "rpr_image_format const"
        },
        {
          "name": "image_desc",
          "type": "rpr_image_desc const*"
        },
        {
          "name": "data",
          "type": "void const*"
        },
        {
          "name": "out_image",
          "type": "rpr_image*"
        }
      ],
      "docs": [
        "rpr_int rprContextCreateImage(rpr_context context, rpr_image_format const format, rpr_image_desc const * image_desc, void const * data, rpr_image * out_image);\n",
        [
          "/** @brief Create an image from memory data\n",
          " *\n",
          " *  Images are used as HDRI maps or inputs for various shading system nodes.\n",
          " *  Possible error codes are:\n",
          " *\n",
          " *      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          " *      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          " *      RPR_ERROR_UNSUPPORTED_IMAGE_FORMAT\n",
          " *      RPR_ERROR_INVALID_PARAMETER\n",
          " *\n",
          " *  @param  context     The context to create image\n",
          " *  @param  format      Image format\n",
          " *  @param  image_desc  Image layout description\n",
          " *  @param  data        Image data in system memory, can be NULL in which case the memory is allocated\n",
          " *  @param  out_image   Pointer to image object\n",
          " *  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprContextCreateImageFromFile": {
      "name": "rprContextCreateImageFromFile",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "path",
          "type": "rpr_char const*"
        },
        {
          "name": "out_image",
          "type": "rpr_image*"
        }
      ],
      "docs": [
        "rpr_int rprContextCreateImageFromFile(rpr_context context, rpr_char const * path, rpr_image * out_image);\n",
        [
          "/** @brief Create an image from file\n",
          " *\n",
          " *   Images are used as HDRI maps or inputs for various shading system nodes.\n",
          " *\n",
          " *  The following image formats are supported:\n",
          " *      PNG, JPG, TGA, BMP, TIFF, TX(0-mip), HDR, EXR\n",
          " *\n",
          " *  Possible error codes are:\n",
          " *\n",
          " *      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          " *      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          " *      RPR_ERROR_UNSUPPORTED_IMAGE_FORMAT\n",
          " *      RPR_ERROR_INVALID_PARAMETER\n",
          " *      RPR_ERROR_IO_ERROR\n",
          " *\n",
          " *  @param  context     The context to create image\n",
          " *  @param  path        NULL terminated path to an image file (can be relative)\n",
          " *  @param  out_image   Pointer to image object\n",
          " *  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprContextCreateInstance": {
      "name": "rprContextCreateInstance",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "shape",
          "type": "rpr_shape"
        },
        {
          "name": "out_instance",
          "type": "rpr_shape*"
        }
      ],
      "docs": [
        "rpr_int rprContextCreateInstance(rpr_context context, rpr_shape shape, rpr_shape * out_instance);\n",
        [
          "/** @brief Create an instance of an object\n",
          " *\n",
          " *  Possible error codes are:\n",
          " *\n",
          " *      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          " *      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          " *      RPR_ERROR_INVALID_PARAMETER\n",
          " *\n",
          " *  @param  context  The context to create an instance for\n",
          " *  @param  shape    Parent shape for an instance\n",
          " *  @param  out_instance   Pointer to instance object\n",
          " *  @return RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprContextCreateMaterialSystem": {
      "name": "rprContextCreateMaterialSystem",
      "restype": "rpr_int",
      "args": [
        {
          "name": "in_context",
          "type": "rpr_context"
        },
        {
          "name": "type",
          "type": "rpr_material_system_type"
        },
        {
          "name": "out_matsys",
          "type": "rpr_material_system*"
        }
      ],
      "docs": [
        "rpr_int rprContextCreateMaterialSystem(rpr_context in_context, rpr_material_system_type type, rpr_material_system * out_matsys);\n",
        [
          "/** @brief Create material system\n",
          "*\n",
          "*   Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*\n",
          "*/\n"
        ]
      ]
    },
    "rprContextCreateMesh": {
      "name": "rprContextCreateMesh",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "vertices",
          "type": "rpr_float const*"
        },
        {
          "name": "num_vertices",
          "type": "size_t"
        },
        {
          "name": "vertex_stride",
          "type": "rpr_int"
        },
        {
          "name": "normals",
          "type": "rpr_float const*"
        },
        {
          "name": "num_normals",
          "type": "size_t"
        },
        {
          "name": "normal_stride",
          "type": "rpr_int"
        },
        {
          "name": "texcoords",
          "type": "rpr_float const*"
        },
        {
          "name": "num_texcoords",
          "type": "size_t"
        },
        {
          "name": "texcoord_stride",
          "type": "rpr_int"
        },
        {
          "name": "vertex_indices",
          "type": "rpr_int const*"
        },
        {
          "name": "vidx_stride",
          "type": "rpr_int"
        },
        {
          "name": "normal_indices",
          "type": "rpr_int const*"
        },
        {
          "name": "nidx_stride",
          "type": "rpr_int"
        },
        {
          "name": "texcoord_indices",
          "type": "rpr_int const*"
        },
        {
          "name": "tidx_stride",
          "type": "rpr_int"
        },
        {
          "name": "num_face_vertices",
          "type": "rpr_int const*"
        },
        {
          "name": "num_faces",
          "type": "size_t"
        },
        {
          "name": "out_mesh",
          "type": "rpr_shape*"
        }
      ],
      "docs": [
        "rpr_int rprContextCreateMesh(rpr_context context, rpr_float const * vertices, size_t num_vertices, rpr_int vertex_stride, rpr_float const * normals, size_t num_normals, rpr_int normal_stride, rpr_float const * texcoords, size_t num_texcoords, rpr_int texcoord_stride, rpr_int const * vertex_indices, rpr_int vidx_stride, rpr_int const * normal_indices, rpr_int nidx_stride, rpr_int const * texcoord_indices, rpr_int tidx_stride, rpr_int const * num_face_vertices, size_t num_faces, rpr_shape * out_mesh);\n",
        [
          "/** @brief Create a mesh\n",
          " *\n",
          " *  FireRender supports mixed meshes consisting of triangles and quads.\n",
          " *\n",
          " *  Possible error codes are:\n",
          " *\n",
          " *      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          " *      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          " *      RPR_ERROR_INVALID_PARAMETER\n",
          " *\n",
          " *  @param  vertices            Pointer to position data (each position is described with 3 rpr_float numbers)\n",
          " *  @param  num_vertices        Number of entries in position array\n",
          " *  @param  vertex_stride       Number of bytes between the beginnings of two successive position entries\n",
          " *  @param  normals             Pointer to normal data (each normal is described with 3 rpr_float numbers), can be NULL\n",
          " *  @param  num_normals         Number of entries in normal array\n",
          " *  @param  normal_stride       Number of bytes between the beginnings of two successive normal entries\n",
          " *  @param  texcoord            Pointer to texcoord data (each texcoord is described with 2 rpr_float numbers), can be NULL\n",
          " *  @param  num_texcoords       Number of entries in texcoord array\n",
          " *  @param  texcoord_stride     Number of bytes between the beginnings of two successive texcoord entries\n",
          " *  @param  vertex_indices      Pointer to an array of vertex indices\n",
          " *  @param  vidx_stride         Number of bytes between the beginnings of two successive vertex index entries\n",
          " *  @param  normal_indices      Pointer to an array of normal indices\n",
          " *  @param  nidx_stride         Number of bytes between the beginnings of two successive normal index entries\n",
          " *  @param  texcoord_indices    Pointer to an array of texcoord indices\n",
          " *  @param  tidx_stride         Number of bytes between the beginnings of two successive texcoord index entries\n",
          " *  @param  num_face_vertices   Pointer to an array of num_faces numbers describing number of vertices for each face (can be 3(triangle) or 4(quad))\n",
          " *  @param  num_faces           Number of faces in the mesh\n",
          " *  @param  out_mesh            Pointer to mesh object\n",
          " *  @return                     RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprContextCreateMeshEx": {
      "name": "rprContextCreateMeshEx",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "vertices",
          "type": "rpr_float const*"
        },
        {
          "name": "num_vertices",
          "type": "size_t"
        },
        {
          "name": "vertex_stride",
          "type": "rpr_int"
        },
        {
          "name": "normals",
          "type": "rpr_float const*"
        },
        {
          "name": "num_normals",
          "type": "size_t"
        },
        {
          "name": "normal_stride",
          "type": "rpr_int"
        },
        {
          "name": "perVertexFlag",
          "type": "rpr_int const*"
        },
        {
          "name": "num_perVertexFlags",
          "type": "size_t"
        },
        {
          "name": "perVertexFlag_stride",
          "type": "rpr_int"
        },
        {
          "name": "numberOfTexCoordLayers",
          "type": "rpr_int"
        },
        {
          "name": "texcoords",
          "type": "rpr_float const**"
        },
        {
          "name": "num_texcoords",
          "type": "size_t const*"
        },
        {
          "name": "texcoord_stride",
          "type": "rpr_int const*"
        },
        {
          "name": "vertex_indices",
          "type": "rpr_int const*"
        },
        {
          "name": "vidx_stride",
          "type": "rpr_int"
        },
        {
          "name": "normal_indices",
          "type": "rpr_int const*"
        },
        {
          "name": "nidx_stride",
          "type": "rpr_int"
        },
        {
          "name": "texcoord_indices",
          "type": "rpr_int const**"
        },
        {
          "name": "tidx_stride",
          "type": "rpr_int const*"
        },
        {
          "name": "num_face_vertices",
          "type": "rpr_int const*"
        },
        {
          "name": "num_faces",
          "type": "size_t"
        },
        {
          "name": "out_mesh",
          "type": "rpr_shape*"
        }
      ],
      "docs": [
        "rpr_int rprContextCreateMeshEx(rpr_context context, rpr_float const * vertices, size_t num_vertices, rpr_int vertex_stride, rpr_float const * normals, size_t num_normals, rpr_int normal_stride, rpr_int const * perVertexFlag, size_t num_perVertexFlags, rpr_int perVertexFlag_stride, rpr_int numberOfTexCoordLayers, rpr_float const ** texcoords, size_t const * num_texcoords, rpr_int const * texcoord_stride, rpr_int const * vertex_indices, rpr_int vidx_stride, rpr_int const * normal_indices, rpr_int nidx_stride, rpr_int const ** texcoord_indices, rpr_int const * tidx_stride, rpr_int const * num_face_vertices, size_t num_faces, rpr_shape * out_mesh);\n",
        [
          "/*  @brief Create a mesh\n",
          " *\n",
          " *  @return                     RPR_SUCCESS in case of success, error code otherwise\t\n",
          "\t*/\n"
        ]
      ]
    },
    "rprContextCreateMeshEx2": {
      "name": "rprContextCreateMeshEx2",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "vertices",
          "type": "rpr_float const*"
        },
        {
          "name": "num_vertices",
          "type": "size_t"
        },
        {
          "name": "vertex_stride",
          "type": "rpr_int"
        },
        {
          "name": "normals",
          "type": "rpr_float const*"
        },
        {
          "name": "num_normals",
          "type": "size_t"
        },
        {
          "name": "normal_stride",
          "type": "rpr_int"
        },
        {
          "name": "perVertexFlag",
          "type": "rpr_int const*"
        },
        {
          "name": "num_perVertexFlags",
          "type": "size_t"
        },
        {
          "name": "perVertexFlag_stride",
          "type": "rpr_int"
        },
        {
          "name": "numberOfTexCoordLayers",
          "type": "rpr_int"
        },
        {
          "name": "texcoords",
          "type": "rpr_float const**"
        },
        {
          "name": "num_texcoords",
          "type": "size_t const*"
        },
        {
          "name": "texcoord_stride",
          "type": "rpr_int const*"
        },
        {
          "name": "vertex_indices",
          "type": "rpr_int const*"
        },
        {
          "name": "vidx_stride",
          "type": "rpr_int"
        },
        {
          "name": "normal_indices",
          "type": "rpr_int const*"
        },
        {
          "name": "nidx_stride",
          "type": "rpr_int"
        },
        {
          "name": "texcoord_indices",
          "type": "rpr_int const**"
        },
        {
          "name": "tidx_stride",
          "type": "rpr_int const*"
        },
        {
          "name": "num_face_vertices",
          "type": "rpr_int const*"
        },
        {
          "name": "num_faces",
          "type": "size_t"
        },
        {
          "name": "mesh_properties",
          "type": "rpr_mesh_info const*"
        },
        {
          "name": "out_mesh",
          "type": "rpr_shape*"
        }
      ],
      "docs": [
        "rpr_int rprContextCreateMeshEx2(rpr_context context, rpr_float const * vertices, size_t num_vertices, rpr_int vertex_stride, rpr_float const * normals, size_t num_normals, rpr_int normal_stride, rpr_int const * perVertexFlag, size_t num_perVertexFlags, rpr_int perVertexFlag_stride, rpr_int numberOfTexCoordLayers, rpr_float const ** texcoords, size_t const * num_texcoords, rpr_int const * texcoord_stride, rpr_int const * vertex_indices, rpr_int vidx_stride, rpr_int const * normal_indices, rpr_int nidx_stride, rpr_int const ** texcoord_indices, rpr_int const * tidx_stride, rpr_int const * num_face_vertices, size_t num_faces, rpr_mesh_info const * mesh_properties, rpr_shape * out_mesh);\n",
        [
          "/*  @brief Create a mesh\n",
          " *\n",
          " *  @return                     RPR_SUCCESS in case of success, error code otherwise\t\n",
          "\t*/\n"
        ]
      ]
    },
    "rprContextCreatePointLight": {
      "name": "rprContextCreatePointLight",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "out_light",
          "type": "rpr_light*"
        }
      ],
      "docs": [
        "rpr_int rprContextCreatePointLight(rpr_context context, rpr_light * out_light);\n",
        [
          "/** @brief Create point light\n",
          " *\n",
          " *  Create analytic point light represented by a point in space.\n",
          "  *  Possible error codes:\n",
          " *      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          " *      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          " *\n",
          " *  @param  context The context to create a light for\n",
          " *  @param  status  RPR_SUCCESS in case of success, error code otherwise\n",
          " *  @return         Light object\n",
          " */\n"
        ]
      ]
    },
    "rprContextCreatePostEffect": {
      "name": "rprContextCreatePostEffect",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "type",
          "type": "rpr_post_effect_type"
        },
        {
          "name": "out_effect",
          "type": "rpr_post_effect*"
        }
      ],
      "docs": [
        "rpr_int rprContextCreatePostEffect(rpr_context context, rpr_post_effect_type type, rpr_post_effect * out_effect);\n",
        [
          "/** @brief Create post effect\n",
          "*\n",
          "*  Create analytic point light represented by a point in space.\n",
          "*  Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*\n",
          "*  @param  context The context to create a light for\n",
          "*  @param  status  RPR_SUCCESS in case of success, error code otherwise\n",
          "*  @return         Light object\n",
          "*/\n"
        ]
      ]
    },
    "rprContextCreateScene": {
      "name": "rprContextCreateScene",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "out_scene",
          "type": "rpr_scene*"
        }
      ],
      "docs": [
        "rpr_int rprContextCreateScene(rpr_context context, rpr_scene * out_scene);\n",
        [
          "/** @brief Create a scene\n",
          " *\n",
          " *  Scene serves as a container for lights and objects.\n",
          " *\n",
          " *  Possible error codes are:\n",
          " *\n",
          " *      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          " *\n",
          " *  @param  out_scene   Pointer to scene object\n",
          " *  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprContextCreateSkyLight": {
      "name": "rprContextCreateSkyLight",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "out_light",
          "type": "rpr_light*"
        }
      ],
      "docs": [
        "rpr_int rprContextCreateSkyLight(rpr_context context, rpr_light * out_light);\n",
        [
          "/** @brief Create sky light\n",
          "*\n",
          "*  Analytical sky model\n",
          "*  Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*\n",
          "*  @param  context The context to create a light for\n",
          "*  @param  status  RPR_SUCCESS in case of success, error code otherwise\n",
          "*  @return         Light object\n",
          "*/\n"
        ]
      ]
    },
    "rprContextCreateSpotLight": {
      "name": "rprContextCreateSpotLight",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "light",
          "type": "rpr_light*"
        }
      ],
      "docs": [
        "rpr_int rprContextCreateSpotLight(rpr_context context, rpr_light * light);\n",
        [
          "/** @brief Create spot light\n",
          " *\n",
          " *  Create analytic spot light\n",
          " *\n",
          " *  Possible error codes:\n",
          " *      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          " *      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          " *\n",
          " *  @param  context The context to create a light for\n",
          " *  @param  status  RPR_SUCCESS in case of success, error code otherwise\n",
          " *  @return         Light object\n",
          " */\n"
        ]
      ]
    },
    "rprContextDetachPostEffect": {
      "name": "rprContextDetachPostEffect",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "effect",
          "type": "rpr_post_effect"
        }
      ],
      "docs": [
        "rpr_int rprContextDetachPostEffect(rpr_context context, rpr_post_effect effect);\n",
        [
          "/** @brief Create post effect\n",
          "*\n",
          "*  Create analytic point light represented by a point in space.\n",
          "*  Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*\n",
          "*  @param  context The context to create a light for\n",
          "*  @param  status  RPR_SUCCESS in case of success, error code otherwise\n",
          "*  @return         Light object\n",
          "*/\n"
        ]
      ]
    },
    "rprContextGetAOV": {
      "name": "rprContextGetAOV",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "aov",
          "type": "rpr_aov"
        },
        {
          "name": "out_fb",
          "type": "rpr_framebuffer*"
        }
      ],
      "docs": [
        "rpr_int rprContextGetAOV(rpr_context context, rpr_aov aov, rpr_framebuffer * out_fb);\n",
        [
          "/** @brief Query the AOV\n",
          " *\n",
          " *  @param  context     The context to get a frame buffer from\n",
          " *  @param  out_fb\t\tPointer to framebuffer object\n",
          " *  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprContextGetAttachedPostEffect": {
      "name": "rprContextGetAttachedPostEffect",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "i",
          "type": "rpr_uint"
        },
        {
          "name": "out_effect",
          "type": "rpr_post_effect*"
        }
      ],
      "docs": [
        "rpr_int rprContextGetAttachedPostEffect(rpr_context context, rpr_uint i, rpr_post_effect * out_effect);\n",
        [
          "/** @brief Create post effect\n",
          "*\n",
          "*  Create analytic point light represented by a point in space.\n",
          "*  Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*\n",
          "*  @param  context The context to create a light for\n",
          "*  @param  status  RPR_SUCCESS in case of success, error code otherwise\n",
          "*  @return         Light object\n",
          "*/\n"
        ]
      ]
    },
    "rprContextGetAttachedPostEffectCount": {
      "name": "rprContextGetAttachedPostEffectCount",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "nb",
          "type": "rpr_uint*"
        }
      ],
      "docs": [
        "rpr_int rprContextGetAttachedPostEffectCount(rpr_context context, rpr_uint *  nb);\n",
        [
          "/** @brief Create post effect\n",
          "*\n",
          "*  Create analytic point light represented by a point in space.\n",
          "*  Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*\n",
          "*  @param  context The context to create a light for\n",
          "*  @param  status  RPR_SUCCESS in case of success, error code otherwise\n",
          "*  @return         Light object\n",
          "*/\n"
        ]
      ]
    },
    "rprContextGetInfo": {
      "name": "rprContextGetInfo",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "context_info",
          "type": "rpr_context_info"
        },
        {
          "name": "size",
          "type": "size_t"
        },
        {
          "name": "data",
          "type": "void*"
        },
        {
          "name": "size_ret",
          "type": "size_t*"
        }
      ],
      "docs": [
        "rpr_int rprContextGetInfo(rpr_context context, rpr_context_info context_info, size_t size, void * data, size_t * size_ret);\n",
        [
          "/** @brief Query information about a context\n",
          " *\n",
          " *  The workflow is usually two-step: query with the data == NULL and size = 0 to get the required buffer size in size_ret,\n",
          " *  then query with size_ret == NULL to fill the buffer with the data.\n",
          " *   Possible error codes:\n",
          " *     RPR_ERROR_INVALID_PARAMETER\n",
          " *\n",
          " *  @param  context         The context to query\n",
          " *  @param  context_info    The type of info to query\n",
          " *  @param  size            The size of the buffer pointed by data\n",
          " *  @param  data            The buffer to store queried info\n",
          " *  @param  size_ret        Returns the size in bytes of the data being queried\n",
          " *  @return                 RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprContextGetParameterInfo": {
      "name": "rprContextGetParameterInfo",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "param_idx",
          "type": "int"
        },
        {
          "name": "parameter_info",
          "type": "rpr_parameter_info"
        },
        {
          "name": "size",
          "type": "size_t"
        },
        {
          "name": "data",
          "type": "void*"
        },
        {
          "name": "size_ret",
          "type": "size_t*"
        }
      ],
      "docs": [
        "rpr_int rprContextGetParameterInfo(rpr_context context, int param_idx, rpr_parameter_info parameter_info, size_t size, void * data, size_t * size_ret);\n",
        [
          "/** @brief Query information about a context parameter\n",
          "*\n",
          "*  The workflow is usually two-step: query with the data == NULL and size = 0 to get the required buffer size in size_ret,\n",
          "*  then query with size_ret == NULL to fill the buffer with the data\n",
          "*   Possible error codes:\n",
          "*     RPR_ERROR_INVALID_PARAMETER\n",
          "*\n",
          "*  @param  context         The context to query\n",
          "*  @param  param_idx\t   The index of the parameter\n",
          "*  @param  parameter_info  The type of info to query\n",
          "*  @param  size            The size of the buffer pointed by data\n",
          "*  @param  data            The buffer to store queried info\n",
          "*  @param  size_ret        Returns the size in bytes of the data being queried\n",
          "*  @return                 RPR_SUCCESS in case of success, error code otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprContextGetScene": {
      "name": "rprContextGetScene",
      "restype": "rpr_int",
      "args": [
        {
          "name": "arg0",
          "type": "rpr_context"
        },
        {
          "name": "out_scene",
          "type": "rpr_scene*"
        }
      ],
      "docs": [
        "rpr_int rprContextGetScene(rpr_context arg0, rpr_scene * out_scene);\n",
        [
          "/** @brief Get the current scene\n",
          " *\n",
          " *  The scene is a collection of objects and lights\n",
          " *  along with all the data required to shade those. The scene is\n",
          " *  used by the context ro render the image.\n",
          " *\n",
          " *  @param  context     The context to get the scene from\n",
          " *  @param  out_scene   Pointer to scene object\n",
          " *  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprContextRender": {
      "name": "rprContextRender",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        }
      ],
      "docs": [
        "rpr_int rprContextRender(rpr_context context);\n",
        [
          "/** @brief Perform evaluation and accumulation of a single sample (or number of AA samples if AA is enabled)\n",
          " *\n",
          " *  The call is blocking and the image is ready when returned. The context accumulates the samples in order\n",
          " *  to progressively refine the image and enable interactive response. So each new call to Render refines the\n",
          " *  resultin image with 1 (or num aa samples) color samples. Call rprFramebufferClear if you want to start rendering new image\n",
          " *  instead of refining the previous one.\n",
          " *\n",
          " *  Possible error codes:\n",
          " *      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          " *      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          " *      RPR_ERROR_INTERNAL_ERROR\n",
          " *      RPR_ERROR_MATERIAL_STACK_OVERFLOW\n",
          " *\n",
          " *  if you have the RPR_ERROR_MATERIAL_STACK_OVERFLOW error, you have created a shader graph with too many nodes.\n",
          " *  you can check the nodes limit with rprContextGetInfo(,RPR_CONTEXT_MATERIAL_STACK_SIZE,)\n",
          " *\n",
          " *  @param  context     The context object\n",
          " *  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprContextRenderTile": {
      "name": "rprContextRenderTile",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "xmin",
          "type": "rpr_uint"
        },
        {
          "name": "xmax",
          "type": "rpr_uint"
        },
        {
          "name": "ymin",
          "type": "rpr_uint"
        },
        {
          "name": "ymax",
          "type": "rpr_uint"
        }
      ],
      "docs": [
        "rpr_int rprContextRenderTile(rpr_context context, rpr_uint xmin, rpr_uint xmax, rpr_uint ymin, rpr_uint ymax);\n",
        [
          "/** @brief Perform evaluation and accumulation of a single sample (or number of AA samples if AA is enabled) on the part of the image\n",
          " *\n",
          " *  The call is blocking and the image is ready when returned. The context accumulates the samples in order\n",
          " *  to progressively refine the image and enable interactive response. So each new call to Render refines the\n",
          " *  resultin image with 1 (or num aa samples) color samples. Call rprFramebufferClear if you want to start rendering new image\n",
          " *  instead of refining the previous one. Possible error codes are:\n",
          " *\n",
          " *      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          " *      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          " *      RPR_ERROR_INTERNAL_ERROR\n",
          " *\n",
          " *  @param  context     The context to use for the rendering\n",
          " *  @param  xmin        X coordinate of the top left corner of a tile\n",
          " *  @param  xmax        X coordinate of the bottom right corner of a tile\n",
          " *  @param  ymin        Y coordinate of the top left corner of a tile\n",
          " *  @param  ymax        Y coordinate of the bottom right corner of a tile\n",
          " *  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprContextResolveFrameBuffer": {
      "name": "rprContextResolveFrameBuffer",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "src_frame_buffer",
          "type": "rpr_framebuffer"
        },
        {
          "name": "dst_frame_buffer",
          "type": "rpr_framebuffer"
        },
        {
          "name": "normalizeOnly",
          "type": "rpr_bool",
          "default": "false"
        }
      ],
      "docs": [
        "rpr_int rprContextResolveFrameBuffer(rpr_context context, rpr_framebuffer src_frame_buffer, rpr_framebuffer dst_frame_buffer, rpr_bool normalizeOnly = false);\n",
        [
          "/** @brief Resolve framebuffer\n",
          "*\n",
          "*   Resolve applies AA filters and tonemapping operators to the framebuffer data\n",
          "*\n",
          "*   Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*/\n"
        ]
      ]
    },
    "rprContextSetAOV": {
      "name": "rprContextSetAOV",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "aov",
          "type": "rpr_aov"
        },
        {
          "name": "frame_buffer",
          "type": "rpr_framebuffer"
        }
      ],
      "docs": [
        "rpr_int rprContextSetAOV(rpr_context context, rpr_aov aov, rpr_framebuffer frame_buffer);\n",
        [
          "/** @brief Set AOV\n",
          " *\n",
          " *  @param  context         The context to set AOV\n",
          " *  @param  aov\t\t\t\tAOV\n",
          " *  @param  frame_buffer    Frame buffer object to set\n",
          " *  @return                 RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprContextSetActivePlugin": {
      "name": "rprContextSetActivePlugin",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "pluginID",
          "type": "rpr_int"
        }
      ],
      "docs": [
        "rpr_int rprContextSetActivePlugin(rpr_context context, rpr_int pluginID);\n",
        [
          "/** @breif Set active context plugin\n",
          "*\n",
          "*/\n"
        ]
      ]
    },
    "rprContextSetParameter1f": {
      "name": "rprContextSetParameter1f",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "name",
          "type": "rpr_char const*"
        },
        {
          "name": "x",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprContextSetParameter1f(rpr_context context, rpr_char const * name, rpr_float x);\n",
        [
          "/** @brief Set context parameter\n",
          " *\n",
          " *  Parameters are used to control rendering modes, global sampling and AA settings, etc\n",
          " *\n",
          " *  @param  context                        The context to set the value to\n",
          " *  @param  name\t\t\t\t\t\t   Param name, can be:\n",
          "\n",
          "    *  aacellsize                          ft_float\n",
          "    *  aasamples                           ft_float\n",
          "\n",
          "    *  imagefilter.type\t\t\t\t\t   rpr_aa_filter\n",
          "    *  imagefilter.box.radius              ft_float\n",
          "    *  imagefilter.gaussian.radius         ft_float\n",
          "    *  imagefilter.triangle.radius         ft_float\n",
          "    *  imagefilter.mitchell.radius         ft_float\n",
          "    *  imagefilter.lanczos.radius          ft_float\n",
          "    *  imagefilter.blackmanharris.radius   ft_float\n",
          "\n",
          "\t*  tonemapping.type                    rpr_tonemapping_operator\n",
          "    *  tonemapping.linear.scale            ft_float\n",
          "    *  tonemapping.photolinear.sensitivity ft_float\n",
          "    *  tonemapping.photolinear.exposure    ft_float\n",
          "    *  tonemapping.photolinear.fstop       ft_float\n",
          "    *  tonemapping.reinhard02.prescale     ft_float\n",
          "    *  tonemapping.reinhard02.postscale    ft_float\n",
          "    *  tonemapping.reinhard02.burn         ft_float\n",
          "\n",
          " * @param x,y,z,w\t\t\t\t\t\t   Parameter value\n",
          "\n",
          " * @return             RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprContextSetParameter1u": {
      "name": "rprContextSetParameter1u",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "name",
          "type": "rpr_char const*"
        },
        {
          "name": "x",
          "type": "rpr_uint"
        }
      ],
      "docs": [
        "rpr_int rprContextSetParameter1u(rpr_context context, rpr_char const * name, rpr_uint x);\n",
        [
          "/** @brief Set context parameter\n",
          " *\n",
          " *  Parameters are used to control rendering modes, global sampling and AA settings, etc\n",
          " *\n",
          " *  @param  context                        The context to set the value to\n",
          " *  @param  name\t\t\t\t\t\t   Param name, can be:\n",
          "\n",
          "    *  aacellsize                          ft_float\n",
          "    *  aasamples                           ft_float\n",
          "\n",
          "    *  imagefilter.type\t\t\t\t\t   rpr_aa_filter\n",
          "    *  imagefilter.box.radius              ft_float\n",
          "    *  imagefilter.gaussian.radius         ft_float\n",
          "    *  imagefilter.triangle.radius         ft_float\n",
          "    *  imagefilter.mitchell.radius         ft_float\n",
          "    *  imagefilter.lanczos.radius          ft_float\n",
          "    *  imagefilter.blackmanharris.radius   ft_float\n",
          "\n",
          "\t*  tonemapping.type                    rpr_tonemapping_operator\n",
          "    *  tonemapping.linear.scale            ft_float\n",
          "    *  tonemapping.photolinear.sensitivity ft_float\n",
          "    *  tonemapping.photolinear.exposure    ft_float\n",
          "    *  tonemapping.photolinear.fstop       ft_float\n",
          "    *  tonemapping.reinhard02.prescale     ft_float\n",
          "    *  tonemapping.reinhard02.postscale    ft_float\n",
          "    *  tonemapping.reinhard02.burn         ft_float\n",
          "\n",
          " * @param x,y,z,w\t\t\t\t\t\t   Parameter value\n",
          "\n",
          " * @return             RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprContextSetParameter3f": {
      "name": "rprContextSetParameter3f",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "name",
          "type": "rpr_char const*"
        },
        {
          "name": "x",
          "type": "rpr_float"
        },
        {
          "name": "y",
          "type": "rpr_float"
        },
        {
          "name": "z",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprContextSetParameter3f(rpr_context context, rpr_char const * name, rpr_float x, rpr_float y, rpr_float z);\n",
        [
          "/** @brief Set context parameter\n",
          " *\n",
          " *  Parameters are used to control rendering modes, global sampling and AA settings, etc\n",
          " *\n",
          " *  @param  context                        The context to set the value to\n",
          " *  @param  name\t\t\t\t\t\t   Param name, can be:\n",
          "\n",
          "    *  aacellsize                          ft_float\n",
          "    *  aasamples                           ft_float\n",
          "\n",
          "    *  imagefilter.type\t\t\t\t\t   rpr_aa_filter\n",
          "    *  imagefilter.box.radius              ft_float\n",
          "    *  imagefilter.gaussian.radius         ft_float\n",
          "    *  imagefilter.triangle.radius         ft_float\n",
          "    *  imagefilter.mitchell.radius         ft_float\n",
          "    *  imagefilter.lanczos.radius          ft_float\n",
          "    *  imagefilter.blackmanharris.radius   ft_float\n",
          "\n",
          "\t*  tonemapping.type                    rpr_tonemapping_operator\n",
          "    *  tonemapping.linear.scale            ft_float\n",
          "    *  tonemapping.photolinear.sensitivity ft_float\n",
          "    *  tonemapping.photolinear.exposure    ft_float\n",
          "    *  tonemapping.photolinear.fstop       ft_float\n",
          "    *  tonemapping.reinhard02.prescale     ft_float\n",
          "    *  tonemapping.reinhard02.postscale    ft_float\n",
          "    *  tonemapping.reinhard02.burn         ft_float\n",
          "\n",
          " * @param x,y,z,w\t\t\t\t\t\t   Parameter value\n",
          "\n",
          " * @return             RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprContextSetParameter4f": {
      "name": "rprContextSetParameter4f",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "name",
          "type": "rpr_char const*"
        },
        {
          "name": "x",
          "type": "rpr_float"
        },
        {
          "name": "y",
          "type": "rpr_float"
        },
        {
          "name": "z",
          "type": "rpr_float"
        },
        {
          "name": "w",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprContextSetParameter4f(rpr_context context, rpr_char const * name, rpr_float x, rpr_float y, rpr_float z, rpr_float w);\n",
        [
          "/** @brief Set context parameter\n",
          " *\n",
          " *  Parameters are used to control rendering modes, global sampling and AA settings, etc\n",
          " *\n",
          " *  @param  context                        The context to set the value to\n",
          " *  @param  name\t\t\t\t\t\t   Param name, can be:\n",
          "\n",
          "    *  aacellsize                          ft_float\n",
          "    *  aasamples                           ft_float\n",
          "\n",
          "    *  imagefilter.type\t\t\t\t\t   rpr_aa_filter\n",
          "    *  imagefilter.box.radius              ft_float\n",
          "    *  imagefilter.gaussian.radius         ft_float\n",
          "    *  imagefilter.triangle.radius         ft_float\n",
          "    *  imagefilter.mitchell.radius         ft_float\n",
          "    *  imagefilter.lanczos.radius          ft_float\n",
          "    *  imagefilter.blackmanharris.radius   ft_float\n",
          "\n",
          "\t*  tonemapping.type                    rpr_tonemapping_operator\n",
          "    *  tonemapping.linear.scale            ft_float\n",
          "    *  tonemapping.photolinear.sensitivity ft_float\n",
          "    *  tonemapping.photolinear.exposure    ft_float\n",
          "    *  tonemapping.photolinear.fstop       ft_float\n",
          "    *  tonemapping.reinhard02.prescale     ft_float\n",
          "    *  tonemapping.reinhard02.postscale    ft_float\n",
          "    *  tonemapping.reinhard02.burn         ft_float\n",
          "\n",
          " * @param x,y,z,w\t\t\t\t\t\t   Parameter value\n",
          "\n",
          " * @return             RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprContextSetParameterString": {
      "name": "rprContextSetParameterString",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "name",
          "type": "rpr_char const*"
        },
        {
          "name": "value",
          "type": "rpr_char const*"
        }
      ],
      "docs": [
        "rpr_int rprContextSetParameterString(rpr_context context, rpr_char const * name, rpr_char const * value);\n",
        [
          "/** @brief Set context parameter\n",
          " *\n",
          " *  Parameters are used to control rendering modes, global sampling and AA settings, etc\n",
          " *\n",
          " *  @param  context                        The context to set the value to\n",
          " *  @param  name\t\t\t\t\t\t   Param name, can be:\n",
          "\n",
          "    *  aacellsize                          ft_float\n",
          "    *  aasamples                           ft_float\n",
          "\n",
          "    *  imagefilter.type\t\t\t\t\t   rpr_aa_filter\n",
          "    *  imagefilter.box.radius              ft_float\n",
          "    *  imagefilter.gaussian.radius         ft_float\n",
          "    *  imagefilter.triangle.radius         ft_float\n",
          "    *  imagefilter.mitchell.radius         ft_float\n",
          "    *  imagefilter.lanczos.radius          ft_float\n",
          "    *  imagefilter.blackmanharris.radius   ft_float\n",
          "\n",
          "\t*  tonemapping.type                    rpr_tonemapping_operator\n",
          "    *  tonemapping.linear.scale            ft_float\n",
          "    *  tonemapping.photolinear.sensitivity ft_float\n",
          "    *  tonemapping.photolinear.exposure    ft_float\n",
          "    *  tonemapping.photolinear.fstop       ft_float\n",
          "    *  tonemapping.reinhard02.prescale     ft_float\n",
          "    *  tonemapping.reinhard02.postscale    ft_float\n",
          "    *  tonemapping.reinhard02.burn         ft_float\n",
          "\n",
          " * @param x,y,z,w\t\t\t\t\t\t   Parameter value\n",
          "\n",
          " * @return             RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprContextSetScene": {
      "name": "rprContextSetScene",
      "restype": "rpr_int",
      "args": [
        {
          "name": "context",
          "type": "rpr_context"
        },
        {
          "name": "scene",
          "type": "rpr_scene"
        }
      ],
      "docs": [
        "rpr_int rprContextSetScene(rpr_context context, rpr_scene scene);\n",
        [
          "/** @brief Set the scene\n",
          " *\n",
          " *  The scene is a collection of objects and lights\n",
          " *  along with all the data required to shade those. The scene is\n",
          " *  used by the context to render the image.\n",
          " *\n",
          " *  @param  context     The context to set the scene\n",
          " *  @param  scene       The scene to set\n",
          " *  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprCreateContext": {
      "name": "rprCreateContext",
      "restype": "rpr_int",
      "args": [
        {
          "name": "api_version",
          "type": "rpr_int"
        },
        {
          "name": "pluginIDs",
          "type": "rpr_int*"
        },
        {
          "name": "pluginCount",
          "type": "size_t"
        },
        {
          "name": "creation_flags",
          "type": "rpr_creation_flags"
        },
        {
          "name": "props",
          "type": "rpr_context_properties const*"
        },
        {
          "name": "cache_path",
          "type": "rpr_char const*"
        },
        {
          "name": "out_context",
          "type": "rpr_context*"
        }
      ],
      "docs": [
        "rpr_int rprCreateContext(rpr_int api_version, rpr_int * pluginIDs, size_t pluginCount, rpr_creation_flags creation_flags, rpr_context_properties const * props, rpr_char const * cache_path, rpr_context * out_context);\n",
        [
          "/** @brief Create rendering context\n",
          "  *\n",
          "  *  Rendering context is a root concept encapsulating the render states and responsible\n",
          "  *  for execution control. All the entities in FireRender are created for a particular rendering context.\n",
          "  *  Entities created for some context can't be used with other contexts. Possible error codes for this call are:\n",
          "  *\n",
          "  *     RPR_ERROR_COMPUTE_API_NOT_SUPPORTED\n",
          "  *     RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "  *     RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "  *     RPR_ERROR_INVALID_API_VERSION\n",
          "  *     RPR_ERROR_INVALID_PARAMETER\n",
          "  *\n",
          "  *  @param api_version     Api version constant\n",
          "  *\t @param context_type    Determines compute API to use, OPENCL only is supported for now\n",
          "  *  @param creation_flags  Determines multi-gpu or cpu-gpu configuration\n",
          "  *  @param props           Context creation properties. Specifies a list of context property names and their corresponding values. \n",
          "  *                         Each property name is immediately followed by the corresponding desired value. \n",
          "  *                         The list is terminated with 0.  \n",
          "  *  @param cache_path      Full path to kernel cache created by FireRender, NULL means to use current folder\n",
          "  *  @param cpu_thread_limit\tLimit for the number of threads used for CPU rendering\n",
          "  *  @param out_context\t\tPointer to context object\n",
          "  *  @return                RPR_SUCCESS in case of success, error code otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprDirectionalLightSetRadiantPower3f": {
      "name": "rprDirectionalLightSetRadiantPower3f",
      "restype": "rpr_int",
      "args": [
        {
          "name": "light",
          "type": "rpr_light"
        },
        {
          "name": "r",
          "type": "rpr_float"
        },
        {
          "name": "g",
          "type": "rpr_float"
        },
        {
          "name": "b",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprDirectionalLightSetRadiantPower3f(rpr_light light, rpr_float r, rpr_float g, rpr_float b);\n",
        [
          "/** @brief Set radiant power of a directional light source\n",
          " *\n",
          " *  @param  r R component of a radiant power vector\n",
          " *  @param  g G component of a radiant power vector\n",
          " *  @param  b B component of a radiant power vector\n",
          " *  @return   RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprDirectionalLightSetShadowSoftness": {
      "name": "rprDirectionalLightSetShadowSoftness",
      "restype": "rpr_int",
      "args": [
        {
          "name": "light",
          "type": "rpr_light"
        },
        {
          "name": "coeff",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprDirectionalLightSetShadowSoftness(rpr_light light, rpr_float coeff);\n",
        [
          "/** @brief Set softness of shadow produced by the light\n",
          " *\n",
          " *  @param  coeff value between [0;1]. 0.0 is sharp  \n",
          " *  @return   RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprEnvironmentLightAttachPortal": {
      "name": "rprEnvironmentLightAttachPortal",
      "restype": "rpr_int",
      "args": [
        {
          "name": "scene",
          "type": "rpr_scene"
        },
        {
          "name": "env_light",
          "type": "rpr_light"
        },
        {
          "name": "portal",
          "type": "rpr_shape"
        }
      ],
      "docs": [
        "rpr_int rprEnvironmentLightAttachPortal(rpr_scene scene, rpr_light env_light, rpr_shape portal);\n",
        [
          "/** @brief Set portal for environment light to accelerate convergence of indoor scenes\n",
          "*\n",
          "*   Possible error codes:\n",
          "*      RPR_ERROR_INVALID_PARAMETER\n",
          "*\n",
          "*  @param  env_light Environment light\n",
          "*  @param  portal    Portal mesh, might have multiple components\n",
          "*  @return           RPR_SUCCESS in case of success, error code otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprEnvironmentLightDetachPortal": {
      "name": "rprEnvironmentLightDetachPortal",
      "restype": "rpr_int",
      "args": [
        {
          "name": "scene",
          "type": "rpr_scene"
        },
        {
          "name": "env_light",
          "type": "rpr_light"
        },
        {
          "name": "portal",
          "type": "rpr_shape"
        }
      ],
      "docs": [
        "rpr_int rprEnvironmentLightDetachPortal(rpr_scene scene, rpr_light env_light, rpr_shape portal);\n",
        [
          "/** @brief Remove portal for environment light.\n",
          "*\n",
          "*   Possible error codes:\n",
          "*      RPR_ERROR_INVALID_PARAMETER\n",
          "*\n",
          "*  @param  env_light Environment light\n",
          "*  @param  portal    Portal mesh, that have been added to light.\n",
          "*  @return           RPR_SUCCESS in case of success, error code otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprEnvironmentLightSetImage": {
      "name": "rprEnvironmentLightSetImage",
      "restype": "rpr_int",
      "args": [
        {
          "name": "env_light",
          "type": "rpr_light"
        },
        {
          "name": "image",
          "type": "rpr_image"
        }
      ],
      "docs": [
        "rpr_int rprEnvironmentLightSetImage(rpr_light env_light, rpr_image image);\n",
        [
          "/** @brief Set image for an environment light\n",
          " *\n",
          " *   Possible error codes:\n",
          " *      RPR_ERROR_INVALID_PARAMETER\n",
          " *      RPR_ERROR_UNSUPPORTED_IMAGE_FORMAT\n",
          " *\n",
          " *  @param  env_light Environment light\n",
          " *  @param  image     Image object to set\n",
          " *  @return           RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprEnvironmentLightSetIntensityScale": {
      "name": "rprEnvironmentLightSetIntensityScale",
      "restype": "rpr_int",
      "args": [
        {
          "name": "env_light",
          "type": "rpr_light"
        },
        {
          "name": "intensity_scale",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprEnvironmentLightSetIntensityScale(rpr_light env_light, rpr_float intensity_scale);\n",
        [
          "/** @brief Set intensity scale or an env light\n",
          " *\n",
          " *  @param  env_light       Environment light\n",
          " *  @param  intensity_scale Intensity scale\n",
          " *  @return                 RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprFrameBufferClear": {
      "name": "rprFrameBufferClear",
      "restype": "rpr_int",
      "args": [
        {
          "name": "frame_buffer",
          "type": "rpr_framebuffer"
        }
      ],
      "docs": [
        "rpr_int rprFrameBufferClear(rpr_framebuffer frame_buffer);\n",
        [
          "/** @brief Clear contents of a framebuffer to zero\n",
          " *\n",
          " *   Possible error codes:\n",
          " *      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          " *      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          " *\n",
          " *  The call is blocking and the image is ready when returned\n",
          " *\n",
          " *  @param  frame_buffer  Framebuffer to clear\n",
          " *  @return              RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprFrameBufferGetInfo": {
      "name": "rprFrameBufferGetInfo",
      "restype": "rpr_int",
      "args": [
        {
          "name": "framebuffer",
          "type": "rpr_framebuffer"
        },
        {
          "name": "info",
          "type": "rpr_framebuffer_info"
        },
        {
          "name": "size",
          "type": "size_t"
        },
        {
          "name": "data",
          "type": "void*"
        },
        {
          "name": "size_ret",
          "type": "size_t*"
        }
      ],
      "docs": [
        "rpr_int rprFrameBufferGetInfo(rpr_framebuffer framebuffer, rpr_framebuffer_info info, size_t size, void * data, size_t * size_ret);\n",
        [
          "/** @brief Query information about a framebuffer\n",
          " *\n",
          " *  The workflow is usually two-step: query with the data == NULL to get the required buffer size,\n",
          " *  then query with size_ret == NULL to fill the buffer with the data\n",
          " *   Possible error codes:\n",
          " *      RPR_ERROR_INVALID_PARAMETER\n",
          " *\n",
          " *  @param  framebuffer  Framebuffer object to query\n",
          " *  @param  info         The type of info to query\n",
          " *  @param  size         The size of the buffer pointed by data\n",
          " *  @param  data         The buffer to store queried info\n",
          " *  @param  size_ret     Returns the size in bytes of the data being queried\n",
          " *  @return              RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprFrameBufferSaveToFile": {
      "name": "rprFrameBufferSaveToFile",
      "restype": "rpr_int",
      "args": [
        {
          "name": "frame_buffer",
          "type": "rpr_framebuffer"
        },
        {
          "name": "file_path",
          "type": "rpr_char const*"
        }
      ],
      "docs": [
        "rpr_int rprFrameBufferSaveToFile(rpr_framebuffer frame_buffer, rpr_char const * file_path);\n",
        [
          "/** @brief Save frame buffer to file\n",
          " *\n",
          " *   Possible error codes:\n",
          " *      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          " *      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          " *\n",
          " *  @param  frame_buffer Frame buffer to save\n",
          " *  @param  path         Path to file\n",
          " *  @return              RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprHeteroVolumeSetTransform": {
      "name": "rprHeteroVolumeSetTransform",
      "restype": "rpr_int",
      "args": [
        {
          "name": "out_heteroVolume",
          "type": "rpr_hetero_volume"
        },
        {
          "name": "transpose",
          "type": "rpr_bool"
        },
        {
          "name": "transform",
          "type": "rpr_float const*"
        }
      ],
      "docs": [
        "rpr_int rprHeteroVolumeSetTransform(rpr_hetero_volume out_heteroVolume, rpr_bool transpose, rpr_float const * transform);\n",
        [
          "/** @brief Create post effect\n",
          "*\n",
          "*  Create analytic point light represented by a point in space.\n",
          "*  Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*\n",
          "*  @param  context The context to create a light for\n",
          "*  @param  status  RPR_SUCCESS in case of success, error code otherwise\n",
          "*  @return         Light object\n",
          "*/\n"
        ]
      ]
    },
    "rprIESLightSetImageFromFile": {
      "name": "rprIESLightSetImageFromFile",
      "restype": "rpr_int",
      "args": [
        {
          "name": "env_light",
          "type": "rpr_light"
        },
        {
          "name": "imagePath",
          "type": "rpr_char const*"
        },
        {
          "name": "nx",
          "type": "rpr_int"
        },
        {
          "name": "ny",
          "type": "rpr_int"
        }
      ],
      "docs": [
        "rpr_int rprIESLightSetImageFromFile(rpr_light env_light, rpr_char const * imagePath, rpr_int nx, rpr_int ny);\n",
        [
          "/** @brief Set image for an IES light\n",
          "*\n",
          "*   Possible error codes:\n",
          "*      RPR_ERROR_INVALID_PARAMETER\n",
          "*      RPR_ERROR_UNSUPPORTED_IMAGE_FORMAT : If the format of the IES file is not supported by Radeon ProRender.\n",
          "*      RPR_ERROR_IO_ERROR : If the IES image path file doesn't exist.\n",
          "*\n",
          "*  @param  env_light     Environment light\n",
          "*  @param  imagePath     Image path to set\n",
          "*  @param  nx\t\t\t  resolution X of the IES image\n",
          "*  @param  ny            resolution Y of the IES image\n",
          "*  @return               RPR_SUCCESS in case of success, error code otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprIESLightSetImageFromIESdata": {
      "name": "rprIESLightSetImageFromIESdata",
      "restype": "rpr_int",
      "args": [
        {
          "name": "env_light",
          "type": "rpr_light"
        },
        {
          "name": "iesData",
          "type": "rpr_char const*"
        },
        {
          "name": "nx",
          "type": "rpr_int"
        },
        {
          "name": "ny",
          "type": "rpr_int"
        }
      ],
      "docs": [
        "rpr_int rprIESLightSetImageFromIESdata(rpr_light env_light, rpr_char const * iesData, rpr_int nx, rpr_int ny);\n",
        [
          "/** @brief Set image for an IES light\n",
          "*\n",
          "*   Possible error codes:\n",
          "*      RPR_ERROR_INVALID_PARAMETER\n",
          "*      RPR_ERROR_UNSUPPORTED_IMAGE_FORMAT : If the format of the IES data is not supported by Radeon ProRender.\n",
          "*\n",
          "*  @param  env_light     Environment light\n",
          "*  @param  iesData       Image data string defining the IES. null terminated string. IES format.\n",
          "*  @param  nx\t\t\t  resolution X of the IES image\n",
          "*  @param  ny            resolution Y of the IES image\n",
          "*  @return               RPR_SUCCESS in case of success, error code otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprIESLightSetRadiantPower3f": {
      "name": "rprIESLightSetRadiantPower3f",
      "restype": "rpr_int",
      "args": [
        {
          "name": "light",
          "type": "rpr_light"
        },
        {
          "name": "r",
          "type": "rpr_float"
        },
        {
          "name": "g",
          "type": "rpr_float"
        },
        {
          "name": "b",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprIESLightSetRadiantPower3f(rpr_light light, rpr_float r, rpr_float g, rpr_float b);\n",
        [
          "/** @brief Set radiant power of a IES light source\n",
          "*\n",
          "*  @param  r R component of a radiant power vector\n",
          "*  @param  g G component of a radiant power vector\n",
          "*  @param  b B component of a radiant power vector\n",
          "*  @return   RPR_SUCCESS in case of success, error code otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprImageGetInfo": {
      "name": "rprImageGetInfo",
      "restype": "rpr_int",
      "args": [
        {
          "name": "image",
          "type": "rpr_image"
        },
        {
          "name": "image_info",
          "type": "rpr_image_info"
        },
        {
          "name": "size",
          "type": "size_t"
        },
        {
          "name": "data",
          "type": "void*"
        },
        {
          "name": "size_ret",
          "type": "size_t*"
        }
      ],
      "docs": [
        "rpr_int rprImageGetInfo(rpr_image image, rpr_image_info image_info, size_t size, void * data, size_t * size_ret);\n",
        [
          "/** @brief Query information about an image\n",
          " *\n",
          " *  The workflow is usually two-step: query with the data == NULL to get the required buffer size,\n",
          " *  then query with size_ret == NULL to fill the buffer with the data\n",
          " *   Possible error codes:\n",
          " *      RPR_ERROR_INVALID_PARAMETER\n",
          " *\n",
          " *  @param  image       An image object to query\n",
          " *  @param  image_info  The type of info to query\n",
          " *  @param  size        The size of the buffer pointed by data\n",
          " *  @param  data        The buffer to store queried info\n",
          " *  @param  size_ret    Returns the size in bytes of the data being queried\n",
          " *  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprImageSetFilter": {
      "name": "rprImageSetFilter",
      "restype": "rpr_int",
      "args": [
        {
          "name": "image",
          "type": "rpr_image"
        },
        {
          "name": "type",
          "type": "rpr_image_filter_type"
        }
      ],
      "docs": [
        "rpr_int rprImageSetFilter(rpr_image image, rpr_image_filter_type type);\n",
        [
          "/** @brief \n",
          "*\n",
          "*  new version of rprImageSetOption\n",
          "*  @param  image       The image to set filter for\n",
          "*  @param  type\t   \n",
          "*  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprImageSetWrap": {
      "name": "rprImageSetWrap",
      "restype": "rpr_int",
      "args": [
        {
          "name": "image",
          "type": "rpr_image"
        },
        {
          "name": "type",
          "type": "rpr_image_wrap_type"
        }
      ],
      "docs": [
        "rpr_int rprImageSetWrap(rpr_image image, rpr_image_wrap_type type);\n",
        [
          "/** @brief \n",
          "*\n",
          "*\n",
          "*  @param  image       The image to set wrap for\n",
          "*  @param  type\t   \n",
          "*  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprInstanceGetBaseShape": {
      "name": "rprInstanceGetBaseShape",
      "restype": "rpr_int",
      "args": [
        {
          "name": "shape",
          "type": "rpr_shape"
        },
        {
          "name": "out_shape",
          "type": "rpr_shape*"
        }
      ],
      "docs": [
        "rpr_int rprInstanceGetBaseShape(rpr_shape shape, rpr_shape * out_shape);\n",
        [
          "/** @brief Get the parent shape for an instance\n",
          " *\n",
          " *   Possible error codes:\n",
          " *      RPR_ERROR_INVALID_PARAMETER\n",
          " *\n",
          " *  @param  shape    The shape to get a parent shape from\n",
          " *  @param  status   RPR_SUCCESS in case of success, error code otherwise\n",
          " *  @return          Shape object\n",
          " */\n"
        ]
      ]
    },
    "rprLightGetInfo": {
      "name": "rprLightGetInfo",
      "restype": "rpr_int",
      "args": [
        {
          "name": "light",
          "type": "rpr_light"
        },
        {
          "name": "info",
          "type": "rpr_light_info"
        },
        {
          "name": "size",
          "type": "size_t"
        },
        {
          "name": "data",
          "type": "void*"
        },
        {
          "name": "size_ret",
          "type": "size_t*"
        }
      ],
      "docs": [
        "rpr_int rprLightGetInfo(rpr_light light, rpr_light_info info, size_t size, void * data, size_t * size_ret);\n",
        [
          "/** @brief Query information about a light\n",
          " *\n",
          " *  The workflow is usually two-step: query with the data == NULL to get the required buffer size,\n",
          " *  then query with size_ret == NULL to fill the buffer with the data\n",
          " *   Possible error codes:\n",
          " *      RPR_ERROR_INVALID_PARAMETER\n",
          " *\n",
          " *  @param  light    The light to query\n",
          " *  @param  light_info The type of info to query\n",
          " *  @param  size     The size of the buffer pointed by data\n",
          " *  @param  data     The buffer to store queried info\n",
          " *  @param  size_ret Returns the size in bytes of the data being queried\n",
          " *  @return          RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprLightSetTransform": {
      "name": "rprLightSetTransform",
      "restype": "rpr_int",
      "args": [
        {
          "name": "light",
          "type": "rpr_light"
        },
        {
          "name": "transpose",
          "type": "rpr_bool"
        },
        {
          "name": "transform",
          "type": "rpr_float const*"
        }
      ],
      "docs": [
        "rpr_int rprLightSetTransform(rpr_light light, rpr_bool transpose, rpr_float const * transform);\n",
        [
          "/** @brief Set light world transform\n",
          " *\n",
          " *\n",
          " *  @param  light       The light to set transform for\n",
          " *  @param  transpose   Determines whether the basis vectors are in columns(false) or in rows(true) of the matrix\n",
          " *  @param  transform   Array of 16 rpr_float values (row-major form)\n",
          " *  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprMaterialNodeGetInfo": {
      "name": "rprMaterialNodeGetInfo",
      "restype": "rpr_int",
      "args": [
        {
          "name": "in_node",
          "type": "rpr_material_node"
        },
        {
          "name": "in_info",
          "type": "rpr_material_node_info"
        },
        {
          "name": "in_size",
          "type": "size_t"
        },
        {
          "name": "in_data",
          "type": "void*"
        },
        {
          "name": "out_size",
          "type": "size_t*"
        }
      ],
      "docs": [
        "rpr_int rprMaterialNodeGetInfo(rpr_material_node in_node, rpr_material_node_info in_info, size_t in_size, void * in_data, size_t * out_size);\n",
        [
          "/** @brief Set image input value\n",
          "*\n",
          "*   Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*\n",
          "*/\n"
        ]
      ]
    },
    "rprMaterialNodeGetInputInfo": {
      "name": "rprMaterialNodeGetInputInfo",
      "restype": "rpr_int",
      "args": [
        {
          "name": "in_node",
          "type": "rpr_material_node"
        },
        {
          "name": "in_input_idx",
          "type": "rpr_int"
        },
        {
          "name": "in_info",
          "type": "rpr_material_node_input_info"
        },
        {
          "name": "in_size",
          "type": "size_t"
        },
        {
          "name": "in_data",
          "type": "void*"
        },
        {
          "name": "out_size",
          "type": "size_t*"
        }
      ],
      "docs": [
        "rpr_int rprMaterialNodeGetInputInfo(rpr_material_node in_node, rpr_int in_input_idx, rpr_material_node_input_info in_info, size_t in_size, void * in_data, size_t * out_size);\n",
        [
          "/** @brief Set image input value\n",
          "*\n",
          "*   Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*\n",
          "*/\n"
        ]
      ]
    },
    "rprMaterialNodeSetInputBufferData": {
      "name": "rprMaterialNodeSetInputBufferData",
      "restype": "rpr_int",
      "args": [
        {
          "name": "in_node",
          "type": "rpr_material_node"
        },
        {
          "name": "in_input",
          "type": "rpr_char const*"
        },
        {
          "name": "buffer",
          "type": "rpr_buffer"
        }
      ],
      "docs": [
        "rpr_int rprMaterialNodeSetInputBufferData(rpr_material_node in_node, rpr_char const * in_input, rpr_buffer buffer);\n",
        [
          "/** @brief Set image input value\n",
          "*\n",
          "*   Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*\n",
          "*/\n"
        ]
      ]
    },
    "rprMaterialNodeSetInputF": {
      "name": "rprMaterialNodeSetInputF",
      "restype": "rpr_int",
      "args": [
        {
          "name": "in_node",
          "type": "rpr_material_node"
        },
        {
          "name": "in_input",
          "type": "rpr_char const*"
        },
        {
          "name": "in_value_x",
          "type": "rpr_float"
        },
        {
          "name": "in_value_y",
          "type": "rpr_float"
        },
        {
          "name": "in_value_z",
          "type": "rpr_float"
        },
        {
          "name": "in_value_w",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprMaterialNodeSetInputF(rpr_material_node in_node, rpr_char const * in_input, rpr_float in_value_x, rpr_float in_value_y, rpr_float in_value_z, rpr_float in_value_w);\n",
        [
          "/** @brief Set float input value\n",
          "*\n",
          "*   Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*\n",
          "*/\n"
        ]
      ]
    },
    "rprMaterialNodeSetInputImageData": {
      "name": "rprMaterialNodeSetInputImageData",
      "restype": "rpr_int",
      "args": [
        {
          "name": "in_node",
          "type": "rpr_material_node"
        },
        {
          "name": "in_input",
          "type": "rpr_char const*"
        },
        {
          "name": "image",
          "type": "rpr_image"
        }
      ],
      "docs": [
        "rpr_int rprMaterialNodeSetInputImageData(rpr_material_node in_node, rpr_char const * in_input, rpr_image image);\n",
        [
          "/** @brief Set image input value\n",
          "*\n",
          "*   Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*\n",
          "*/\n"
        ]
      ]
    },
    "rprMaterialNodeSetInputN": {
      "name": "rprMaterialNodeSetInputN",
      "restype": "rpr_int",
      "args": [
        {
          "name": "in_node",
          "type": "rpr_material_node"
        },
        {
          "name": "in_input",
          "type": "rpr_char const*"
        },
        {
          "name": "in_input_node",
          "type": "rpr_material_node"
        }
      ],
      "docs": [
        "rpr_int rprMaterialNodeSetInputN(rpr_material_node in_node, rpr_char const * in_input, rpr_material_node in_input_node);\n",
        [
          "/** @brief Connect nodes\n",
          "*\n",
          "*   Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*\n",
          "*/\n"
        ]
      ]
    },
    "rprMaterialNodeSetInputU": {
      "name": "rprMaterialNodeSetInputU",
      "restype": "rpr_int",
      "args": [
        {
          "name": "in_node",
          "type": "rpr_material_node"
        },
        {
          "name": "in_input",
          "type": "rpr_char const*"
        },
        {
          "name": "in_value",
          "type": "rpr_uint"
        }
      ],
      "docs": [
        "rpr_int rprMaterialNodeSetInputU(rpr_material_node in_node, rpr_char const * in_input, rpr_uint in_value);\n",
        [
          "/** @brief Set uint input value\n",
          "*\n",
          "*   Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*\n",
          "*/\n"
        ]
      ]
    },
    "rprMaterialSystemCreateNode": {
      "name": "rprMaterialSystemCreateNode",
      "restype": "rpr_int",
      "args": [
        {
          "name": "in_matsys",
          "type": "rpr_material_system"
        },
        {
          "name": "in_type",
          "type": "rpr_material_node_type"
        },
        {
          "name": "out_node",
          "type": "rpr_material_node*"
        }
      ],
      "docs": [
        "rpr_int rprMaterialSystemCreateNode(rpr_material_system in_matsys, rpr_material_node_type in_type, rpr_material_node * out_node);\n",
        [
          "/** @brief Returns the number of material nodes for a given material system\n",
          "*\n",
          "*   Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*\n",
          "*/\n"
        ]
      ]
    },
    "rprMaterialSystemGetSize": {
      "name": "rprMaterialSystemGetSize",
      "restype": "rpr_int",
      "args": [
        {
          "name": "in_context",
          "type": "rpr_context"
        },
        {
          "name": "out_size",
          "type": "rpr_uint*"
        }
      ],
      "docs": [
        "rpr_int rprMaterialSystemGetSize(rpr_context in_context, rpr_uint * out_size);\n",
        [
          "/** @brief Create material node\n",
          "*\n",
          "*   Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*\n",
          "*/\n"
        ]
      ]
    },
    "rprMeshGetInfo": {
      "name": "rprMeshGetInfo",
      "restype": "rpr_int",
      "args": [
        {
          "name": "mesh",
          "type": "rpr_shape"
        },
        {
          "name": "mesh_info",
          "type": "rpr_mesh_info"
        },
        {
          "name": "size",
          "type": "size_t"
        },
        {
          "name": "data",
          "type": "void*"
        },
        {
          "name": "size_ret",
          "type": "size_t*"
        }
      ],
      "docs": [
        "rpr_int rprMeshGetInfo(rpr_shape mesh, rpr_mesh_info mesh_info, size_t size, void * data, size_t * size_ret);\n",
        [
          "/** @brief Query information about a mesh\n",
          " *\n",
          " *  The workflow is usually two-step: query with the data == NULL to get the required buffer size,\n",
          " *  then query with size_ret == NULL to fill the buffer with the data\n",
          " *   Possible error codes:\n",
          " *      RPR_ERROR_INVALID_PARAMETER\n",
          " *\n",
          " *  @param  shape       The mesh to query\n",
          " *  @param  mesh_info   The type of info to query\n",
          " *  @param  size        The size of the buffer pointed by data\n",
          " *  @param  data        The buffer to store queried info\n",
          " *  @param  size_ret    Returns the size in bytes of the data being queried\n",
          " *  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprMeshPolygonGetInfo": {
      "name": "rprMeshPolygonGetInfo",
      "restype": "rpr_int",
      "args": [
        {
          "name": "mesh",
          "type": "rpr_shape"
        },
        {
          "name": "polygon_index",
          "type": "size_t"
        },
        {
          "name": "polygon_info",
          "type": "rpr_mesh_polygon_info"
        },
        {
          "name": "size",
          "type": "size_t"
        },
        {
          "name": "data",
          "type": "void*"
        },
        {
          "name": "size_ret",
          "type": "size_t*"
        }
      ],
      "docs": [
        "rpr_int rprMeshPolygonGetInfo(rpr_shape mesh, size_t polygon_index, rpr_mesh_polygon_info polygon_info, size_t size, void * data, size_t * size_ret);\n",
        [
          "/** @brief Query information about a mesh polygon\n",
          " *\n",
          " *  The workflow is usually two-step: query with the data == NULL to get the required buffer size,\n",
          " *  then query with size_ret == NULL to fill the buffer with the data\n",
          " *\n",
          " *   Possible error codes:\n",
          " *      RPR_ERROR_INVALID_PARAMETER\n",
          " *\n",
          " *  @param  mesh        The mesh to query\n",
          " *  @param  polygon_index The index of a polygon\n",
          " *  @param  polygon_info The type of info to query\n",
          " *  @param  size        The size of the buffer pointed by data\n",
          " *  @param  data        The buffer to store queried info\n",
          " *  @param  size_ret    Returns the size in bytes of the data being queried\n",
          " *  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprObjectDelete": {
      "name": "rprObjectDelete",
      "restype": "rpr_int",
      "args": [
        {
          "name": "obj",
          "type": "void*"
        }
      ],
      "docs": [
        "rpr_int rprObjectDelete(void * obj);\n",
        [
          "/** @brief Delete object\n",
          "*\n",
          "*  rprObjectDelete(obj) deletes 'obj' from memory. \n",
          "*  User has to make sure that 'obj' will not be used anymore after this call.\n",
          "*\n",
          "*   Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*\n",
          "*/\n"
        ]
      ]
    },
    "rprObjectSetName": {
      "name": "rprObjectSetName",
      "restype": "rpr_int",
      "args": [
        {
          "name": "node",
          "type": "void*"
        },
        {
          "name": "name",
          "type": "rpr_char const*"
        }
      ],
      "docs": [
        "rpr_int rprObjectSetName(void * node, rpr_char const * name);\n",
        [
          "/** @brief Set material node name\n",
          "*\n",
          "*\n",
          "*  @param  node        Node to set the name for\n",
          "*  @param  name       NULL terminated string name\n",
          "*  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprPointLightSetRadiantPower3f": {
      "name": "rprPointLightSetRadiantPower3f",
      "restype": "rpr_int",
      "args": [
        {
          "name": "light",
          "type": "rpr_light"
        },
        {
          "name": "r",
          "type": "rpr_float"
        },
        {
          "name": "g",
          "type": "rpr_float"
        },
        {
          "name": "b",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprPointLightSetRadiantPower3f(rpr_light light, rpr_float r, rpr_float g, rpr_float b);\n",
        [
          "/** @brief Set radiant power of a point light source\n",
          " *\n",
          " *  @param  r       R component of a radiant power vector\n",
          " *  @param  g       G component of a radiant power vector\n",
          " *  @param  b       B component of a radiant power vector\n",
          " *  @return         RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprPostEffectGetInfo": {
      "name": "rprPostEffectGetInfo",
      "restype": "rpr_int",
      "args": [
        {
          "name": "effect",
          "type": "rpr_post_effect"
        },
        {
          "name": "info",
          "type": "rpr_post_effect_info"
        },
        {
          "name": "size",
          "type": "size_t"
        },
        {
          "name": "data",
          "type": "void*"
        },
        {
          "name": "size_ret",
          "type": "size_t*"
        }
      ],
      "docs": [
        "rpr_int rprPostEffectGetInfo(rpr_post_effect effect, rpr_post_effect_info info, size_t size,  void *  data, size_t *  size_ret);\n",
        [
          "/** @brief Create post effect\n",
          "*\n",
          "*  Create analytic point light represented by a point in space.\n",
          "*  Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*\n",
          "*  @param  context The context to create a light for\n",
          "*  @param  status  RPR_SUCCESS in case of success, error code otherwise\n",
          "*  @return         Light object\n",
          "*/\n"
        ]
      ]
    },
    "rprPostEffectSetParameter1f": {
      "name": "rprPostEffectSetParameter1f",
      "restype": "rpr_int",
      "args": [
        {
          "name": "effect",
          "type": "rpr_post_effect"
        },
        {
          "name": "name",
          "type": "rpr_char const*"
        },
        {
          "name": "x",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprPostEffectSetParameter1f(rpr_post_effect effect, rpr_char const * name, rpr_float x);\n",
        [
          "/** @brief Create post effect\n",
          "*\n",
          "*  Create analytic point light represented by a point in space.\n",
          "*  Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*\n",
          "*  @param  context The context to create a light for\n",
          "*  @param  status  RPR_SUCCESS in case of success, error code otherwise\n",
          "*  @return         Light object\n",
          "*/\n"
        ]
      ]
    },
    "rprPostEffectSetParameter1u": {
      "name": "rprPostEffectSetParameter1u",
      "restype": "rpr_int",
      "args": [
        {
          "name": "effect",
          "type": "rpr_post_effect"
        },
        {
          "name": "name",
          "type": "rpr_char const*"
        },
        {
          "name": "x",
          "type": "rpr_uint"
        }
      ],
      "docs": [
        "rpr_int rprPostEffectSetParameter1u(rpr_post_effect effect, rpr_char const * name, rpr_uint x);\n",
        [
          "/** @brief Create post effect\n",
          "*\n",
          "*  Create analytic point light represented by a point in space.\n",
          "*  Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*\n",
          "*  @param  context The context to create a light for\n",
          "*  @param  status  RPR_SUCCESS in case of success, error code otherwise\n",
          "*  @return         Light object\n",
          "*/\n"
        ]
      ]
    },
    "rprPostEffectSetParameter3f": {
      "name": "rprPostEffectSetParameter3f",
      "restype": "rpr_int",
      "args": [
        {
          "name": "effect",
          "type": "rpr_post_effect"
        },
        {
          "name": "name",
          "type": "rpr_char const*"
        },
        {
          "name": "x",
          "type": "rpr_float"
        },
        {
          "name": "y",
          "type": "rpr_float"
        },
        {
          "name": "z",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprPostEffectSetParameter3f(rpr_post_effect effect, rpr_char const * name, rpr_float x, rpr_float y, rpr_float z);\n",
        [
          "/** @brief Create post effect\n",
          "*\n",
          "*  Create analytic point light represented by a point in space.\n",
          "*  Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*\n",
          "*  @param  context The context to create a light for\n",
          "*  @param  status  RPR_SUCCESS in case of success, error code otherwise\n",
          "*  @return         Light object\n",
          "*/\n"
        ]
      ]
    },
    "rprPostEffectSetParameter4f": {
      "name": "rprPostEffectSetParameter4f",
      "restype": "rpr_int",
      "args": [
        {
          "name": "effect",
          "type": "rpr_post_effect"
        },
        {
          "name": "name",
          "type": "rpr_char const*"
        },
        {
          "name": "x",
          "type": "rpr_float"
        },
        {
          "name": "y",
          "type": "rpr_float"
        },
        {
          "name": "z",
          "type": "rpr_float"
        },
        {
          "name": "w",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprPostEffectSetParameter4f(rpr_post_effect effect, rpr_char const * name, rpr_float x, rpr_float y, rpr_float z, rpr_float w);\n",
        [
          "/** @brief Create post effect\n",
          "*\n",
          "*  Create analytic point light represented by a point in space.\n",
          "*  Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*\n",
          "*  @param  context The context to create a light for\n",
          "*  @param  status  RPR_SUCCESS in case of success, error code otherwise\n",
          "*  @return         Light object\n",
          "*/\n"
        ]
      ]
    },
    "rprRegisterPlugin": {
      "name": "rprRegisterPlugin",
      "restype": "rpr_int",
      "args": [
        {
          "name": "path",
          "type": "rpr_char const*"
        }
      ],
      "docs": [
        "rpr_int rprRegisterPlugin(rpr_char const * path);\n",
        [
          "/** @brief Register rendering plugin\n",
          "*\n",
          "*  <Description>\n",
          "*\n",
          "*  @param path     Path of plugin to load\n",
          "*  @return         unique identifier of plugin, -1 otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprSceneAttachHeteroVolume": {
      "name": "rprSceneAttachHeteroVolume",
      "restype": "rpr_int",
      "args": [
        {
          "name": "scene",
          "type": "rpr_scene"
        },
        {
          "name": "heteroVolume",
          "type": "rpr_hetero_volume"
        }
      ],
      "docs": [
        "rpr_int rprSceneAttachHeteroVolume(rpr_scene scene, rpr_hetero_volume heteroVolume);\n",
        [
          "/** @brief Attach a heteroVolume to the scene\n",
          " *\n",
          " *  A scene is essentially a collection of shapes, lights and volume regions.\n",
          " *\n",
          " *  @param  scene  The scene to attach\n",
          " *  @param  heteroVolume  The heteroVolume to attach\n",
          " *  @return        RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprSceneAttachLight": {
      "name": "rprSceneAttachLight",
      "restype": "rpr_int",
      "args": [
        {
          "name": "scene",
          "type": "rpr_scene"
        },
        {
          "name": "light",
          "type": "rpr_light"
        }
      ],
      "docs": [
        "rpr_int rprSceneAttachLight(rpr_scene scene, rpr_light light);\n",
        [
          "/** @brief Attach a light to the scene\n",
          " *\n",
          " *  A scene is essentially a collection of shapes, lights and volume regions\n",
          " *\n",
          " *  @param  scene  The scene to attach\n",
          " *  @param  light  The light to attach\n",
          " *  @return        RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprSceneAttachShape": {
      "name": "rprSceneAttachShape",
      "restype": "rpr_int",
      "args": [
        {
          "name": "scene",
          "type": "rpr_scene"
        },
        {
          "name": "shape",
          "type": "rpr_shape"
        }
      ],
      "docs": [
        "rpr_int rprSceneAttachShape(rpr_scene scene, rpr_shape shape);\n",
        [
          "/** @brief Attach a shape to the scene\n",
          " *\n",
          " *  A scene is essentially a collection of shapes, lights and volume regions.\n",
          " *\n",
          " *  @param  scene  The scene to attach\n",
          " *  @param  shape  The shape to attach\n",
          " *  @return        RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprSceneClear": {
      "name": "rprSceneClear",
      "restype": "rpr_int",
      "args": [
        {
          "name": "scene",
          "type": "rpr_scene"
        }
      ],
      "docs": [
        "rpr_int rprSceneClear(rpr_scene scene);\n",
        [
          "/** @brief Remove all objects from a scene\n",
          " *\n",
          " *  A scene is essentially a collection of shapes, lights and volume regions.\n",
          " *\n",
          " *  @param  scene   The scene to clear\n",
          " *  @return         RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprSceneDetachHeteroVolume": {
      "name": "rprSceneDetachHeteroVolume",
      "restype": "rpr_int",
      "args": [
        {
          "name": "scene",
          "type": "rpr_scene"
        },
        {
          "name": "heteroVolume",
          "type": "rpr_hetero_volume"
        }
      ],
      "docs": [
        "rpr_int rprSceneDetachHeteroVolume(rpr_scene scene, rpr_hetero_volume heteroVolume);\n",
        [
          "/** @brief Detach a heteroVolume from the scene\n",
          " *\n",
          " *  A scene is essentially a collection of shapes, lights and volume regions.\n",
          " *\n",
          " *  @param  scene   The scene to dettach from\n",
          " *  @return         RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprSceneDetachLight": {
      "name": "rprSceneDetachLight",
      "restype": "rpr_int",
      "args": [
        {
          "name": "scene",
          "type": "rpr_scene"
        },
        {
          "name": "light",
          "type": "rpr_light"
        }
      ],
      "docs": [
        "rpr_int rprSceneDetachLight(rpr_scene scene, rpr_light light);\n",
        [
          "/** @brief Detach a light from the scene\n",
          " *\n",
          " *  A scene is essentially a collection of shapes, lights and volume regions\n",
          " *\n",
          " *  @param  scene  The scene to dettach from\n",
          " *  @param  light  The light to detach\n",
          " *  @return        RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprSceneDetachShape": {
      "name": "rprSceneDetachShape",
      "restype": "rpr_int",
      "args": [
        {
          "name": "scene",
          "type": "rpr_scene"
        },
        {
          "name": "shape",
          "type": "rpr_shape"
        }
      ],
      "docs": [
        "rpr_int rprSceneDetachShape(rpr_scene scene, rpr_shape shape);\n",
        [
          "/** @brief Detach a shape from the scene\n",
          " *\n",
          " *  A scene is essentially a collection of shapes, lights and volume regions.\n",
          " *\n",
          " *  @param  scene   The scene to dettach from\n",
          " *  @return         RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprSceneGetBackgroundImage": {
      "name": "rprSceneGetBackgroundImage",
      "restype": "rpr_int",
      "args": [
        {
          "name": "scene",
          "type": "rpr_scene"
        },
        {
          "name": "out_image",
          "type": "rpr_image*"
        }
      ],
      "docs": [
        "rpr_int rprSceneGetBackgroundImage(rpr_scene scene, rpr_image * out_image);\n",
        [
          "/** @brief Get background image\n",
          "*\n",
          "*  @param  scene  The scene to get background image from\n",
          "*  @param  status RPR_SUCCESS in case of success, error code otherwise\n",
          "*  @return        Image object\n",
          "*/\n"
        ]
      ]
    },
    "rprSceneGetCamera": {
      "name": "rprSceneGetCamera",
      "restype": "rpr_int",
      "args": [
        {
          "name": "scene",
          "type": "rpr_scene"
        },
        {
          "name": "out_camera",
          "type": "rpr_camera*"
        }
      ],
      "docs": [
        "rpr_int rprSceneGetCamera(rpr_scene scene, rpr_camera * out_camera);\n",
        [
          "/** @brief Get camera for the scene\n",
          " *\n",
          " *  @param  scene  The scene to get camera for\n",
          " *  @param  status RPR_SUCCESS in case of success, error code otherwise\n",
          " *  @return camera id for the camera if any, NULL otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprSceneGetEnvironmentOverride": {
      "name": "rprSceneGetEnvironmentOverride",
      "restype": "rpr_int",
      "args": [
        {
          "name": "scene",
          "type": "rpr_scene"
        },
        {
          "name": "overrride",
          "type": "rpr_environment_override"
        },
        {
          "name": "out_light",
          "type": "rpr_light*"
        }
      ],
      "docs": [
        "rpr_int rprSceneGetEnvironmentOverride(rpr_scene scene, rpr_environment_override overrride, rpr_light * out_light);\n",
        [
          "/** @brief Get background override light \n",
          "*   Possible error codes:\n",
          "*      RPR_ERROR_INVALID_PARAMETER\n",
          "*\n",
          "*  @param  scene       The scene to set background for\n",
          "*  @param  overrride   overrride type\n",
          "*  @param  out_light   light returned\n",
          "*  @return        RPR_SUCCESS in case of success, error code otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprSceneGetInfo": {
      "name": "rprSceneGetInfo",
      "restype": "rpr_int",
      "args": [
        {
          "name": "scene",
          "type": "rpr_scene"
        },
        {
          "name": "info",
          "type": "rpr_scene_info"
        },
        {
          "name": "size",
          "type": "size_t"
        },
        {
          "name": "data",
          "type": "void*"
        },
        {
          "name": "size_ret",
          "type": "size_t*"
        }
      ],
      "docs": [
        "rpr_int rprSceneGetInfo(rpr_scene scene, rpr_scene_info info, size_t size, void * data, size_t * size_ret);\n",
        [
          "/** @brief Query information about a scene\n",
          " *\n",
          " *  The workflow is usually two-step: query with the data == NULL to get the required buffer size,\n",
          " *  then query with size_ret == NULL to fill the buffer with the data\n",
          " *   Possible error codes:\n",
          " *      RPR_ERROR_INVALID_PARAMETER\n",
          " *\n",
          " *  @param  scene    The scene to query\n",
          " *  @param  info     The type of info to query\n",
          " *  @param  size     The size of the buffer pointed by data\n",
          " *  @param  data     The buffer to store queried info\n",
          " *  @param  size_ret Returns the size in bytes of the data being queried\n",
          " *  @return          RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprSceneSetBackgroundImage": {
      "name": "rprSceneSetBackgroundImage",
      "restype": "rpr_int",
      "args": [
        {
          "name": "scene",
          "type": "rpr_scene"
        },
        {
          "name": "image",
          "type": "rpr_image"
        }
      ],
      "docs": [
        "rpr_int rprSceneSetBackgroundImage(rpr_scene scene, rpr_image image);\n",
        [
          "/** @brief Set background image for the scene which does not affect the scene lighting,\n",
          "*    it is shown as view-independent rectangular background\n",
          "*   Possible error codes:\n",
          "*      RPR_ERROR_INVALID_PARAMETER\n",
          "*\n",
          "*  @param  scene  The scene to set background for\n",
          "*  @param  image  Background image\n",
          "*  @return        RPR_SUCCESS in case of success, error code otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprSceneSetCamera": {
      "name": "rprSceneSetCamera",
      "restype": "rpr_int",
      "args": [
        {
          "name": "scene",
          "type": "rpr_scene"
        },
        {
          "name": "camera",
          "type": "rpr_camera"
        }
      ],
      "docs": [
        "rpr_int rprSceneSetCamera(rpr_scene scene, rpr_camera camera);\n",
        [
          "/** @brief Set camera for the scene\n",
          " *\n",
          " *  This is the main camera which for rays generation for the scene.\n",
          " *\n",
          " *  @param  scene  The scene to set camera for\n",
          " *  @param  camera Camera\n",
          " *  @return        RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprSceneSetEnvironmentOverride": {
      "name": "rprSceneSetEnvironmentOverride",
      "restype": "rpr_int",
      "args": [
        {
          "name": "scene",
          "type": "rpr_scene"
        },
        {
          "name": "overrride",
          "type": "rpr_environment_override"
        },
        {
          "name": "light",
          "type": "rpr_light"
        }
      ],
      "docs": [
        "rpr_int rprSceneSetEnvironmentOverride(rpr_scene scene, rpr_environment_override overrride, rpr_light light);\n",
        [
          "/** @brief Set background light for the scene which does not affect the scene lighting,\n",
          "*    but gets shown as a background image\n",
          "*   Possible error codes:\n",
          "*      RPR_ERROR_INVALID_PARAMETER\n",
          "*\n",
          "*  @param  scene  The scene to set background for\n",
          "*  @param  light  Background light\n",
          "*  @return        RPR_SUCCESS in case of success, error code otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprShapeGetInfo": {
      "name": "rprShapeGetInfo",
      "restype": "rpr_int",
      "args": [
        {
          "name": "arg0",
          "type": "rpr_shape"
        },
        {
          "name": "arg1",
          "type": "rpr_shape_info"
        },
        {
          "name": "arg2",
          "type": "size_t"
        },
        {
          "name": "arg3",
          "type": "void*"
        },
        {
          "name": "arg4",
          "type": "size_t*"
        }
      ],
      "docs": [
        "rpr_int rprShapeGetInfo(rpr_shape arg0, rpr_shape_info arg1, size_t arg2, void * arg3, size_t * arg4);\n",
        [
          "/** @brief Query information about a shape\n",
          " *\n",
          " *  The workflow is usually two-step: query with the data == NULL to get the required buffer size,\n",
          " *  then query with size_ret == NULL to fill the buffer with the data\n",
          " *   Possible error codes:\n",
          " *      RPR_ERROR_INVALID_PARAMETER\n",
          " *\n",
          " *  @param  shape           The shape object to query\n",
          " *  @param  material_info   The type of info to query\n",
          " *  @param  size            The size of the buffer pointed by data\n",
          " *  @param  data            The buffer to store queried info\n",
          " *  @param  size_ret        Returns the size in bytes of the data being queried\n",
          " *  @return                 RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprShapeSetAngularMotion": {
      "name": "rprShapeSetAngularMotion",
      "restype": "rpr_int",
      "args": [
        {
          "name": "shape",
          "type": "rpr_shape"
        },
        {
          "name": "x",
          "type": "rpr_float"
        },
        {
          "name": "y",
          "type": "rpr_float"
        },
        {
          "name": "z",
          "type": "rpr_float"
        },
        {
          "name": "w",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprShapeSetAngularMotion(rpr_shape shape, rpr_float x, rpr_float y, rpr_float z, rpr_float w);\n",
        [
          "/** @brief Set angular linear motion\n",
          " *\n",
          " *  @param  shape       The shape to set linear motion for\n",
          " *  @param  x           X component of the rotation axis\n",
          " *  @param  y           Y component of the rotation axis\n",
          " *  @param  z           Z component of the rotation axis\n",
          " *  @param  w           W rotation angle in radians\n",
          " *  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprShapeSetDisplacementMaterial": {
      "name": "rprShapeSetDisplacementMaterial",
      "restype": "rpr_int",
      "args": [
        {
          "name": "shape",
          "type": "rpr_shape"
        },
        {
          "name": "materialNode",
          "type": "rpr_material_node"
        }
      ],
      "docs": [
        "rpr_int rprShapeSetDisplacementMaterial(rpr_shape shape, rpr_material_node materialNode);\n",
        [
          "/** @brief Set displacement texture\n",
          "*\n",
          "*\n",
          "*  @param  shape         The shape to set subdivision for\n",
          "*  @param  materialNode  Displacement texture , as material.\n",
          "*  @return               RPR_SUCCESS in case of success, error code otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprShapeSetDisplacementScale": {
      "name": "rprShapeSetDisplacementScale",
      "restype": "rpr_int",
      "args": [
        {
          "name": "shape",
          "type": "rpr_shape"
        },
        {
          "name": "minscale",
          "type": "rpr_float"
        },
        {
          "name": "maxscale",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprShapeSetDisplacementScale(rpr_shape shape, rpr_float minscale, rpr_float maxscale);\n",
        [
          "/** @brief Set displacement scale\n",
          "*\n",
          "*\n",
          "*  @param  shape       The shape to set subdivision for\n",
          "*  @param  scale\t   The amount of displacement applied\n",
          "*  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprShapeSetHeteroVolume": {
      "name": "rprShapeSetHeteroVolume",
      "restype": "rpr_int",
      "args": [
        {
          "name": "shape",
          "type": "rpr_shape"
        },
        {
          "name": "heteroVolume",
          "type": "rpr_hetero_volume"
        }
      ],
      "docs": [
        "rpr_int rprShapeSetHeteroVolume(rpr_shape shape, rpr_hetero_volume heteroVolume);\n",
        [
          "/** @brief Create post effect\n",
          "*\n",
          "*  Create analytic point light represented by a point in space.\n",
          "*  Possible error codes:\n",
          "*      RPR_ERROR_OUT_OF_VIDEO_MEMORY\n",
          "*      RPR_ERROR_OUT_OF_SYSTEM_MEMORY\n",
          "*\n",
          "*  @param  context The context to create a light for\n",
          "*  @param  status  RPR_SUCCESS in case of success, error code otherwise\n",
          "*  @return         Light object\n",
          "*/\n"
        ]
      ]
    },
    "rprShapeSetLinearMotion": {
      "name": "rprShapeSetLinearMotion",
      "restype": "rpr_int",
      "args": [
        {
          "name": "shape",
          "type": "rpr_shape"
        },
        {
          "name": "x",
          "type": "rpr_float"
        },
        {
          "name": "y",
          "type": "rpr_float"
        },
        {
          "name": "z",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprShapeSetLinearMotion(rpr_shape shape, rpr_float x, rpr_float y, rpr_float z);\n",
        [
          "/** @brief Set shape linear motion\n",
          " *\n",
          " *  @param  shape       The shape to set linear motion for\n",
          " *  @param  x           X component of a motion vector\n",
          " *  @param  y           Y component of a motion vector\n",
          " *  @param  z           Z component of a motion vector\n",
          " *  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprShapeSetMaterial": {
      "name": "rprShapeSetMaterial",
      "restype": "rpr_int",
      "args": [
        {
          "name": "shape",
          "type": "rpr_shape"
        },
        {
          "name": "node",
          "type": "rpr_material_node"
        }
      ],
      "docs": [
        "rpr_int rprShapeSetMaterial(rpr_shape shape, rpr_material_node node);\n",
        [
          "/** @brief Set shape material\n",
          "*\n",
          "*/\n"
        ]
      ]
    },
    "rprShapeSetMaterialFaces": {
      "name": "rprShapeSetMaterialFaces",
      "restype": "rpr_int",
      "args": [
        {
          "name": "shape",
          "type": "rpr_shape"
        },
        {
          "name": "node",
          "type": "rpr_material_node"
        },
        {
          "name": "face_indices",
          "type": "rpr_int*"
        },
        {
          "name": "num_faces",
          "type": "size_t"
        }
      ],
      "docs": [
        "rpr_int rprShapeSetMaterialFaces(rpr_shape shape, rpr_material_node node, rpr_int* face_indices, size_t num_faces);\n",
        [
          "/** @brief Set shape materials for specific faces\n",
          "*\n",
          "*  @param  shape\tThe shape to set the material for\n",
          "*  @param  node \tThe material to set\n",
          "*  @param  face_indices\t\n",
          "*  @return\t\tRPR_SUCCESS in case of success, error code otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprShapeSetObjectGroupID": {
      "name": "rprShapeSetObjectGroupID",
      "restype": "rpr_int",
      "args": [
        {
          "name": "shape",
          "type": "rpr_shape"
        },
        {
          "name": "objectGroupID",
          "type": "rpr_uint"
        }
      ],
      "docs": [
        "rpr_int rprShapeSetObjectGroupID(rpr_shape shape, rpr_uint objectGroupID);\n",
        [
          "/** @brief Set object group ID (mainly for debugging).\n",
          "*\n",
          "*\n",
          "*  @param  shape          The shape to set\n",
          "*  @param  objectGroupID  The ID\n",
          "*  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprShapeSetScaleMotion": {
      "name": "rprShapeSetScaleMotion",
      "restype": "rpr_int",
      "args": [
        {
          "name": "shape",
          "type": "rpr_shape"
        },
        {
          "name": "x",
          "type": "rpr_float"
        },
        {
          "name": "y",
          "type": "rpr_float"
        },
        {
          "name": "z",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprShapeSetScaleMotion(rpr_shape shape, rpr_float x, rpr_float y, rpr_float z);\n",
        [
          "/** @brief Set angular linear motion\n",
          " *\n",
          " *  @param  shape       The shape to set linear motion for\n",
          " *  @param  x           X component of the rotation axis\n",
          " *  @param  y           Y component of the rotation axis\n",
          " *  @param  z           Z component of the rotation axis\n",
          " *  @param  w           W rotation angle in radians\n",
          " *  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprShapeSetShadow": {
      "name": "rprShapeSetShadow",
      "restype": "rpr_int",
      "args": [
        {
          "name": "shape",
          "type": "rpr_shape"
        },
        {
          "name": "casts_shadow",
          "type": "rpr_bool"
        }
      ],
      "docs": [
        "rpr_int rprShapeSetShadow(rpr_shape shape, rpr_bool casts_shadow);\n",
        [
          "/** @brief Set shadow flag\n",
          "*\n",
          "*  @param  shape       The shape to set shadow flag for\n",
          "*  @param  visible     Determines if the shape casts shadow\n",
          "*  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprShapeSetShadowCatcher": {
      "name": "rprShapeSetShadowCatcher",
      "restype": "rpr_int",
      "args": [
        {
          "name": "shape",
          "type": "rpr_shape"
        },
        {
          "name": "shadowCatcher",
          "type": "rpr_bool"
        }
      ],
      "docs": [
        "rpr_int rprShapeSetShadowCatcher(rpr_shape shape, rpr_bool shadowCatcher);\n",
        [
          "/** @brief Set shadow catcher flag\n",
          "*\n",
          "*  @param  shape         The shape to set shadow catcher flag for\n",
          "*  @param  shadowCatcher Determines if the shape behaves as shadow catcher\n",
          "*  @return               RPR_SUCCESS in case of success, error code otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprShapeSetSubdivisionBoundaryInterop": {
      "name": "rprShapeSetSubdivisionBoundaryInterop",
      "restype": "rpr_int",
      "args": [
        {
          "name": "shape",
          "type": "rpr_shape"
        },
        {
          "name": "type",
          "type": "rpr_subdiv_boundary_interfop_type"
        }
      ],
      "docs": [
        "rpr_int rprShapeSetSubdivisionBoundaryInterop(rpr_shape shape, rpr_subdiv_boundary_interfop_type type);\n",
        [
          "/** @brief \n",
          "*\n",
          "*\n",
          "*  @param  shape       The shape to set subdivision for\n",
          "*  @param  type\t   \n",
          "*  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprShapeSetSubdivisionCreaseWeight": {
      "name": "rprShapeSetSubdivisionCreaseWeight",
      "restype": "rpr_int",
      "args": [
        {
          "name": "shape",
          "type": "rpr_shape"
        },
        {
          "name": "factor",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprShapeSetSubdivisionCreaseWeight(rpr_shape shape, rpr_float factor);\n",
        [
          "/** @brief \n",
          "*\n",
          "*\n",
          "*  @param  shape       The shape to set subdivision for\n",
          "*  @param  factor\t   \n",
          "*  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprShapeSetSubdivisionFactor": {
      "name": "rprShapeSetSubdivisionFactor",
      "restype": "rpr_int",
      "args": [
        {
          "name": "shape",
          "type": "rpr_shape"
        },
        {
          "name": "factor",
          "type": "rpr_uint"
        }
      ],
      "docs": [
        "rpr_int rprShapeSetSubdivisionFactor(rpr_shape shape, rpr_uint factor);\n",
        [
          "/** @brief Set shape subdivision\n",
          "*\n",
          "*\n",
          "*  @param  shape       The shape to set subdivision for\n",
          "*  @param  factor\t   Number of subdivision steps to do\n",
          "*  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprShapeSetTransform": {
      "name": "rprShapeSetTransform",
      "restype": "rpr_int",
      "args": [
        {
          "name": "shape",
          "type": "rpr_shape"
        },
        {
          "name": "transpose",
          "type": "rpr_bool"
        },
        {
          "name": "transform",
          "type": "rpr_float const*"
        }
      ],
      "docs": [
        "rpr_int rprShapeSetTransform(rpr_shape shape, rpr_bool transpose, rpr_float const * transform);\n",
        [
          "/** @brief Set shape world transform\n",
          " *\n",
          " *\n",
          " *  @param  shape       The shape to set transform for\n",
          " *  @param  transpose   Determines whether the basis vectors are in columns(false) or in rows(true) of the matrix\n",
          " *  @param  transform   Array of 16 rpr_float values (row-major form)\n",
          " *  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprShapeSetVisibility": {
      "name": "rprShapeSetVisibility",
      "restype": "rpr_int",
      "args": [
        {
          "name": "shape",
          "type": "rpr_shape"
        },
        {
          "name": "visible",
          "type": "rpr_bool"
        }
      ],
      "docs": [
        "rpr_int rprShapeSetVisibility(rpr_shape shape, rpr_bool visible);\n",
        [
          "/** @brief Set visibility flag\n",
          " *\n",
          " *  @param  shape       The shape to set visibility for\n",
          " *  @param  visible     Determines if the shape is visible or not\n",
          " *  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprShapeSetVisibilityInSpecular": {
      "name": "rprShapeSetVisibilityInSpecular",
      "restype": "rpr_int",
      "args": [
        {
          "name": "shape",
          "type": "rpr_shape"
        },
        {
          "name": "visible",
          "type": "rpr_bool"
        }
      ],
      "docs": [
        "rpr_int rprShapeSetVisibilityInSpecular(rpr_shape shape, rpr_bool visible);\n",
        [
          "/** @brief Set visibility flag for specular refleacted\\refracted rays\n",
          "*\n",
          "*  @param  shape       The shape to set visibility for\n",
          "*  @param  visible     Determines if the shape is visible or not\n",
          "*  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprShapeSetVisibilityPrimaryOnly": {
      "name": "rprShapeSetVisibilityPrimaryOnly",
      "restype": "rpr_int",
      "args": [
        {
          "name": "shape",
          "type": "rpr_shape"
        },
        {
          "name": "visible",
          "type": "rpr_bool"
        }
      ],
      "docs": [
        "rpr_int rprShapeSetVisibilityPrimaryOnly(rpr_shape shape, rpr_bool visible);\n",
        [
          "/** @brief Set visibility flag for primary rays\n",
          "*\n",
          "*  @param  shape       The shape to set visibility for\n",
          "*  @param  visible     Determines if the shape is visible or not\n",
          "*  @return             RPR_SUCCESS in case of success, error code otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprShapeSetVolumeMaterial": {
      "name": "rprShapeSetVolumeMaterial",
      "restype": "rpr_int",
      "args": [
        {
          "name": "shape",
          "type": "rpr_shape"
        },
        {
          "name": "node",
          "type": "rpr_material_node"
        }
      ],
      "docs": [
        "rpr_int rprShapeSetVolumeMaterial(rpr_shape shape, rpr_material_node node);\n",
        [
          "/** @brief Set shape volume material\n",
          "*\n",
          "*/\n"
        ]
      ]
    },
    "rprSkyLightAttachPortal": {
      "name": "rprSkyLightAttachPortal",
      "restype": "rpr_int",
      "args": [
        {
          "name": "scene",
          "type": "rpr_scene"
        },
        {
          "name": "skylight",
          "type": "rpr_light"
        },
        {
          "name": "portal",
          "type": "rpr_shape"
        }
      ],
      "docs": [
        "rpr_int rprSkyLightAttachPortal(rpr_scene scene, rpr_light skylight, rpr_shape portal);\n",
        [
          "/** @brief Set portal for sky light to accelerate convergence of indoor scenes\n",
          "*\n",
          "*   Possible error codes:\n",
          "*      RPR_ERROR_INVALID_PARAMETER\n",
          "*\n",
          "*  @param  skylight  Sky light\n",
          "*  @param  portal    Portal mesh, might have multiple components\n",
          "*  @return           RPR_SUCCESS in case of success, error code otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprSkyLightDetachPortal": {
      "name": "rprSkyLightDetachPortal",
      "restype": "rpr_int",
      "args": [
        {
          "name": "scene",
          "type": "rpr_scene"
        },
        {
          "name": "skylight",
          "type": "rpr_light"
        },
        {
          "name": "portal",
          "type": "rpr_shape"
        }
      ],
      "docs": [
        "rpr_int rprSkyLightDetachPortal(rpr_scene scene, rpr_light skylight, rpr_shape portal);\n",
        [
          "/** @brief Remove portal for Sky light.\n",
          "*\n",
          "*   Possible error codes:\n",
          "*      RPR_ERROR_INVALID_PARAMETER\n",
          "*\n",
          "*  @param  env_light Sky light\n",
          "*  @param  portal    Portal mesh, that have been added to light.\n",
          "*  @return           RPR_SUCCESS in case of success, error code otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprSkyLightSetAlbedo": {
      "name": "rprSkyLightSetAlbedo",
      "restype": "rpr_int",
      "args": [
        {
          "name": "skylight",
          "type": "rpr_light"
        },
        {
          "name": "albedo",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprSkyLightSetAlbedo(rpr_light skylight, rpr_float albedo);\n",
        [
          "/** @brief Set albedo of a sky light\n",
          "*\n",
          "*  @param  skylight        Sky light\n",
          "*  @param  albedo          Albedo value\n",
          "*  @return                 RPR_SUCCESS in case of success, error code otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprSkyLightSetScale": {
      "name": "rprSkyLightSetScale",
      "restype": "rpr_int",
      "args": [
        {
          "name": "skylight",
          "type": "rpr_light"
        },
        {
          "name": "scale",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprSkyLightSetScale(rpr_light skylight, rpr_float scale);\n",
        [
          "/** @brief Set scale of a sky light\n",
          "*\n",
          "*  @param  skylight        Sky light\n",
          "*  @param  scale           Scale value\n",
          "*  @return                 RPR_SUCCESS in case of success, error code otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprSkyLightSetTurbidity": {
      "name": "rprSkyLightSetTurbidity",
      "restype": "rpr_int",
      "args": [
        {
          "name": "skylight",
          "type": "rpr_light"
        },
        {
          "name": "turbidity",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprSkyLightSetTurbidity(rpr_light skylight, rpr_float turbidity);\n",
        [
          "/** @brief Set turbidity of a sky light\n",
          "*\n",
          "*  @param  skylight        Sky light\n",
          "*  @param  turbidity       Turbidity value\n",
          "*  @return                 RPR_SUCCESS in case of success, error code otherwise\n",
          "*/\n"
        ]
      ]
    },
    "rprSpotLightSetConeShape": {
      "name": "rprSpotLightSetConeShape",
      "restype": "rpr_int",
      "args": [
        {
          "name": "light",
          "type": "rpr_light"
        },
        {
          "name": "iangle",
          "type": "rpr_float"
        },
        {
          "name": "oangle",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprSpotLightSetConeShape(rpr_light light, rpr_float iangle, rpr_float oangle);\n",
        [
          "/** @brief Set cone shape for a spot light\n",
          " *\n",
          " * Spot light produces smooth penumbra in a region between inner and outer circles,\n",
          " * the area inside the inner cicrle receives full power while the area outside the\n",
          " * outer one is fully in shadow.\n",
          " *\n",
          " *  @param  iangle Inner angle of a cone in radians\n",
          " *  @param  oangle Outer angle of a coner in radians, should be greater that or equal to inner angle\n",
          " *  @return status RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    },
    "rprSpotLightSetRadiantPower3f": {
      "name": "rprSpotLightSetRadiantPower3f",
      "restype": "rpr_int",
      "args": [
        {
          "name": "light",
          "type": "rpr_light"
        },
        {
          "name": "r",
          "type": "rpr_float"
        },
        {
          "name": "g",
          "type": "rpr_float"
        },
        {
          "name": "b",
          "type": "rpr_float"
        }
      ],
      "docs": [
        "rpr_int rprSpotLightSetRadiantPower3f(rpr_light light, rpr_float r, rpr_float g, rpr_float b);\n",
        [
          "/** @brief Set radiant power of a spot light source\n",
          " *\n",
          " *  @param  r R component of a radiant power vector\n",
          " *  @param  g G component of a radiant power vector\n",
          " *  @param  b B component of a radiant power vector\n",
          " *  @return   RPR_SUCCESS in case of success, error code otherwise\n",
          " */\n"
        ]
      ]
    }
  }
}